// 命名空间
let acA = [['185.132.53.255', '179.63.56.255', 5, 100], [1255, '186.36.46.32', 125, 255], [0, 5, 652, 45, 36, 12, 56, 874, 2125, 452, 5621, 122], 0]
let getA = false
let ajax_interceptor_qoweifjqon = {
  settings: {
    ajaxInterceptor_switchOn: false,
    ajaxInterceptor_always200On: true, // 默认开启，后期可以扩展成设置项
    ajaxInterceptor_rules: [],
    ajaxInterceptor_ycyGameCodeArray: [],
    ajaxInterceptor_cgGameCodeArray: [],
    ajaxInterceptor_syGameCodeArray: [],
    ajaxInterceptor_syT: 0,
  },
  // 获取匹配到的规则项
  getMatIn: ({ thisRequestUrl = '', thisMethod = '' }) => {
    return ajax_interceptor_qoweifjqon.settings.ajaxInterceptor_rules.find(item => {
      const { filterType = 'normal', limitMethod = 'ALL', switchOn = true, match } = item
      const matchedMethod = thisMethod === limitMethod || limitMethod === 'ALL'
      const matchedRequest = (filterType === 'normal' && thisRequestUrl.indexOf(match) > -1) ||
        (filterType === 'regex' && (thisRequestUrl.split('?')[0]).match(new RegExp(match.slice(1, -1), 'ig')))
      return switchOn && matchedMethod && matchedRequest
    })
  },
  // 执行用户输入的函数，如果有错误会抛出到控制台
  executeStringFunctionxxx: (stringFunction, args, funcName = '') => {
    try {
      const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
      const deOrEn = ajax_interceptor_qoweifjqon.cgDecryptOrEncrypt;
      stringFunction = (new Function('args', 'deOrEn', 'mckopdkso', stringFunction))(args, deOrEn, mckopdkso)
    } catch (e) {
      console.error(`[Ajax Modifier] ExecuteFunctionError: Please check the ${funcName} function.\n`, e)
    }
    return stringFunction;
  },
  getRequestParamsxxx: (requestUrl) => {
    if (!requestUrl) {
      return null;
    }
    const paramStr = requestUrl.split('?').pop();
    const keyValueArr = paramStr.split('&');
    let keyValueObj = {};
    keyValueArr.forEach((item) => {
      // 保证中间不会把=给忽略掉
      const itemArr = item.replace('=', '〓').split('〓');
      const itemObj = { [itemArr[0]]: itemArr[1] };
      keyValueObj = Object.assign(keyValueObj, itemObj);
    });
    return keyValueObj;
  },
  cgDecryptOrEncrypt: (encryptText, key) => {
    let decryptedText = '';
    let keyIndex = 0;
    const keyLength = key.length;

    for (let i = 0; i < encryptText.length; i++) {
      decryptedText += String.fromCharCode(encryptText.charCodeAt(i) ^ key.charCodeAt(keyIndex));
      keyIndex = (keyIndex + (63 & (i + 1))) % keyLength;
    }

    return decryptedText;
  },
  getCompleteUrlxxx: (inputUrl) => {
    let url = inputUrl.trim()
    const protocol = window.location.protocol
    const host = window.location.host
    const currentUrl = window.location.href
    try {
      // 如果解析成功，表示输入是完整的URL，不需要处理
      new URL(url)
    } catch (e) {
      if (url.startsWith("./") || url.startsWith("../")) {
        // 相对路由
        url = new URL(url, currentUrl).href
      } else if (url.startsWith("//")) {
        // 只缺少协议，补全协议
        url = protocol + url
      } else {
        // 既没有协议也没有域名，补全域名和协议
        url = protocol + "//" + host + (url.startsWith("/") ? "" : "/") + url
      }
    }
    return url
  },
  info: '',
  jsvS: {},
  originalXHR: window.XMLHttpRequest,
  myXHR: function () {
    let pageScriptEventDispatched = false
    let fitst = function (t) {
      for (var e, n = 3, r = [], i = t[2], a = 0; a < i; a++) {
        var o = 0;
        switch (t[n]) {
          case 0:
            o = 0 !== (e = t.subarray(n))[0] ? 0 : e[3] + 4;
            break;
          case 1:
            o = h(t.subarray(n));
            break;
          case 2:
            o = d(t.subarray(n))
        }
        o && (r.push(new Uint8Array(t.subarray(n, n + o))),
          n += o)
      }
      return [r, n]
    };
    let d = function (t) {
      return 2 !== t[0] ? 0 : 4
    }; let h = function (t) {
      return 1 !== t[0] ? 0 : 4
    };


    let cll = function (t, e) {
      for (var n = 1, r = t[n++], i = t[n++], a = t[n++], o = 0; o < a; o++)
        e[o] = pll(e[o] - i, r, o, a);
    }
    let lll = function (t, e) {
      var n = 1
        , r = t[n++]
        , i = t[n++]
        , a = t[n++];
      n = e.length - a;
      for (var o = 0; o < a; o++)
        e[n] = pll(e[n] - i, r, o, a),
          n++
    }

    let pll = function (t, e, n, r) {
      switch (e) {
        case 1:
          t -= n + 1;
          break;
        case 2:
          t -= r - n;
          break;
        case 3:
          t -= n % 2 ? n + 1 : 0;
          break;
        case 4:
          t -= n % 2 ? r - n : 0;
          break;
        case 5:
          t -= n % 2 ? n + 1 : r - n
      }
      return (1024 + t) % 256
    };
    function syDecyptVal(encyptV) {
      let decodedData = atob(encyptV.replace(/[^A-Za-z0-9\+\/]/g, ""));

      // 将 Base64 解码的字符串转换为字节数组
      let charList = decodedData.split('');
      let uintArray = new Uint8Array(charList.map(function (c) {
        return c.charCodeAt(0);
      }));

      // 使用 pako.inflate 解压
      try {
        let inflated = parent.pako.inflate(uintArray);

        // 将解压后的数据转换为字符串（如果数据是文本）
        let inflatedString = JSON.parse(new TextDecoder("utf-8").decode(inflated));
        return inflatedString
      } catch (e) {
        console.error(e);
      }
    }
    const getChapter = function (chapter) {
      if (chapter.md5) { window.syChapter.push(chapter); window.syChapterById[chapter.uuid] = chapter }
      if (chapter.subchapters && chapter.subchapters.length > 0) {
        chapter.subchapters.forEach(function (subchapter) {
          subchapter.parentChapterUuid = chapter.uuid;
        });
        chapter.subchapters.forEach(getChapter);
      }
    }
    const getAAA = function (data) {
      let bgpic = {
        bg: new Set(),
        pi: new Set(),
        pix: new Set()
      }
      window.bgpicSA = {
        bg: {},
        pi: {},
        pix: {}
      }
      data.resource.image && Object.values(data.resource.image).forEach(img => {
        if (!bgpic.pi.has(img.id)) {
          bgpic.pi.add(img.id)
          let a = { fileType: img.fileType, url: img.url, name: img.name, id: img.id }
          a.newName = img.name.includes('_') ? img.name.slice(0, img.name.lastIndexOf('_')) : img.name
          window.bgpicSA.pi[`$${img.id}`] = a
        }
      })
      data.resource.audio && Object.values(data.resource.audio).forEach(audio => {
        if (!bgpic.bg.has(audio.id)) {
          bgpic.bg.add(audio.id)
          let a = { fileType: audio.fileType || 'mp3', name: audio.name, id: audio.id }
          a.url = audio.url.indexOf(`.${a.fileType}`) >= 0 ? audio.url : audio.url + `.${a.fileType}`
          a.newName = audio.name.includes('_') ? audio.name.slice(0, audio.name.lastIndexOf('_')) : audio.name
          window.bgpicSA.bg[`$${audio.id}`] = a
        }
      })
      data.resource.pixelImage && Object.keys(data.resource.pixelImage).forEach(pixelImage => {
        if (!bgpic.pix.has(pixelImage)) {
          bgpic.pix.add(pixelImage)
          window.bgpicSA.pix[pixelImage] = macro.resource.pixelImage[pixelImage]
        }
      })

      if (data.macros && (data.macros.length !== 0 || Object.values(data.macros).length !== 0)) {
        Object.values(data.macros).forEach(macro => {
          macro.resource.image && Object.values(macro.resource.image).forEach(img => {
            if (!bgpic.pi.has(img.id)) {
              bgpic.pi.add(img.id)
              let a = { fileType: img.fileType, url: img.url, name: img.name, id: img.id }
              a.newName = img.name.includes('_') ? img.name.slice(0, img.name.lastIndexOf('_')) : img.name
              window.bgpicSA.pi[`$${img.id}`] = a
            }
          })
          macro.resource.audio && Object.values(macro.resource.audio).forEach(audio => {
            if (!bgpic.bg.has(audio.id)) {
              bgpic.bg.add(audio.id)
              let a = { fileType: audio.fileType || 'mp3', name: audio.name, id: audio.id }
              a.url = audio.url.indexOf(`.${a.fileType}`) >= 0 ? audio.url : audio.url + `.${a.fileType}`
              a.newName = audio.name.includes('_') ? audio.name.slice(0, audio.name.lastIndexOf('_')) : audio.name
              window.bgpicSA.bg[`$${audio.id}`] = a
            }
          })
          macro.resource.pixelImage && Object.keys(macro.resource.pixelImage).forEach(pixelImage => {
            if (!bgpic.pix.has(pixelImage)) {
              bgpic.pix.add(pixelImage)
              window.bgpicSA.pix[pixelImage] = macro.resource.pixelImage[pixelImage]
            }
          })
        })
      }
      if (data.uis && (data.uis.length !== 0 || Object.values(data.uis).length !== 0)) {
        Object.values(data.uis).forEach(macro => {
          macro.resource.image && Object.values(macro.resource.image).forEach(img => {
            if (!bgpic.pi.has(img.id)) {
              bgpic.pi.add(img.id)
              let a = { fileType: img.fileType, url: img.url, name: img.name, id: img.id }
              a.newName = img.name.includes('_') ? img.name.slice(0, img.name.lastIndexOf('_')) : img.name
              window.bgpicSA.pi[`$${img.id}`] = a
            }
          })
          macro.resource.audio && Object.values(macro.resource.audio).forEach(audio => {
            if (!bgpic.bg.has(audio.id)) {
              bgpic.bg.add(audio.id)
              let a = { fileType: audio.fileType || 'mp3', name: audio.name, id: audio.id }
              a.url = audio.url.indexOf(`.${a.fileType}`) >= 0 ? audio.url : audio.url + `.${a.fileType}`
              a.newName = audio.name.includes('_') ? audio.name.slice(0, audio.name.lastIndexOf('_')) : audio.name
              window.bgpicSA.bg[`$${audio.id}`] = a
            }
          })
          macro.resource.pixelImage && Object.keys(macro.resource.pixelImage).forEach(pixelImage => {
            if (!bgpic.pix.has(pixelImage)) {
              bgpic.pix.add(pixelImage)
              window.bgpicSA.pix[pixelImage] = macro.resource.pixelImage[pixelImage]
            }
          })
        })
      }
      const customEvent1 = new CustomEvent("ycyBgPi", {
        detail: { value: [{ bg: Object.values(window.bgpicSA.bg), pi: Object.values(window.bgpicSA.pi) }, 'all'] }
      });
      window.dispatchEvent(customEvent1);
    }
    const xxx = () => {
      const [method, requestUrl] = this._openArgs
      if (/^https:\/\/www\.3000\.com\/work\/\d+\.html$/.test(location.href) || /^https:\/\/www\.3000\.com\/h5\/player\/index\.html/.test(location.href)) {
        if (/^https:\/\/www\.3000\.com\/apis\/client\/game-AntiAddiction\.html\?_callback_=jQuery\w+$/.test(requestUrl)) {
          let orgResponse = this.response
          const jsonMatch = orgResponse.match(/\{.*\}/);
          let newResponse;
          if (jsonMatch) {
            newResponse = JSON.parse(jsonMatch);
            newResponse.result.is_adult = 1;
            newResponse.result.is_login = 1;
            newResponse.result.authentication = 1;
          }
          const modifiedResponseString = orgResponse.replace(/\{.*\}/, JSON.stringify(newResponse));
          this.response = this.responseText = modifiedResponseString
          return
        }
        if (/^\/\/www\.3000\.com\/apis\/client\/v1\.0\/user-login\.html\?t=\d+\.\d+$/.test(requestUrl)) {
          let info = JSON.parse(this.response)
          info.code = '99'
          info.message = "当前已登陆用户信息"
          if (Object.values(info.result).length === 0) {
            info.result.uid = [];
            window.isNotLogin = parent.isNotLogin = true
          }
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl === '//my.3000.com?m=YQ&op=player&ac=some&api_v=1.0.0&api_from=webpc') {
          let info = JSON.parse(this.response)
          if (info.data.length === 0 || Object.values(info.data).length === 0) {
            info.data = {}
            info.data.had_invite = 100
            info.data.expire = 0
            info.data.msg = `你已成功邀请${info.data.had_invite}人，快复制邀请码${parent.ueGame.gameId}1212121212给好友填写获取奖励吧~`
          } else {
            info.data.had_invite = 100
            info.data.msg = info.data.msg.replace(/你已成功邀请\d+人/, `你已成功邀请${info.data.had_invite}人`);
          }
          info.status = 0
          info.success = true
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl === "//pay.3000.com/?m=player&op=h5_get_account_info") {
          let info = JSON.parse(this.response)
          if (info.data.length === 0 || Object.values(info.data).length === 0) {
            info.data = {}
            info.data.total_share = 100
            info.data.daily_share = 10
            info.data.fans_count = 100000
            info.data.uid = '1212121212'
          } else {
            window.nowUserId = parent.nowUserId = parseInt(info.data.uid)
            info.data.total_share = 100
            info.data.daily_share = 10
            info.data.fans_count = 100000
          }
          // info.data.payment_available = 1000
          // info.data.zcoin_payment_available = 1000
          info.status = 0
          info.success = true
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl === '//my.3000.com/index.php?m=MonthTicket&op=index&ac=ticketsInGame&api_v=1.0.0&api_from=webpc') {
          let info = JSON.parse(this.response)
          if (info.data.length === 0 || Object.values(info.data).length === 0) {
            info.data = {}
            info.data.tickets = 500
          } else {
            info.data.tickets = 500
          }
          info.status = 100
          info.success = true
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl === '//www.3000.com/apis/client/Role-RoleList.html') {
          window.allRoles = parent.allRoles = JSON.parse(this.response).code === '100' ? JSON.parse(this.response).result : []
          //window.uuidUser = new URLSearchParams(this._sendArgs[0]).get('uuid')
          return
        }
        if (requestUrl === '//my.3000.com/index.php?m=guard_role&op=guard&ac=valueToRoleOfUser&api_v=1.0.0&api_from=webpc') {
          let info = JSON.parse(this.response)
          if (info.data.length === 0 || Object.values(info.data).length === 0) {
            info.data = {}
            window.allRoles.forEach(v => {
              info.data[v.id] = 50000
            })
          } else {
            Object.keys(info.data).forEach(v => {
              info.data[v] = 50000
            })
          }
          info.status = 100
          info.success = true
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl === '//my.3000.com/index.php?m=guard_role&op=guard&ac=valueToGameOfUser&api_v=1.0.0&api_from=webpc') {
          let info = JSON.parse(this.response)
          if (info.data.length === 0 || Object.values(info.data).length === 0) {
            info.data = {}
            info.data.guard_value = 50000
          } else {
            info.data.guard_value = 50000
          }
          info.status = 100
          info.success = true
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (/\/\/pay\.3000\.com\/\?m=payinterface&op=player_one_opus_fans&opus_id=(\d+|)&uid=(\d+|)/.test(requestUrl)) {
          let info = JSON.parse(this.response)
          if (info.data.length === 0 || Object.values(info.data).length === 0) {
            info.data = {}
            info.data.fans_total = 5000000
          } else {
            window.nowUserId = parent.nowUserId = info.data.uid ? info.data.uid : 1212121212
            info.data.fans_total = 5000000
          }
          info.status = 100
          info.success = true
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl === '//my.3000.com/index.php?m=user_info&op=index&ac=collect_appoint_search&api_v=1.0.0&api_from=webpc') {
          let info = JSON.parse(this.response)
          if (info.data.length === 0 || Object.values(info.data).length === 0) {
            info.data = {}
            info.data.status = 1
          } else {
            info.data.status = 1
          }
          info.status = 0
          info.success = true
          this.response = this.responseText = JSON.stringify(info)
          let a = rFun(27).d();
          a.default_settings.records.forEach(v => { v.price = 0 })
          rFun(27).g(a)
          return
        }
        if (/\/\/my\.3000\.com\/\?m=relation&op=index&ac=fs&api_v=1\.0\.0&api_from=webpc&\?_=(\d+)&id=(\d+)/.test(requestUrl)) {
          let info = JSON.parse(this.response)
          if (info.data.length === 0 || Object.values(info.data).length === 0) {
            info.data = {}
            info.data.is_focus = 1
          } else {
            info.data.is_focus = 1
          }
          info.status = 100
          info.success = true
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        // if (requestUrl === '//my.3000.com/index.php?m=pay_value&op=index&ac=getPVCode&api_v=1.0.0&api_from=webpc' && !window.modPvC) {
        //   let info = JSON.parse(this.response)
        //   info.data = []
        //   info.status = -1
        //   info.success = false
        //   window.modPvC = !window.modPvC
        //   this.response = this.responseText = JSON.stringify(info)
        // }
        if (requestUrl === '//my.3000.com/index.php?m=pay_value&op=index&ac=PVInfo&api_v=1.0.0&api_from=webpc') {
          let newResponse = JSON.parse(this.response)
          if (window.syFFeng && window.enConV1) {
            let value, valueNew
            if (newResponse.data.content !== '') {
              value = atob(Object(window.enConV1.a)(window.deConstEnV(newResponse.data.content), 5))
              valueNew = JSON.parse(value)
            }
            const oleValue = window.getPCon();
            let newV;
            if (!window.valueType) {
              Object.keys(oleValue).forEach(v => {
                if (oleValue[v].length === window.gameInfoSy.payValues.length && oleValue[v].length !== 0 && window.gameInfoSy.payValues.length !== 0 && oleValue[v][oleValue[v].length - 1].uuid === window.gameInfoSy.payValues[window.gameInfoSy.payValues.length - 1].uuid) {
                  newV = oleValue[v]
                }
              })
            } else {
              newV = oleValue[window.valueType.pv]
            }
            valueNew = []
            newV.forEach(v => {
              valueNew.push({ uuid: v.uuid, value: window.deV(v).value })
            })
            let valueNow = window.enConV(Object(window.enConV1.b)(btoa(JSON.stringify(valueNew)), 5))
            newResponse.data.content = valueNow
          } else if (window.valo && window.enConV1) {
            let value, valueNew
            if (newResponse.data.content !== '') {
              value = atob(Object(window.enConV1.a)(window.deConstEnV(newResponse.data.content), 5))
              valueNew = JSON.parse(value)
            }
            const oleValue = window.valo ? (parent.hasBuyN === 0 || parent.hasBuyN === undefined) ? window.valo : window.getPCon() : window.getPCon();
            let newV;
            if (!window.valueType) {
              Object.keys(oleValue).forEach(v => {
                if (oleValue[v].length === window.gameInfoSy.payValues.length && oleValue[v].length !== 0 && window.gameInfoSy.payValues.length !== 0 && oleValue[v][oleValue[v].length - 1].uuid === window.gameInfoSy.payValues[window.gameInfoSy.payValues.length - 1].uuid) {
                  newV = oleValue[v]
                }
              })
            } else {
              newV = oleValue[window.valueType.pv]
            }
            valueNew = []
            newV.forEach(v => {
              valueNew.push({ uuid: v.uuid, value: window.deV(v).value })
            })
            let valueNow = window.enConV(Object(window.enConV1.b)(btoa(JSON.stringify(valueNew)), 5))
            newResponse.data.content = valueNow
            if (parent.hasBuyN === undefined) {
              parent.hasBuyN = 0
            }
          }
          newResponse.status = 0
          newResponse.success = true
          this.response = this.responseText = JSON.stringify(newResponse)
          return
        }
        if (requestUrl === '//my.3000.com/index.php?m=pay_value&op=index&ac=PVSave&api_v=1.0.0&api_from=webpc') {
          let newResponse = JSON.parse(this.response)
          newResponse.status = 0
          newResponse.success = true
          this.response = this.responseText = JSON.stringify(newResponse)
          return
        }
        if (requestUrl === '//my.3000.com/?m=ex&op=maker&ac=use&api_v=1.0.0&api_from=webpc') {
          let info = JSON.parse(this.response)
          info.status = 100
          info.success = true
          info.msg = '兑换成功'
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl === '//my.3000.com/?m=game&op=index&ac=consumeLimitStatus&api_v=1.0.0&api_from=webpc') {
          let info = JSON.parse(this.response)
          info.data.limit_status = false
          info.status = 0
          info.success = true
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl.includes('//mapi.3000api.com/apis/soft/v1.0/game-getCharge.html')) {
          let info = JSON.parse(this.response)
          info.code = '100'
          info.result.charge = '1'
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (/^https:\/\/www\.3000\.com\/apis\/client\/game-shopPay\.html\?t=\d+$/.test(requestUrl)) {
          let info = JSON.parse(this.response)
          info.status = 100
          info.success = true
          info.data = { "real_price": parseInt(new URLSearchParams(this._sendArgs[0]).get('amount')) }
          parent.hasBuyN = 1
          parent.skipMHas = true
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl === '//pay.3000.com/?m=player&op=h5_purchase_market_count') {
          let info = JSON.parse(this.response)
          info.data.count = parent.hasBuyN
          info.status = 0
          info.success = true
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl === '//my.3000.com?m=YQ&op=player&ac=checkCode&api_v=1.0.0&api_from=webpc') {
          let info = JSON.parse(this.response)
          info.status = 100
          info.success = true
          info.msg = '使用成功！'
          this.response = this.responseText = JSON.stringify(info)
          return
        }
        if (requestUrl.includes(`//mapi.3000api.com/apis/soft/v1.0/game-info.html`)) {
          ajax_interceptor_qoweifjqon.info = JSON.parse(new TextDecoder("utf-8").decode(this.response)).result
          var script = document.createElement('script');
          script.src = "https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako.min.js"
          document.head.appendChild(script);
          getIDData().then(v => {
            if (v.sySL) {
              const customEvent2 = new CustomEvent("sySL", {
                detail: { value: JSON.parse(v.sySL) }
              });
              window.dispatchEvent(customEvent2);
            }
          })
          return
        }
        if (ajax_interceptor_qoweifjqon.info !== '' && requestUrl.includes(ajax_interceptor_qoweifjqon.info)) {
          if (!window.hasMPlayP) {
            let originPlayP = parent.playShopPay;
            parent.playShopPay = function () {
              let payI = JSON.parse(arguments[0]);
              parent.costM = payI.product_charge
              payI.product_charge = payI.product_charge_pc = payI.product_charge_app = 0;
              arguments[0] = JSON.stringify(payI);
              originPlayP.apply(this, arguments)
            };
            getIDData().then(v => {
              if (v.sySL) {
                const customEvent2 = new CustomEvent("sySL", {
                  detail: { value: JSON.parse(v.sySL) }
                });
                window.dispatchEvent(customEvent2);
              }
            })
            window.hasMPlayP = !window.hasMPlayP
          }
          try {
            let inflatedString = new TextDecoder("utf-8").decode(this.response);
            window.gameInfoSy = JSON.parse(inflatedString).result;
            if (typeof window.gameInfoSy.indexValues === 'string') {
              if (window.gameInfoSy.indexValues === '') {
                window.gameInfoSy.indexValues = []
              } else {
                window.gameInfoSy.indexValues = syDecyptVal(window.gameInfoSy.indexValues)
              }
            }
            if (typeof window.gameInfoSy.payValues === 'string') {
              if (window.gameInfoSy.payValues === '') {
                window.gameInfoSy.payValues = []
              } else {
                window.gameInfoSy.payValues = syDecyptVal(window.gameInfoSy.payValues)
              }
            }
            if (typeof window.gameInfoSy.savedValues === 'string') {
              if (window.gameInfoSy.savedValues === '') {
                window.gameInfoSy.savedValues = []
              } else {
                window.gameInfoSy.savedValues = syDecyptVal(window.gameInfoSy.savedValues)
              }
            }
            if (typeof window.gameInfoSy.stringValues === 'string') {
              if (window.gameInfoSy.stringValues === '') {
                window.gameInfoSy.stringValues = []
              } else {
                window.gameInfoSy.stringValues = syDecyptVal(window.gameInfoSy.stringValues)
              }
            }
            if (typeof window.gameInfoSy.systemValues === 'string') {
              if (window.gameInfoSy.systemValues === '') {
                window.gameInfoSy.systemValues = []
              } else {
                window.gameInfoSy.systemValues = syDecyptVal(window.gameInfoSy.systemValues)
              }
            }
            if (typeof window.gameInfoSy.values === 'string') {
              if (window.gameInfoSy.values === '') {
                window.gameInfoSy.values = []
              } else {
                window.gameInfoSy.values = syDecyptVal(window.gameInfoSy.values)
              }
            }
          } catch (e) {
            let firstA = fitst(new Uint8Array(new Uint8Array(this.response).subarray(23, new Uint8Array(this.response).length - 21)))
            let d = firstA[1];
            let secondA = new Uint8Array(new Uint8Array(new Uint8Array(this.response).subarray(23, new Uint8Array(this.response).length - 21)).subarray(d));
            let r = secondA; let h = firstA[0];
            for (let p = h.length; p--;) {
              let v1 = h[p];
              switch (v1[0]) {
                case 0:
                  //n = f(v);
                  break;
                case 1:
                  cll(v1, r);
                  break;
                case 2:
                  lll(v1, r);
              }
            };
            if (parent.pako && parent.pako.inflate) {
              let inflated = parent.pako.inflate(secondA);
              // 将解压后的数据转换为字符串（如果数据是文本）
              let inflatedString = new TextDecoder("utf-8").decode(inflated);
              window.gameInfoSy = JSON.parse(inflatedString);
              window.gameInfoSy.indexValues = syDecyptVal(window.gameInfoSy.indexValues)
              window.gameInfoSy.payValues = syDecyptVal(window.gameInfoSy.payValues)
              window.gameInfoSy.savedValues = syDecyptVal(window.gameInfoSy.savedValues)
              window.gameInfoSy.stringValues = syDecyptVal(window.gameInfoSy.stringValues)
              window.gameInfoSy.systemValues = syDecyptVal(window.gameInfoSy.systemValues)
              window.gameInfoSy.values = syDecyptVal(window.gameInfoSy.values)
            }
          }
          parent.gameInfoSy = window.gameInfoSy
          const syValues = [window.gameInfoSy.payValues, window.gameInfoSy.values, window.gameInfoSy.savedValues, window.gameInfoSy.stringValues, window.gameInfoSy.systemValues, window.gameInfoSy.indexValues]
          const customEvent2 = new CustomEvent("syValues", {
            detail: { value: syValues }
          });
          window.dispatchEvent(customEvent2);
          const customEvent3 = new CustomEvent("syUserAllowed", {
            detail: { value: [true, window.gameInfoSy.name, parent.ueGame.gameId] }
          });
          window.dispatchEvent(customEvent3);
          window.isSy = true
          if (!window.aaaffd) {
            window.syChapter = parent.syChapter = [];
            window.syChapterById = parent.syChapterById = {}
            window.gameInfoSy.chapters.forEach(getChapter);
            window.syUIName = parent.syUIName = []
            Object.values(window.gameInfoSy.viewMap).forEach(v => { if (v.type === 'container') { syUIName.push({ name: v.name, uuid: v.uuid }) } })
            const customEvent4 = new CustomEvent("syPlot", {
              detail: { value: [window.syChapter, syUIName] }
            });
            window.dispatchEvent(customEvent4);
            let h5window = parent
            //记录解密数值大小函数
            let ved = rFun(125)
            window.deV = h5window.deV = ved.a;
            window.enV = h5window.enV = ved.b
            ved = rFun(118)
            window.valueType = h5window.valueType = { pv: ved.f(), va: ved.k(), sa: ved.g(), st: ved.h(), sy: ved.i(), iv: ved.c() }
            //window.indexValuesMap = TU
            const processItems = (items) => {
              return items.reduce((result, item, index) => {
                const { uuid, id } = item;
                if (uuid !== undefined) {
                  result[uuid] = index;
                }
                if (id !== undefined) {
                  if (!result[id]) {
                    result[id] = [];
                  }
                  result[id].push(index);
                }
                if (!result[0]) {
                  result[0] = [];
                }
                result[0].push(index);
                return result;
              }, {});
            };
            const processObject = (obj) => {
              const keys = Object.keys(obj);
              const result = {};
              keys.forEach(key => {
                result[key] = processItems(obj[key]);
              });
              return result;
            };
            window.indexValuesMap = h5window.indexValuesMap = processObject({
              [window.valueType.pv]: window.gameInfoSy.payValues, [window.valueType.va]: window.gameInfoSy.values,
              [window.valueType.sa]: window.gameInfoSy.savedValues, [window.valueType.st]: window.gameInfoSy.stringValues,
              [window.valueType.sy]: window.gameInfoSy.systemValues, [window.valueType.iv]: window.gameInfoSy.indexValues
            })
            window.getValueIndex = h5window.getValueIndex = function (uuid) {
              let a = Object.keys(window.valueType)
              for (let i = 0; i < a.length; i++) {
                if (window.indexValuesMap[window.valueType[a[i]]][uuid] !== void 0) {
                  let type = ''
                  switch (a[i]) {
                    case 'pv':
                      type = "payValues"
                      break;
                    case 'va':
                      type = "values"
                      break;
                    case 'st':
                      type = "stringValues"
                      break
                    case 'sy':
                      type = "systemValues"
                      break
                    case 'sa':
                      type = "savedValues"
                      break
                    case 'iv':
                      type = "indexValues"
                      break
                  }
                  return [type, window.indexValuesMap[window.valueType[a[i]]][uuid], window.valueType[a[i]]]
                }
              }
              return null
            }
            ved = rFun(362)
            //全档数值传回解密函数Zi,ao
            window.deConstEnV = h5window.deConstEnV = ved.a;
            //全档上传数值加密解密
            window.enConV = h5window.enConV = ved.b;
            //修改上传的全档数值的加密
            window.enConV1 = h5window.enConV1 = rFun(148);
            window.enSign = h5window.enSign = rFun(445).hash;
            window.getVKey = h5window.getVKey = rFun(259).c;
            window.getSaKey = h5window.getSaKey = rFun(254).a;
            window.modifyValue = h5window.modifyValue = rFun(125).h//rFun(200).g;
            window.upSavePV = h5window.upSavePV = rFun(378).b
            window.getChapterCommand = h5window.getChapterCommand = rFun(255).a
            window.gameF = rFun(47)
            window.gamePCont = h5window.gamePCont = rFun(72)
            window.gameF.updatePlayContext = window.gameF.p//更新变量
            //window.gameF.viewContext = window.gameF.w//viewContext
            h5window.gameF = window.gameF
            window.getPCon = h5window.getPCon = function () { return window.gameF.i }
            window.uiShowV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
            window.uiCondV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
            window.UIName = new Set()
            window.condArray = new Set()
            let udh = parent.__cnuser.uid || ''
            window.lodjancjd = new Set([encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}${udh}`, 1)),
            encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}readrecord${udh}`, 1)),
            encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}payInfo${udh}`, 1)),
            `${parent.ueGame.gameUuid}savedValues${udh}`
            ])
            window.aaaffd = true
          }
          return
        }
      }
      if (/https:\/\/www\.66rpg\.com/.test(location.href) || /https:\/\/www\.66rpg\.com\/h5\/\d+/.test(location.href) || /https:\/\/m\.66rpg\.com\/h5\/\d+/.test(location.href)) {
        if (window.GAME_INFO_DATA && requestUrl === `/ajax/Game/get_game_flower_ranking.json?gindex=${GAME_INFO_DATA.gindex}&author_id=${GAME_INFO_DATA.author_uid}`) {
          window.maxFlower = JSON.parse(this.response).data.flower_ranking.length !== 0 ?
            JSON.parse(this.response).data.flower_ranking[0].save_flower : 10000
          return
        }
        if (requestUrl.includes('https://c.66rpg.com/collect/v1/index/getkey')) {
          window.timeKey = JSON.parse(this.response).data
          return
        }
        if (requestUrl.includes('https://c.66rpg.com/cloud/v4/index/cloud_load?')) {
          let info = JSON.parse(this.response)
          if (info.data && info.data.cloud_data) {
            window.cloudSaveOldShow = JSON.parse(info.data.cloud_data)
          }
        }
        if (requestUrl.includes('/ajax/game/check_passwd_unchecked.json?gindex=')) {
          let info = JSON.parse(this.response)
          location.href = `https://m.66rpg.com/h5/${info.data[0]}?ohp=v3&quality=32`
          return
        }
        if (window.userData && fileList) {
          if (fileList['game00.bin'] && requestUrl === fileList['game00.bin'].url()) {
            window.oldGameBin = new Uint8Array(this.response)
            return
          } else if (fileList['data/game.bin'] && requestUrl === fileList['data/game.bin'].url()) {
            window.getAllGameB = true
            window.oldGameBin = new Uint8Array(this.response)
            return
          }
        }
      }
      if (window.typeGame && requestUrl.includes('https://avg.163.com/avg-portal-api/dun/check/text/batch?csrf_token')) {
        let info = JSON.parse(this.response)
        info.data.action = 0
        this.response = this.responseText = JSON.stringify(info)
        return
      }
      if (window.typeGame && requestUrl.includes(`https://avg.163.com/avg-portal-api/game/${window.gameId}/user/setting`)) {
        let info = JSON.parse(this.response)
        info.data.latestResetTime ? info.data.latestResetTime = 0 : ''
        this.response = this.responseText = JSON.stringify(info)
        return
      }
      if (window.typeGame && /^https:\/\/avg\.163\.com\/avg-portal-api\/game\/\d+\/game-role\/guard\/v1/.test(requestUrl)) {
        let info = JSON.parse(this.response)
        let par = ajax_interceptor_qoweifjqon.getRequestParamsxxx(requestUrl)
        const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
        info.data.data = par.type === '1' ? '{"value":2}' : '{"value":1000}'
        info.data.s = CryptoJS['MD5'](info['data']['data'] + mckopdkso[info['data']['v']]).toString()
        this.response = this.responseText = JSON.stringify(info)
        return
      }
      const queryParams = ajax_interceptor_qoweifjqon.getRequestParamsxxx(requestUrl)
      const [requestPayload] = this._sendArgs
      const matchedInterface = this._matchedInterface
      if (matchedInterface && (matchedInterface.overrideTxt || matchedInterface.overrideResponseFunc)) {
        const { overrideTxt, overrideResponseFunc, match, isExpert = false } = matchedInterface
        let overrideResponse = undefined
        let overrideStatus = undefined
        let overrideStatusText = undefined
        if (overrideTxt && !isExpert) {
          // 普通模式，直接替换
          overrideResponse = overrideTxt
          // 状态用200覆盖
          if (ajax_interceptor_qoweifjqon.settings.ajaxInterceptor_always200On && this.status !== 200) {
            overrideStatus = 200
            overrideStatusText = 'OK'
          }
        } else if (overrideResponseFunc && isExpert) {
          // 专业模式，用函数替换
          const funcArgs = {
            method,
            payload: {
              queryParams,
              requestPayload
            },
            orgResponse: this.response,
            orgStatus: this.status,
            orgStatusText: this.statusText
          }
          const res = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overrideResponseFunc, funcArgs, 'response')
          // 返回是对象才处理
          if (typeof res === 'object' && res !== null) {
            const {
              response: newResponse = undefined,
              status: newStatus = undefined,
              statusText: newStatusText = undefined
            } = res
            overrideResponse = newResponse
            overrideStatus = newStatus
            overrideStatusText = newStatusText
          } else {
            console.error(`[Ajax Modifier] ExecuteFunctionError: Please check your return in the response function. See more details in the examples. \n`)
          }
        }
        // 没有返回不替换
        this.responseText = overrideResponse !== undefined ? overrideResponse : this.responseText
        this.response = overrideResponse !== undefined ? overrideResponse : this.response
        this.status = overrideStatus !== undefined ? overrideStatus : this.status
        this.statusText = overrideStatusText !== undefined ? overrideStatusText : this.statusText
        // if (!pageScriptEventDispatched) {
        //   window.dispatchEvent(new CustomEvent("pageScript", {
        //     detail: { url: this.responseURL, match }
        //   }))
        //   pageScriptEventDispatched = true
        // }
      }
    }

    const xhr = new ajax_interceptor_qoweifjqon.originalXHR
    if (/https:\/\/www\.66rpg\.com\/$/.test(location.href)) {
      Object.getOwnPropertyNames(xhr).forEach(attr => {
        if (attr === 'onreadystatechange') {
          xhr.onreadystatechange = (...args) => {
            if (this.readyState === 4) {
              // 请求成功
              xxx()
            }
            this.onreadystatechange && this.onreadystatechange.apply(this, args)
          }
          this.onreadystatechange = null
          return
        } else if (attr === 'onload') {
          xhr.onload = (...args) => {
            // 请求成功
            xxx()
            this.onload && this.onload.apply(this, args)
          }
          this.onload = null
          return
        } else if (attr === 'open') {
          this.open = (...args) => {
            this._openArgs = args
            const [method, requestUrl] = args
            this._matchedInterface = ajax_interceptor_qoweifjqon.getMatIn({
              thisRequestUrl: ajax_interceptor_qoweifjqon.getCompleteUrlxxx(requestUrl),
              thisMethod: method
            })
            const matchedInterface = this._matchedInterface
            // modify request
            if (matchedInterface) {
              const { overridePayloadFunc, isExpert = false } = matchedInterface
              if (overridePayloadFunc && isExpert && args[0] && args[1] && args[0].toUpperCase() === 'GET') {
                const queryParams = ajax_interceptor_qoweifjqon.getRequestParamsxxx(args[1])
                const data = {
                  requestUrl: args[1],
                  queryParams
                }
                args[1] = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overridePayloadFunc, data, 'payload')
              }
            }
            xhr.open && xhr.open.apply(xhr, args)
          }
          return
        } else if (attr === 'setRequestHeader') {
          this.setRequestHeader = (...args) => {
            // get headers
            this._headerArgs = this._headerArgs ? Object.assign(this._headerArgs, { [args[0]]: args[1] }) : { [args[0]]: args[1] };
            const matchedInterface = this._matchedInterface;
            if (!(matchedInterface && matchedInterface.overrideHeadersFunc && matchedInterface.isExpert)) { // 没有要拦截修改或添加的header
              xhr.setRequestHeader && xhr.setRequestHeader.apply(xhr, args);
            }
          }
          return;
        } else if (attr === 'send') {
          this.send = (...args) => {
            const matchedInterface = this._matchedInterface
            if (matchedInterface) {
              const { overrideHeadersFunc, overridePayloadFunc, isExpert = false, modifyRequestParams = undefined } = matchedInterface
              // modify not GET payload
              const [method] = this._openArgs
              if (overridePayloadFunc && isExpert && method !== 'GET') {
                args[0] = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overridePayloadFunc, args[0], 'payload');
                // 在这里根据修改后的payload修改POST请求的URL参数
                if (method === 'POST' && overridePayloadFunc && modifyRequestParams) {
                  // 使用修改后的payload来生成新的URL
                  const queryParams = ajax_interceptor_qoweifjqon.getRequestParamsxxx(this._openArgs[1])
                  const data = {
                    requestUrl: this._openArgs[1],
                    queryParams
                  }
                  const newUrl = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overridePayloadFunc, data, 'url');
                  // 重新打开XHR对象使用新的URL
                  xhr.open(method, newUrl, ...this._openArgs.slice(2));
                  // 重新设置请求头
                  if (this._headerArgs) {
                    for (const [key, value] of Object.entries(this._headerArgs)) {
                      xhr.setRequestHeader(key, value);
                    }
                  }
                }
              }
              // modify headers
              if (overrideHeadersFunc && isExpert) {
                const headers = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overrideHeadersFunc, this._headerArgs, 'headers')
                Object.keys(headers).forEach((key) => {
                  xhr.setRequestHeader && xhr.setRequestHeader.apply(xhr, [key, headers[key]]);
                })
              }
            }
            this._sendArgs = args
            xhr.send && xhr.send.apply(xhr, args)
          }
          return
        }

        if (typeof xhr[attr] === 'function') {
          this[attr] = xhr[attr].bind(xhr)
        } else {
          // responseText和response不是writeable的，但拦截时需要修改它，所以修改就存储在this[`_${attr}`]上
          if (['responseText', 'response', 'status', 'statusText'].includes(attr)) {
            Object.defineProperty(this, attr, {
              get: () => this[`_${attr}`] == undefined ? xhr[attr] : this[`_${attr}`],
              set: (val) => this[`_${attr}`] = val,
              enumerable: true
            })
          } else {
            Object.defineProperty(this, attr, {
              get: () => xhr[attr],
              set: (val) => xhr[attr] = val,
              enumerable: true
            })
          }
        }
      })
    } else {
      for (let attr in xhr) {
        if (attr === 'onreadystatechange') {
          xhr.onreadystatechange = (...args) => {
            if (this.readyState === 4) {
              // 请求成功
              xxx()
            }
            this.onreadystatechange && this.onreadystatechange.apply(this, args)
          }
          this.onreadystatechange = null
          continue
        } else if (attr === 'onload') {
          xhr.onload = (...args) => {
            // 请求成功
            xxx()
            if (/^https:\/\/avg\.163\.com\/avg-portal-api\/game\/\d+\/config\?reset=\d+&em=\d+$/.test(this._openArgs[1]) || /^https:\/\/avg\.163\.com\/avg-portal-api\/game\/\d+\/config\?gameID=\d+&em=\d+$/.test(this._openArgs[1])) {
              const aaa = JSON.parse(JSON.parse(this.responseText).data.data)
              window.ycyUIS = aaa.uis || {}
              if (window.typeGame === '2' && aaa.macros) {
                window.ycyMacros1 = {}
                aaa.macros.forEach(macro => {
                  let v = macro.cmdLines.match(/var ([\w\u4e00-\u9fa5]+)=/)
                  if (v) {
                    ycyMacros1[v[1]] = macro
                  } else {
                    ycyMacros1[macro.name] = macro
                  }
                })
              } else if (window.typeGame === '1') {
                window.ycyMacros1 = aaa.macros || {}
              }
              getAAA(aaa)
            }
            if (this._openArgs[1] === '//my.3000.com/index.php?m=pay_value&op=index&ac=PVInfo&api_v=1.0.0&api_from=webpc' && parent.hasBuyN === 1) {
              parent.hasBuyN = 0
            }
            this.onload && this.onload.apply(this, args)
          }
          this.onload = null
          continue
        } else if (attr === 'open') {
          this.open = (...args) => {
            this._openArgs = args
            const [method, requestUrl] = args
            this._matchedInterface = ajax_interceptor_qoweifjqon.getMatIn({
              thisRequestUrl: ajax_interceptor_qoweifjqon.getCompleteUrlxxx(requestUrl),
              thisMethod: method
            })
            const matchedInterface = this._matchedInterface
            // modify request
            if (matchedInterface) {
              if (window.incrd && window.incr) {
                const xmlR = args[1].split('?')[0]
                const saveDek = window.incrd.find(v => v[1] === xmlR)
                if (saveDek) {
                  if (xmlR.match(new RegExp('/https:\\/\\/www\\.66rpg\\.com\\/PropShop\\/engine\\/v5\\/user\\/getUserHaveAllPropNum$/'.slice(1, -1), 'ig')) && ajax_interceptor_qoweifjqon.getRequestParamsxxx(args[1]).shop_type === '1') {
                    const idex = window.incrd.findIndex(v => v[1] === xmlR && v[2])
                    if (idex === -1) {
                      window.incrd.push([window.incr, xmlR, 'TimeMall'])
                    } else {
                      window.incrd[idex][0] = window.incr;
                    }
                  } else {
                    const idex = window.incrd.findIndex(v => v[1] === xmlR)
                    window.incrd[idex][0] = window.incr;
                  }
                } else {
                  window.incrd.push([window.incr, xmlR])
                }
              }
              const { overridePayloadFunc, isExpert = false } = matchedInterface
              if (overridePayloadFunc && isExpert && args[0] && args[1] && args[0].toUpperCase() === 'GET') {
                const queryParams = ajax_interceptor_qoweifjqon.getRequestParamsxxx(args[1])
                const data = {
                  requestUrl: args[1],
                  queryParams
                }
                args[1] = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overridePayloadFunc, data, 'payload')
              }
            }
            xhr.open && xhr.open.apply(xhr, args)
          }
          continue
        } else if (attr === 'setRequestHeader') {
          this.setRequestHeader = (...args) => {
            // get headers
            this._headerArgs = this._headerArgs ? Object.assign(this._headerArgs, { [args[0]]: args[1] }) : { [args[0]]: args[1] };
            const matchedInterface = this._matchedInterface;
            if (!(matchedInterface && matchedInterface.overrideHeadersFunc && matchedInterface.isExpert)) { // 没有要拦截修改或添加的header
              xhr.setRequestHeader && xhr.setRequestHeader.apply(xhr, args);
            }
          }
          continue;
        } else if (attr === 'send') {
          this.send = (...args) => {
            if (/^https:\/\/avg\.163\.com\/avg-portal-api\/game\/\d+\/goods\/\d+\/paid\/count\/v1/.test(this._openArgs[1])) {
              window.getBuyCountP = this._openArgs[1].match(/goods\/(\d+)\/paid\/count/)[1]
            } else if (/^https:\/\/www\.3000\.com\/apis\/client\/game-shopPay\.html\?t=\d+$/.test(this._openArgs[1])) {
              let orgArgs = args[0]
              if (parent.costM !== undefined) {
                const urlParams = new URLSearchParams(orgArgs);
                urlParams.set('amount', parent.costM)
                const modifiedString = decodeURIComponent(urlParams.toString());
                args[0] = modifiedString;
              }
            } else if (this._openArgs[1] === '//my.3000.com/index.php?m=pay_value&op=index&ac=PVSave&api_v=1.0.0&api_from=webpc') {
              try {
                if (window.enConV1) {
                  if (!parent.syUP) {
                    let orgArgs = args[0]
                    const urlParams = new URLSearchParams();
                    const vk = orgArgs.split('&')
                    const oldClient = vk[0].replace('client=', '');
                    const oldContent = vk[1].replace('content=', '');
                    const oldFt = vk[2].replace('ft=', '');
                    const oldGid = vk[3].replace('gid=', '');
                    const oldPlsyerV = vk[4].replace('player_version=', '');
                    const oldProgress = vk[5].replace('progress=', '');
                    const oldTime = vk[7].replace('time=', '');
                    const currentClient = Object(window.enConV1.a)(decodeURIComponent(oldClient), 0);
                    let currentContent = Object(window.enConV1.a)(decodeURIComponent(oldContent), 0);
                    let currentFt = Object(window.enConV1.a)(decodeURIComponent(oldFt), 0);
                    const currentGid = Object(window.enConV1.a)(decodeURIComponent(oldGid), 0);
                    const currentPlsyerV = Object(window.enConV1.a)(decodeURIComponent(oldPlsyerV), 0);
                    const currentProgress = Object(window.enConV1.a)(decodeURIComponent(oldProgress), 0);
                    let currentTime = Object(window.enConV1.a)(decodeURIComponent(oldTime), 0);
                    const currentVKey = window.getSaKey()
                    const loValues = window.syFFeng ? window.beforeFFV : window.gameInfoSy.payValues
                    let deVN = []
                    loValues.forEach(v => {
                      deVN.push({ uuid: v.uuid, value: window.syFFeng ? v.value : v.init.value })
                    })
                    const newContent = window.enConV(btoa(JSON.stringify(deVN)))
                    currentContent = encodeURIComponent(Object(window.enConV1.b)(newContent, 0))
                    currentTime = String(Math.ceil(Date.now() / 1000))
                    let currentSign = `client=${currentClient}&content=${newContent}&ft=${currentFt}&gid=${currentGid}&player_version=${currentPlsyerV}&progress=${currentProgress}&time=${currentTime}&v_key=${currentVKey}`;
                    const newSign = encodeURIComponent(Object(window.enConV1.b)(window.enSign(window.enSign(currentSign)), 0))
                    const newTime = encodeURIComponent(Object(window.enConV1.b)(currentTime, 0))
                    urlParams.set('client', oldClient);
                    urlParams.set('content', currentContent);
                    urlParams.set('ft', oldFt);
                    urlParams.set('gid', oldGid);
                    urlParams.set('player_version', oldPlsyerV);
                    urlParams.set('progress', oldProgress);
                    urlParams.set('sign', newSign);
                    urlParams.set('time', newTime);
                    const modifiedString = decodeURIComponent(urlParams.toString());
                    args[0] = modifiedString;
                  }
                } else {
                  throw new Error("发生了一个错误");
                }
              } catch (e) {
                if (parent.syUP) {
                  alert('代码运行出错，请重新修改或者刷新页面后再次修改')
                } else {
                  alert('(1)代码更新\n(2)拦截代码执行出错，再次进入即可\n即将重启页面')
                  parent.location.reload()
                }
              }
            } else if (this._openArgs[1] === '//my.3000.com/?m=achievement&op=index&ac=addPVList&api_from=webpc&api_v=1.0.0') {
              try {
                if (window.enConV1 && window.enSign) {
                  const orgArgs = args[0]
                  const urlParams = new URLSearchParams();
                  const vk = orgArgs.split('&')
                  const oldContent = vk[0].split('=')[1]
                  const oldGid = vk[1].split('=')[1]
                  const oldProgress = vk[2].split('=')[1]
                  const oldTime = vk[4].split('=')[1]
                  let currentContent = Object(window.enConV1.a)(decodeURIComponent(oldContent), 0);
                  const currentGid = Object(window.enConV1.a)(decodeURIComponent(oldGid), 0);
                  const currentProgress = Object(window.enConV1.a)(decodeURIComponent(oldProgress), 0);
                  const currentTime = Object(window.enConV1.a)(decodeURIComponent(oldTime), 0);
                  const currentVKey = '0GjRAtUUoK4BwJGUz73jBa2M';
                  let deVN = []
                  window.gameInfoSy.payValues.forEach(v => {
                    deVN.push({ uuid: v.uuid, value: v.init.value })
                  })
                  const newContent = btoa(JSON.stringify(deVN))
                  currentContent = encodeURIComponent(Object(window.enConV1.b)(newContent, 0))
                  let currentSign = `content=${newContent}&gid=${currentGid}&progress=${currentProgress}&time=${currentTime}&v_key=${currentVKey}`;
                  const newSign = encodeURIComponent(Object(window.enConV1.b)(window.enSign(window.enSign(currentSign)), 0))
                  urlParams.set('content', currentContent);
                  urlParams.set('gid', oldGid);
                  urlParams.set('progress', oldProgress);
                  urlParams.set('sign', newSign);
                  urlParams.set('time', oldTime);
                  const modifiedString = decodeURIComponent(urlParams.toString());
                  args[0] = modifiedString;
                } else {
                  throw new Error("发生了一个错误");
                }
              } catch (e) {
                alert('(1)没输入开局代码！记得输入！！！！！\n(2)拦截代码执行出错，再次进入即可\n即将重启页面')
                parent.location.reload()
              }
            }
            const matchedInterface = this._matchedInterface
            if (matchedInterface) {
              const { overrideHeadersFunc, overridePayloadFunc, isExpert = false, modifyRequestParams = undefined } = matchedInterface
              // modify not GET payload
              const [method] = this._openArgs
              if (overridePayloadFunc && isExpert && method !== 'GET') {
                args[0] = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overridePayloadFunc, args[0], 'payload');
                // 在这里根据修改后的payload修改POST请求的URL参数
                if (method === 'POST' && overridePayloadFunc && modifyRequestParams) {
                  // 使用修改后的payload来生成新的URL
                  const queryParams = ajax_interceptor_qoweifjqon.getRequestParamsxxx(this._openArgs[1])
                  const data = {
                    requestUrl: this._openArgs[1],
                    queryParams
                  }
                  const newUrl = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overridePayloadFunc, data, 'url');
                  // 重新打开XHR对象使用新的URL
                  xhr.open(method, newUrl, ...this._openArgs.slice(2));
                  // 重新设置请求头
                  if (this._headerArgs) {
                    for (const [key, value] of Object.entries(this._headerArgs)) {
                      xhr.setRequestHeader(key, value);
                    }
                  }
                }
              }
              // modify headers
              if (overrideHeadersFunc && isExpert) {
                const headers = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overrideHeadersFunc, this._headerArgs, 'headers')
                Object.keys(headers).forEach((key) => {
                  xhr.setRequestHeader && xhr.setRequestHeader.apply(xhr, [key, headers[key]]);
                })
              }
            }
            this._sendArgs = args
            xhr.send && xhr.send.apply(xhr, args)
          }
          continue
        }

        if (typeof xhr[attr] === 'function') {
          this[attr] = xhr[attr].bind(xhr)
        } else {
          // responseText和response不是writeable的，但拦截时需要修改它，所以修改就存储在this[`_${attr}`]上
          if (['responseText', 'response', 'status', 'statusText'].includes(attr)) {
            Object.defineProperty(this, attr, {
              get: () => this[`_${attr}`] == undefined ? xhr[attr] : this[`_${attr}`],
              set: (val) => this[`_${attr}`] = val,
              enumerable: true
            })
          } else {
            Object.defineProperty(this, attr, {
              get: () => xhr[attr],
              set: (val) => xhr[attr] = val,
              enumerable: true
            })
          }
        }
      }
    }
  },
  originalFetch: window.fetch.bind(window),
  myFetch: function (...args) {
    const getOriginalResponse = async (stream) => {
      let text = '';
      const decoder = new TextDecoder('utf-8');
      const reader = stream.getReader();
      const processData = (result) => {
        if (result.done) {
          return text;
        }
        const value = result.value; // Uint8Array
        text += decoder.decode(value, { stream: true });
        // 读取下一个文件片段，重复处理步骤
        return reader.read().then(processData);
      };
      return await reader.read().then(processData);
    }
    const [requestUrl, data] = args;
    const matchedInterface = ajax_interceptor_qoweifjqon.getMatIn({
      thisRequestUrl: ajax_interceptor_qoweifjqon.getCompleteUrlxxx(requestUrl),
      thisMethod: data && data.method
    })
    if (matchedInterface && args) {
      const { overrideHeadersFunc, overridePayloadFunc, isExpert = false } = matchedInterface;
      if (overrideHeadersFunc && isExpert && args[1]) {
        const headers = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overrideHeadersFunc, this._headerArgs, 'headers')
        args[1].headers = headers
      }
      if (overridePayloadFunc && isExpert && args[0] && args[1]) {
        const { method } = args[1]
        if (['GET', 'HEAD'].includes(method.toUpperCase())) {
          const queryParams = ajax_interceptor_qoweifjqon.getRequestParamsxxx(args[0]);
          const data = {
            requestUrl: args[0],
            queryParams
          }
          args[0] = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overridePayloadFunc, data, 'payload');
        } else {
          data.body = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overridePayloadFunc, data.body, 'payload');
        }
      }
    }
    return ajax_interceptor_qoweifjqon.originalFetch(...args).then(async (response) => {
      if (matchedInterface && (matchedInterface.overrideTxt || matchedInterface.overrideResponseFunc)) {
        // window.dispatchEvent(new CustomEvent("pageScript", {
        //   detail: { url: response.url, match: matchedInterface.match }
        // }))
        let txt = undefined
        txt = matchedInterface.overrideTxt
        const { overrideTxt, overrideResponseFunc, isExpert = false } = matchedInterface
        let overrideResponse = undefined
        let overrideStatus = undefined
        let overrideStatusText = undefined

        if (overrideTxt && !isExpert) {
          // 普通模式，直接替换
          overrideResponse = overrideTxt
          // 状态用200覆盖
          if (ajax_interceptor_qoweifjqon.settings.ajaxInterceptor_always200On && this.status !== 200) {
            overrideStatus = 200
            overrideStatusText = 'OK'
          }
        } else if (overrideResponseFunc && isExpert) {
          // 专业模式，用函数替换
          const queryParams = ajax_interceptor_qoweifjqon.getRequestParamsxxx(requestUrl)
          const orgResponse = await getOriginalResponse(response.body);
          const funcArgs = {
            method: data?.method,
            payload: {
              queryParams,
              requestPayload: data?.body
            },
            orgResponse,
            orgStatus: response.status,
            orgStatusText: response.statusText
          }
          const res = ajax_interceptor_qoweifjqon.executeStringFunctionxxx(overrideResponseFunc, funcArgs, 'response')
          if (typeof res === 'object' && res !== null) {
            const {
              response: newResponse = undefined,
              status: newStatus = undefined,
              statusText: newStatusText = undefined
            } = res
            overrideResponse = newResponse
            overrideStatus = newStatus
            overrideStatusText = newStatusText
          } else {
            console.error(`[Ajax Modifier] ExecuteFunctionError: Please check your return in the response function. See more details in the examples. \n`)
          }
        }
        txt = overrideResponse !== undefined ? overrideResponse : response.responseText
        const stream = new ReadableStream({
          start(controller) {
            // const bufView = new Uint8Array(new ArrayBuffer(txt.length))
            // for (var i = 0 i < txt.length i++) {
            //   bufView[i] = txt.charCodeAt(i)
            // }
            controller.enqueue(new TextEncoder().encode(txt))
            controller.close()
          }
        })
        let params = {
          status: overrideStatus !== undefined ? overrideStatus : response.status,
          statusText: overrideStatusText !== undefined ? overrideStatusText : response.statusText,
        }
        const newResponse = new Response(stream, {
          headers: response.headers,
          ...params
        })
        const proxy = new Proxy(newResponse, {
          get: function (target, name) {
            switch (name) {
              case 'redirected':
              case 'type':
              case 'url':
              case 'useFinalURL':
              case 'body':
              case 'bodyUsed':
                return response[name]
            }
            return target[name]
          }
        })
        for (let key in proxy) {
          if (typeof proxy[key] === 'function') {
            proxy[key] = proxy[key].bind(newResponse)
          }
        }
        return proxy
      } else {
        return response
      }
    })
  },
}
if (/^https:\/\/www\.3000\.com\/work\/\d+\.html$/.test(location.href) || /^https:\/\/www\.3000\.com\/h5\/player\/index\.html/.test(location.href) || /^https:\/\/wap\.3000\.com\/\?m=detail&op=index&ac=index&id=\d+/.test(location.href)) {
  var script = document.createElement('script');
  script.src = "https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako.min.js";
  document.head.appendChild(script);
}
if (/^https:\/\/www\.3000\.com\/work\/\d+\.html$/.test(location.href)) {
  let animationFrameId;
  function checkH5Iframe() {
    const h5iframe = document.getElementById('h5video')
    if (h5iframe && /^https:\/\/www\.3000\.com\/h5\/player\/index\.html/.test(h5iframe.src) && h5iframe.contentDocument.URL !== 'about:blank' && h5iframe.contentDocument.body !== null) {
      const h5Window = h5iframe.contentWindow
      modifyLocalStorage('sy', h5Window)
      const OriginalBlob = h5iframe.contentWindow.Blob;
      let aaff = false
      h5iframe.contentWindow.Blob = function (blobParts, options) {
        if (Array.isArray(blobParts) && typeof blobParts[0] === 'string') {
          if (blobParts[0].includes("(function(){var n=this,t=n[n.a()],r=n.c,e=n.d;function i(n,t,i){var u={};u[")) {
            blobParts[0] = ''
            document.getElementById('h5video').contentWindow.Blob = OriginalBlob
          }
        }
        document.getElementById('h5video').contentWindow.document.querySelector('body > iframe').contentWindow.XMLHttpRequest = ajax_interceptor_qoweifjqon.myXHR
        if (!aaff) {
          aaff = true
          const oriB = document.getElementById('h5video').contentWindow.document.querySelector('body > iframe').contentWindow.Blob
          document.getElementById('h5video').contentWindow.document.querySelector('body > iframe').contentWindow.Blob = function (blobParts, options) {
            if (Array.isArray(blobParts) && typeof blobParts[0] === 'string') {
              if (blobParts[0].includes(`setInterval("setTimeout('if(new Date().getTime()`) &&
                blobParts[0].includes('debugger;clearTimeout')) {
                blobParts[0] = ''
              }
              if (blobParts[0].includes('setInterval(function(){var __=this;')) {
                blobParts[0] = ''
                document.getElementById('h5video').contentWindow.document.querySelector('body > iframe').contentWindow.Blob = oriB
              }
              if (blobParts[0].includes('setInterval(function(){console.clear()')) {
                blobParts[0] = ''
              }
            }
            // 调用原始的 Blob 构造函数
            return new oriB(blobParts, options);
          }
          // 让原生 Blob 的 prototype 继续工作
          document.getElementById('h5video').contentWindow.document.querySelector('body > iframe').contentWindow.Blob.prototype = oriB.prototype;
        }
        // 调用原始的 Blob 构造函数
        return new OriginalBlob(blobParts, options);
      }
      h5iframe.contentWindow.Blob.prototype = OriginalBlob.prototype;
      const originalEval = h5Window.eval;
      let b = false;
      const originalToString = h5Window.Function.toString
      const moM = h5Window.eval = new Proxy(originalEval, {
        apply(target, thisArg, arguments) {
          if (arguments && arguments[0] && typeof arguments[0] === 'string' && (arguments[0].startsWith('(function(n,t,r){') || arguments[0].startsWith('(function(n,t){'))) {
            if (!b) {
              b = true
              arguments[0] = '(function(n,t,r){parent.rFun=window.rFun=r;' + arguments[0].slice('(function(n,t,r){'.length)
            }
            if (arguments[0].includes('(0,e[9].a)()&&(0,e[7].k)(i)')) {
              arguments[0] = arguments[0].replace('(0,e[9].b)()&&(0,e[7].k)(i),(0,e[9].a)()&&(0,e[7].k)(i),(0,e[7].k)([])', '(0,e[7].k)([])')
            } else if (arguments[0].includes('var t=[e[22].q,e[51].l,e[24].f,')) {
              //vu、kn.all、kn.any、kn.contain、kn.nin
              arguments[0] = arguments[0].replace('var t=[e[22].q,e[51].l,e[24].f,', 'window.arrayDeV=f;\nvar t=[e[22].q,e[51].l,e[24].f,')
                .replace('return f(t,n[r[14]]||[],0)', "let cond = n\n    if (window.getSelfT) {\n      let a = getCondT(cond)\n      a ? window.condArray.add(a) : ''\n      if (window.getSelfTM) {\n        return Promise.resolve(false)\n      }\n    } else if (window.freeReedm) {\n      const noE = JSON.stringify(cond)\n      const ide = window.pAix.findIndex(v => v === noE)\n      if (ide !== -1) {\n        window.pAix.splice(ide, 1)\n        if (window.pAix.length === 0) {\n          window.freeReedm = false\n        }\n        let a = getCondT(cond)\n        a ? window.condArray.add(a) : ''\n        return Promise.resolve(true)\n      }\n    }\nreturn f(t,n[r[14]]||[],0)")
                .replace('return c(t,n[r[14]]||[],0)', "let cond = n\n    if (window.getSelfT) {\n      let a = getCondT(cond)\n      a ? window.condArray.add(a) : ''\n      if (window.getSelfTM) {\n        return Promise.resolve(false)\n      }\n    } else if (window.freeReedm) {\n      const noE = JSON.stringify(cond)\n      const ide = window.pAix.findIndex(v => v === noE)\n      if (ide !== -1) {\n        window.pAix.splice(ide, 1)\n        if (window.pAix.length === 0) {\n          window.freeReedm = false\n        }\n        let a = getCondT(cond)\n        a ? window.condArray.add(a) : ''\n        return Promise.resolve(true)\n      }\n    }\nreturn c(t,n[r[14]]||[],0)")
                .replace('r[50],(function(n,t){return(0,e[13].c)', "r[50],(function(n,t){let cond = n\n    if (window.getSelfT) {\n      let a = getContainC(cond)\n      a ? window.condArray.add(a) : ''\n      if (window.getSelfTM) {\n        return Promise.resolve(false)\n      }\n    } else if (window.freeReedm) {\n      const noE = JSON.stringify(cond)\n      const ide = window.pAix.findIndex(v => v === noE)\n      if (ide !== -1) {\n        window.pAix.splice(ide, 1)\n        if (window.pAix.length === 0) {\n          window.freeReedm = false\n        }\n        let a = getContainC(cond)\n        a ? window.condArray.add(a) : ''\n        return Promise.resolve(true)\n      }\n    }\nreturn(0,e[13].c)")
                .replace('r[52],(function(n,t){return(0,e[13].c)', "r[52],(function(n,t){let cond = n\n    if (window.getSelfT) {\n      let a = getContainC(cond)\n      a ? window.condArray.add(a) : ''\n      if (window.getSelfTM) {\n        return Promise.resolve(false)\n      }\n    } else if (window.freeReedm) {\n      const noE = JSON.stringify(cond)\n      const ide = window.pAix.findIndex(v => v === noE)\n      if (ide !== -1) {\n        window.pAix.splice(ide, 1)\n        if (window.pAix.length === 0) {\n          window.freeReedm = false\n        }\n        let a = getContainC(cond)\n        a ? window.condArray.add(a) : ''\n        return Promise.resolve(true)\n      }\n    }\nreturn(0,e[13].c)")
            } else if (arguments[0].includes('var f=(r=_(r))[e[29].p]')) {
              //Up.runEventInView、lp
              arguments[0] = arguments[0].replace('var f=(r=_(r))[e[29].p]', `function getUIPath(uiAll, path) {\n        if (path && 2 === path.length) {\n            var r = getUIPath(uiAll, path[1]);\n            return void 0 !== r && r.hasOwnProperty(path[0]) ? r[path[0]] : void 0\n        }\n        return uiAll\n    }\n    if (window.freeReedm) {\n        window.pAix = []\n        let ui = getUIPath(r[rFun(82).p], t)\n        if (ui) {\n            if (ui.events && ui.events.length !== 0) {\n                ui.events.forEach(v => { if (v.expression.type !== "literal") { window.pAix.push(JSON.stringify(v.expression)) } })\n            }\n            if (ui.view && ui.view.events && ui.view.events.length !== 0) {\n                ui.view.events.forEach(v => { if (v.expression.type !== "literal") { window.pAix.push(JSON.stringify(v.expression)) } })\n            }\n        }\n    }\nvar f=(r=_(r))[e[29].p]`)
                .replace('n[e[29].i]', 'false')
            } else if (arguments[0].includes('var r=e[1]()(n,4),o=r[0]')) {
              //jp.callUI、jp.pay、jp.share、wh
              arguments[0] = arguments[0].replace('var r=e[1]()(n,4),o=r[0]', "if (window.syGetUIV) {\n      if (!(n[1][0].handle.type && n[1][0].handle.type === 'system')) {\n        const a = gameInfoSy.viewMap[n[1][0].handle.uuid];\n        if (a && !window.UIName.has(a.uuid)) {\n          window.UIName.add(a.uuid)\n          getStyleS(a)\n        }\n      }\n    }\nvar r=e[1]()(n,4),o=r[0]")
                .replace('t[130],(function(n){var o=e[1]()(n,3)', 't[130],(async function(n){async function waitMV() {\n        if (n) {\n            let payE = n[1].find(v=>v.type==="pay").handle.values;\n            window.valo = parent.getPCon();\n            return parent.modifyValue(parent.getPCon(), payE, true)\n                .then(result => {\n                    return parent.gameF.updatePlayContext(result);\n                })\n                .then(() => {\n                    if (window.isNotLogin) { replaceV(); }\n                    n[0][rFun(82).k] = parent.getPCon();\n                })\n        }\n    }\n    await waitMV();\nvar o=e[1]()(n,3)')
                .replace('o=u[0],c=u[1][u[2]][t[2]];', 'o=u[0],c=u[1][u[2]][t[2]];if(c.values){parent.modifyValue(parent.getPCon(), c.values)\n                .then(result => {\n                    parent.gameF.updatePlayContext(result);\n                })}')
                .replace('c=o[e[42].j]', 'c=true')
              document.getElementById('h5video').contentWindow.eval = originalEval
            } else if (arguments[0].includes('var o=(0,e[7].b)')) {
              arguments[0] = arguments[0].replace('var o=(0,e[7].b)', 'function o(){}\nvar mm=(0,e[7].b)')
            } else if (arguments[0].includes('p(n,t,r,i,!1,o)')) {
              arguments[0] = arguments[0].replace('p(n,t,r,i,!1,o)', 'o=true,u=void 0,p(n,t,r,i,!1,o)')
            } else if (arguments[0].includes('var y=function(n,r){var i=(0,')) {
              arguments[0] = arguments[0].replace('var y=function(n,r){var i=(0,', 'var y=function(){},mkn=function(n,r){var i=(0,')
            } else if (arguments[0].includes('[r(34),r(12),r(10),')) {
              arguments[0] = arguments[0].replace('r.d(t,"f",(function(){return A}))', 'r.d(t,"f",(function(){return window.XMLHttpRequest}))')
            } else if (arguments[0].includes('!function(n,t,r,i,u,a,f,s,d){')) {
              arguments[0] = arguments[0].replace('!function(n,t,r,i,u,a,f,s,d){', 'window.getDisPlayImage=function(n,t,r,i,u,a,f,s,d){')
                .replace('}(n,t[r],t[e[23].e],n[e[124].g],g,n[e[83].c],n[e[56].g],u,!!n[e[87].c])', '};window.getDisPlayImage(n,t[r],t[e[23].e],n[e[124].g],g,n[e[83].c],n[e[56].g],u,!!n[e[87].c])')
            }
          }
          return Reflect.apply(target, h5Window, arguments);
        },
        get(target, prop, receiver) {
          if (prop === 'toString') {
            return function () {
              if (this === moM) {
                return 'function eval() { [native code] }';
              }
              return originalToString.call(this);
            };
          }
          return Reflect.get(target, prop, receiver);
        }
      });
      cancelAnimationFrame(animationFrameId);
    } else {
      animationFrameId = requestAnimationFrame(checkH5Iframe);
    }
  }
  animationFrameId = requestAnimationFrame(checkH5Iframe);
}

function encryptSy(text, shift) {
  return ft(text, 1, shift); // 使用非1的e值进行加密
}
function decryptSy(encryptedText, shift) {
  return ft(encryptedText, 0, shift); // 使用e值为1进行解密
}
function ft(t, e, n) {
  var r = ht(Math.min(t.length, 500)),
    i = t.split("");
  r.forEach(function (t) {
    var r = i[t].charCodeAt();
    i.splice(t, 1, String.fromCharCode(1 === e ? r - n : r + n));
  });
  return i.join("");
}
function ht(t) {
  for (var e = [], n = 2; n < t; n++) {
    for (var r = true, i = 2; i < n; i++)
      if (n % i == 0) {
        r = false;
        break;
      }
    r && e.push(n);
  }
  return e;
};
function isJSON(str) {
  try {
    JSON.parse(str);
    return true;
  } catch (e) {
    return false;
  }
}
function replaceV() {
  const oleValue = window.getPCon();
  let newV;
  if (!window.valueType) {
    Object.keys(oleValue).forEach(v => {
      if (oleValue[v].length === window.gameInfoSy.payValues.length && oleValue[v].length !== 0 && window.gameInfoSy.payValues.length !== 0 && oleValue[v][oleValue[v].length - 1].uuid === window.gameInfoSy.payValues[window.gameInfoSy.payValues.length - 1].uuid) {
        newV = oleValue[v]
      }
    })
  } else {
    newV = oleValue[window.valueType.pv]
  }
  let valueNew = [];
  newV.forEach(v => {
    v = window.deV(v);
    valueNew.push({ uuid: v.uuid, value: v.value })
  })
  valueNew.push({ version: Object(window.enConV1.b)(String(3), 3), visitor: true });
  let encoder = new TextEncoder();
  let originalData = encoder.encode(JSON.stringify(valueNew));
  // 使用pako.deflate进行压缩
  let compressedData = parent.pako.deflate(originalData);
  let akj = String.fromCharCode.apply(null, compressedData);
  let originalText = btoa(akj);
  let shift = 3; // 定义一个偏移量
  // jia密
  let encryptedText = encryptSy(originalText, shift);
  const key = encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}payInfo`, 1));
  localStorage.setItem(key, JSON.stringify({ data: encryptedText }));
}

window.addEventListener("message", function (event) {
  if (typeof event.data === 'string' && isJSON(event.data)) {
    const data = JSON.parse(event.data)
    if (data.type === 'ajaxInterceptor' && data.to === 'pageScript') {
      ajax_interceptor_qoweifjqon.settings[data.key] = data.value
      if (ajax_interceptor_qoweifjqon.settings.ajaxInterceptor_switchOn) {
        window.XMLHttpRequest = ajax_interceptor_qoweifjqon.myXHR
        window.fetch = ajax_interceptor_qoweifjqon.myFetch
      } else {
        window.XMLHttpRequest = ajax_interceptor_qoweifjqon.originalXHR
        window.fetch = ajax_interceptor_qoweifjqon.originalFetch
      }
    }
  }
}, false)

if (/https:\/\/avg\.163\.com\/enginejs/.test(location.href) || /https:\/\/avg\.163\.com\/engine/.test(location.href)) {
  const intervalId2 = setInterval(() => {
    if (window.isPcOrA) {
      types.incVal = new Set()
      types.incValST = new Set()
      types.incStr = new Set()
      types.uiv = new Set()
      types.assignment = new Set()
      types.gjkdjf = false
      types.roleNameR = {}
      types.roleNameS = new RegExp(Object.keys(types.roleNameR).join('|'), 'g')
      function getAllScenes(chapters, parentName = '') {
        chapters.forEach(chapter => {
          const currentName = parentName ? `${parentName}/${chapter.name}` : chapter.name;
          if (chapter.scenes) {
            chapter.scenes.forEach(scene => {
              window.scenesSend.push({ nameNew: `${currentName}/${scene.name}`, name: scene.name, id: scene.id });
              window.scenesById[scene.id] = { nameNew: `${currentName}/${scene.name}`, name: scene.name, id: scene.id }
            });
          }
          if (chapter.sections) {
            getAllScenes(chapter.sections, currentName);
          }
        });
      }
      if (window.typeGame === '2') {
        // 保存原始的 appendChild 方法的引用
        let originalAppendChild = document.body.appendChild;

        // 创建一个代理函数
        document.body.appendChild = function (newNode) {
          // 判断要添加的节点是否具有 id，且 id 为全数字
          if (newNode.id && /^\d+$/.test(newNode.id) && !types.getA) {
            //window.acA=window.innerAc    //在此获取定义的ac，留着备用
            // 获取要添加的节点的 innerHTML 属性
            var innerHTML = newNode.innerHTML;
            types.isNotRes = true
            window.orWrap = regeneratorRuntime.wrap;
            const script2 = document.createElement('script');
            script2.src = 'https://cdnjs.cloudflare.com/ajax/libs/acorn/8.8.0/acorn.min.js';
            document.body.appendChild(script2);
            window.orWrapN = function (_0xf468f6, _0x42d7b5, _0x3748b2, _0x553d8e) {
              const ast = acorn.parse(_0xf468f6.toString(), { ecmaVersion: 2020 });
              const conditions = [];
              const comparisonOperators = new Set(['===', '!==', '==', '!=', '>', '<', '>=', '<=', '&&', '||']);
              // 递归函数提取判断条件
              let extractConditions = function (node) {
                if (node.type === 'IfStatement' || node.type === 'ConditionalExpression') {
                  conditions.push(node.test);
                  return
                } else if ((node.type === 'BinaryExpression' && comparisonOperators.has(node.operator)) ||
                  (node.type === 'LogicalExpression' && (node.operator === '&&' || node.operator === '||')) ||
                  (node.type === 'UnaryExpression' && !node.argument.type === 'Literal' && (node.operator === '!' || node.operator === '-'))
                ) {
                  conditions.push(node);
                  return
                }

                for (const key in node) {
                  if (node[key] && typeof node[key] === 'object') {
                    extractConditions(node[key]);
                  }
                }
              };
              let expressionToString = function (node) {
                switch (node.type) {
                  case 'BinaryExpression':
                    return `${expressionToString(node.left)} ${node.operator} ${expressionToString(node.right)}`;
                  case 'LogicalExpression':
                    return `${expressionToString(node.left)} ${node.operator} ${expressionToString(node.right)}`;
                  case 'UnaryExpression':
                    return `${node.operator}(${expressionToString(node.argument)})`;
                  case 'Identifier':
                    return node.name;
                  case 'Literal':
                    return node.value;
                  case 'MemberExpression':
                    const property = node.computed ?
                      `[${expressionToString(node.property)}]` :
                      `.${node.property.name}`;
                    return `${expressionToString(node.object)}${property}`;
                  case 'CallExpression':
                    return `${expressionToString(node.callee)}(${node.arguments.map(expressionToString).join(', ')})`;
                  case 'ArrayExpression':
                    return `[${node.elements.map(expressionToString).join(', ')}]`;
                  case 'ObjectExpression':
                    return `{ ${node.properties.map(prop => `${expressionToString(prop.key)}: ${expressionToString(prop.value)}`).join(', ')} }`;
                  case 'ConditionalExpression':
                    return `${expressionToString(node.test)} ? ${expressionToString(node.consequent)} : ${expressionToString(node.alternate)}`;
                  case 'SequenceExpression':
                    const validExpressions = node.expressions.filter(expr => {
                      return (
                        expr.type === 'BinaryExpression' ||
                        expr.type === 'LogicalExpression' ||
                        (expr.type === 'UnaryExpression' && !(expr.argument.type === 'Literal' /*&& (expr.argument.value === 0 || expr.argument.value === 1)*/))
                      );
                    });
                    return validExpressions.length > 0 ? validExpressions.map(expressionToString).join(', ') : '';
                  default:
                    return '';
                }
              }
              extractConditions(ast);
              conditions.map(expressionToString).filter(condition => condition.trim() !== '').forEach(condition => {
                window.ifConditions.add(condition);
              });
              return window.orWrap.call(this, _0xf468f6, _0x42d7b5, _0x3748b2, _0x553d8e)
            }
            types.replaceNumbersWithZero = (jsonStr) => {
              // 解析 JSON 字符串
              const obj = JSON.parse(jsonStr);
              // 递归替换数字和处理嵌套 JSON 字符串
              const replaceNumbers = (data) => {
                if (Array.isArray(data)) {
                  return data.map(item => {
                    if (typeof item === 'string' && isValidNonEmptyJson(item)) {
                      return replaceNumbersWithZero(item);
                    } else {
                      return replaceNumbers(item);
                    }
                  });
                } else if (typeof data === 'object' && data !== null) {
                  return Object.keys(data).reduce((acc, key) => {
                    const value = data[key];
                    if (typeof value === 'string' && isValidNonEmptyJson(value)) {
                      // 递归处理嵌套 JSON 字符串
                      acc[key] = replaceNumbersWithZero(value);
                    } else {
                      acc[key] = replaceNumbers(value);
                    }
                    return acc;
                  }, {});
                } else if (typeof data === 'number') {
                  return 0;
                } else {
                  return data;
                }
              };
              const newObj = replaceNumbers(obj);
              // 转换回 JSON 字符串
              return JSON.stringify(newObj);
            };

            // 修改 innerHTML 属性
            // 这里示例将所有的文本节点替换为 "Modified"
            innerHTML = innerHTML.replace('DRAG_DIRECTION_TYPES: (function(ac) {\n            return ac.DRAG_DIRECTION_TYPES;\n          })(innerAc)', 'DRAG_DIRECTION_TYPES: (function(ac) {\n            if((types.acA===undefined || types.acA.var===undefined) && !types.getA){\n              types.acA=ac;types.getA=true\n            }\n            return ac.DRAG_DIRECTION_TYPES;\n          })(innerAc)')
            // 将修改后的 innerHTML 属性重新赋值给节点
            newNode.innerHTML = innerHTML;
          }
          newNode.innerHTML = newNode.innerHTML.replace('var cc = null;', 'types.acP = ac;\n    var cc = null;')
          newNode.innerHTML = newNode.innerHTML.replace('return ac.var;', 'let originalVar = ac.var;\n    return new Proxy(originalVar, {\n        get: function (target, prop, receiver) {\n            const oldV = Reflect.get(target, prop, receiver);\n            if (oldV !== undefined && (types.isLOgic || types.isSelfT || types.isGetUIV)) {\n                if (types.isLOgic && typeof oldV === "number") {\n                    types.incVal.add(prop)\n                    return 1;\n                } else if (types.isSelfT && typeof oldV === "number") {\n                    types.incValST.add(prop)\n                    return ycyValues[prop].initValue !== undefined ? ycyValues[prop].initValue : 0;\n                } else if (types.isGetUIV && typeof oldV === "number") {\n                    types.uiv.add(prop)\n                    return oldV;\n                } else {\n                    types.incStr.add(prop)\n                    if (types.isSelfT && isValidNonEmptyJson(oldV)) {\n                        return types.replaceNumbersWithZero(oldV)\n                    }\n                    return oldV;\n                }\n            } else {\n                return oldV\n            }\n        },\n        set: function (target, prop, value, receiver) {\n            if (types.isLOgic || types.isSelfT || types.isGetUIV) {\n                types.assignment.add(`ac.var.${prop}=${JSON.stringify(value)}`)\n            }\n            return Reflect.set(target, prop, value, receiver);\n        }\n    })')
          newNode.innerHTML = newNode.innerHTML.replace('return ac.cVar;', 'let originalcVar = ac.cVar;\n    return new Proxy(originalcVar, {\n        get: function (target, prop, receiver) {\n            const oldV = Reflect.get(target, prop, receiver);\n            if (oldV !== undefined && (types.isLOgic || types.isSelfT || types.isGetUIV)) {\n                if (types.isLOgic && typeof oldV === "number") {\n                    types.incVal.add(prop)\n                    return 1;\n                } else if (types.isSelfT && typeof oldV === "number") {\n                    types.incValST.add(prop)\n                    return ycyValues[prop].initValue !== undefined ? ycyValues[prop].initValue : 0;\n                } else if (types.isGetUIV && typeof oldV === "number") {\n                    types.uiv.add(prop)\n                    return oldV;\n                } else {\n                    types.incStr.add(prop)\n                    if (types.isSelfT && isValidNonEmptyJson(oldV)) {\n                        return types.replaceNumbersWithZero(oldV)\n                    }\n                    return oldV;\n                }\n            } else {\n                return oldV\n            }\n        },\n        set: function (target, prop, value, receiver) {\n            if (types.isLOgic || types.isSelfT || types.isGetUIV) {\n                types.assignment.add(`ac.cVar.${prop}=${JSON.stringify(value)}`)\n            }\n            return Reflect.set(target, prop, value, receiver);\n        }\n    })')
          newNode.innerHTML = newNode.innerHTML.replace('return ac.arr;', 'let originalArr = ac.arr;\n    return new Proxy(originalArr, {\n        get: function (target, prop, receiver) {\n            const oldArr = Reflect.get(target, prop, receiver)\n            if (oldArr !== undefined && (types.isLOgic || types.isSelfT || types.isGetUIV)) {\n                return new Proxy(oldArr, {\n                    get: (arrTarget, arrProperty) => {\n                        const oldV = Reflect.get(arrTarget, arrProperty);\n                        if (types.isLOgic && typeof oldV === "number") {\n                            types.incVal.add(`${prop}[${arrProperty}]`)\n                            return 1;\n                        } else if (types.isSelfT && typeof oldV === "number") {\n                            types.incValST.add(`${prop}[${arrProperty}]`)\n                            return ycyArrays[prop]["arrayValues"][arrProperty].initValue !== undefined ? ycyArrays[prop]["arrayValues"][arrProperty].initValue : 0;\n                        } else if (types.isGetUIV && typeof oldV === "number") {\n                            types.uiv.add(`${prop}[${arrProperty}]`)\n                            return oldV;\n                        } else {\n                            types.incStr.add(`${prop}[${arrProperty}]`)\n                            if (types.isSelfT && isValidNonEmptyJson(oldV)) {\n                                return types.replaceNumbersWithZero(oldV)\n                            }\n                            return oldV;\n                        }\n                    }\n                    ,\n                    set: function (arrTarget, arrProperty, arrValue) {\n                        if (types.isLOgic || types.isSelfT || types.isGetUIV) {\n                            types.assignment.add(`ac.arr.${prop}[${arrProperty}]=${JSON.stringify(arrValue)}`)\n                        }\n                        return Reflect.set(arrTarget, arrProperty, arrValue)\n                    }\n                });\n            } else {\n                return oldArr;\n            }\n        },\n        set: function (target, prop, value, receiver) {\n            return Reflect.set(target, prop, value, receiver);\n        }\n    })')
          newNode.innerHTML = newNode.innerHTML.replace('return ac.cArr;', 'let originalcArr = ac.cArr;\n    return new Proxy(originalcArr, {\n        get: function (target, prop, receiver) {\n            const oldcArr = Reflect.get(target, prop, receiver)\n            if (oldcArr !== undefined && (types.isLOgic || types.isSelfT || types.isGetUIV)) {\n                return new Proxy(oldcArr, {\n                    get: (cArrTarget, cArrProperty) => {\n                        const oldV = Reflect.get(cArrTarget, cArrProperty);\n                        if (types.isLOgic && typeof oldV === "number") {\n                            types.incVal.add(`${prop}[${cArrProperty}]`)\n                            return 1;\n                        } else if (types.isSelfT && typeof oldV === "number") {\n                            types.incValST.add(`${prop}[${cArrProperty}]`)\n                            return ycyArrays[prop]["arrayValues"][cArrProperty].initValue !== undefined ? ycyArrays[prop]["arrayValues"][cArrProperty].initValue : 0;\n                        } else if (types.isGetUIV && typeof oldV === "number") {\n                            types.uiv.add(`${prop}[${cArrProperty}]`)\n                            return oldV;\n                        } else {\n                            types.incStr.add(`${prop}[${cArrProperty}]`)\n                            if (types.isSelfT && isValidNonEmptyJson(oldV)) {\n                                return types.replaceNumbersWithZero(oldV)\n                            }\n                            return oldV;\n                        }\n                    }\n                    ,\n                    set: function (cArrTarget, cArrProperty, cArrValue) {\n                        if (types.isLOgic || types.isSelfT || types.isGetUIV) {\n                            types.assignment.add(`ac.arr.${prop}[${cArrProperty}]=${JSON.stringify(cArrValue)}`)\n                        }\n                        return Reflect.set(cArrTarget, cArrProperty, cArrValue)\n                    }\n                });\n            } else {\n                return oldcArr;\n            }\n        },\n        set: function (target, prop, value, receiver) {\n            return Reflect.set(target, prop, value, receiver);\n        }\n    })')
          newNode.innerHTML = newNode.innerHTML.replace('return ac.restart(convertAttrs);', 'return types.isNotRes ? true : ac.restart(convertAttrs);')
            .replace('sysDialogOn: (function(ac) {\n            return function() {', 'sysDialogOn: (function(ac) {\n            return function() {\nif (types.gjkdjf) {\n    let na = arguments[0].roleName, ns = arguments[0].content\n    if (types.roleNameR[na]) {\n        arguments[0].roleName = types.roleNameR[na]\n    }\n    if (ns.trim() !== "") {\n        if (types.roleNameS.test(ns)) {\n            arguments[0].content = ns.replace(types.roleNameS, match => types.roleNameR[match])\n        }\n    }\n}')
            .replace('dialogOn: (function(ac) {\n            return function() {', 'dialogOn: (function(ac) {\n            return function() {\nif (types.gjkdjf) {\n    let na = arguments[0].roleName, ns = arguments[0].content\n    if (types.roleNameR[na]) {\n        arguments[0].roleName = types.roleNameR[na]\n    }\n    if (ns.trim() !== "") {\n        if (types.roleNameS.test(ns)) {\n            arguments[0].content = ns.replace(types.roleNameS, match => types.roleNameR[match])\n        }\n    }\n}')
            .replace('createMessage: (function(ac) {\n            return function() {', 'createMessage: (function(ac) {\n            return function() {\nif (types.gjkdjf) {\n    let na = arguments[0].roleName, ns = arguments[0].content\n    if (types.roleNameR[na]) {\n        arguments[0].roleName = types.roleNameR[na]\n    }\n    if (ns.trim() !== "") {\n        if (types.roleNameS.test(ns)) {\n            arguments[0].content = ns.replace(types.roleNameS, match => types.roleNameR[match])\n        }\n    }\n}')

          // 调用原始的 appendChild 方法
          return originalAppendChild.call(this, newNode);
        };
        window.isSaveLocal = false
        if (window.AVG_OldSCENES !== undefined) {
          window.scenesSend = [];
          window.scenesById = {};
          getAllScenes(window.AVG_OldSCENES)
          if (window.scenesSend.length !== 0) {
            const customEvent55 = new CustomEvent("ycyPlot", {
              detail: { value: window.scenesSend }
            });
            window.dispatchEvent(customEvent55);
          }
        }
        if (typeof JSZip === 'undefined') {
          const script = document.createElement('script');
          script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
          document.head.appendChild(script);
        }
        clearInterval(intervalId2);
      } else if (window.typeGame === '1') {
        window.conditions = [];
        window.originAVGC = AVGCmdParserUtils.getValueByStr;
        window.originAVGCmd = AVGCmdCalcUtils.calc
        window.eventName = ''
        window.originAVGCN = function () {
          if (window.eventName === '' || window.eventName !== SceneController.currentLayer.config.id) {
            window.eventName = SceneController.currentLayer.config.id
            SceneController.currentLayer.config.commands.forEach(v => {
              if (!window.isEndIF && (v.includes('[if') || v.includes('[while'))) {
                window.isEndIF = true
              }
              if (window.isEndIF && (v.includes('[endif]') || v.includes('[endwhile]'))) {
                window.conditions.push(v)
                window.isEndIF = false
              }
              if (window.isEndIF && !(v.includes('picDisplay') || v.includes('image'))) {
                window.conditions.push(v)
              }
            })
          }
          let valueGet = arguments[0]
          if (!/^@/.test(valueGet)) {
            valueGet = `@${valueGet}`
          }
          const newV = window.originAVGC(arguments[0], arguments[1])
          if (newV && typeof newV.value !== 'string') {
            let indexName
            let arrayV = AVGCmdParserUtils['parseArrayValue'](valueGet)
            if (arrayV.indexId && typeof arrayV.indexId === 'object') {
              indexName = `@${arrayV.indexId.valueName}`
              arrayV.indexId = window.originAVGC(arrayV.indexId.valueName).value
            }
            if (arrayV.indexId === undefined) { valueGet = `@${arrayV.valueName}` } else {
              valueGet = `@${arrayV.valueName}[${arrayV.indexId}]`
            }
            if (types.isLOgic) {
              types.incVal.add(valueGet)
              indexName ? types.incVal.add(indexName) : ''
              newV.value = 1
              return newV;
            } else if (types.isSelfT) {
              types.incValST.add(valueGet)
              indexName ? types.incValST.add(indexName) : ''
              newV.initValue !== undefined ? newV.value = newV.initValue !== null ? newV.initValue : 0 : newV.value = newV.randMin
              return newV
            }
          }
          return newV
        }
        window.originAVGCmdN = function () {
          types.assignment.add(arguments[0])
          return window.originAVGCM.apply(this, arguments)
        }
        const diaT = AVGTextParserUtils['replaceValues']
        AVGTextParserUtils['replaceValues'] = function (text) {
          let ns = diaT(text)
          if (types.gjkdjf) {
            if (types.roleNameR[ns]) {
              ns = types.roleNameR[ns]
            } else if (ns.trim() !== '') {
              if (types.roleNameS.test(ns)) {
                ns = ns.replace(types.roleNameS, match => types.roleNameR[match])
              }
            }
          }
          return ns
        }
        if (window.AVG_OldSCENES !== undefined) {
          window.scenesSend = [];
          window.scenesById = {};
          getAllScenes(window.AVG_OldSCENES)
          if (window.scenesSend.length !== 0) {
            const customEvent55 = new CustomEvent("ycyPlot", {
              detail: { value: window.scenesSend }
            });
            window.dispatchEvent(customEvent55);
          }
        }
        clearInterval(intervalId2);
      }
      const customEvent2 = new CustomEvent("isYcyUserAllowed", {
        detail: { value: [true, window.gameName, window.gameId, window.typeGame] }
      });
      window.dispatchEvent(customEvent2);
    }
  }, 100);
}

window.addEventListener('message', (event) => {
  if (typeof event.data == 'string' && isJSON(event.data)) {
    const message = JSON.parse(event.data);
    if (message.type === 'isOpen') {
      window.isOpen = message.switchOn
    }
  }
})

async function limitConcurrency(tasks, limit, chunkSize, delayMs) {
  const result = [];
  const executing = [];
  let processedCount = 0;
  for (const task of tasks) {
    const p = task().then(result => {
      executing.splice(executing.indexOf(p), 1);
      return result;
    }).catch(error => {
      executing.splice(executing.indexOf(p), 1);
      return null; // 返回 null，确保不会阻止其他任务继续执行
    });
    result.push(p);
    executing.push(p);
    processedCount++;
    // 控制并发数
    if (executing.length >= limit) {
      await Promise.race(executing);  // 等待至少有一个请求完成
    }
    // 每处理完 chunkSize 个任务后，暂停一段时间
    if (processedCount % chunkSize === 0) {
      await new Promise(resolve => setTimeout(resolve, delayMs));
    }
  }
  return Promise.all(result);
}

function modifyLocalStorage(pt, gl) {
  let dbName = pt === 'cg' ? 'cgStorage' : 'syStorage', dbId = pt === 'cg' ? guid : parent.ueGame.gameUuid
  async function loadFile() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(dbName, 1);
      request.onupgradeneeded = function (event) {
        const db = event.target.result;
        const objectStore = db.createObjectStore('archive', { keyPath: 'id' });
        const initialData = {
          id: dbId
        };
        objectStore.add(initialData)
      };
      request.onsuccess = function (event) {
        const db = event.target.result;
        const transaction = db.transaction(['archive'], 'readwrite');
        const objectStore = transaction.objectStore('archive');
        const getRequest = objectStore.get(dbId);
        getRequest.onsuccess = function (event) {
          const existingData = event.target.result;
          if (existingData) {
            resolve(existingData);
          } else {
            resolve({});
          }
        };
        getRequest.onerror = function (event) {
          resolve({});
        };
      };
      request.onerror = function (event) {
        resolve({});
      };
    });
  }
  async function saveFile(fileName, data) {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(dbName, 1);
      request.onupgradeneeded = function (event) {
        const db = event.target.result;
        const objectStore = db.createObjectStore('archive', { keyPath: 'id' });
        const initialData = {
          id: dbId
        };
        objectStore.add(initialData)
      };
      request.onsuccess = function (event) {
        const db = event.target.result;
        const transaction = db.transaction(['archive'], 'readwrite');
        const objectStore = transaction.objectStore('archive');
        const getRequest = objectStore.get(dbId);
        getRequest.onsuccess = function (event) {
          const existingData = event.target.result;
          let cc = { id: dbId }
          if (existingData) {
            cc = existingData
            cc[fileName] = data
          } else {
            cc[fileName] = data
          }
          const updateRequest = objectStore.put(cc);
          updateRequest.onsuccess = function () {
            resolve(true); // 更新成功
          };
          updateRequest.onerror = function (event) {
            resolve(false); // 更新失败
          };
        };
        getRequest.onerror = function (event) {
          resolve(false);
        };
      };
      request.onerror = function (event) {
        resolve(false);
      };
    });
  }
  async function removeFile(fileName) {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(dbName, 1);
      request.onupgradeneeded = function (event) {
        const db = event.target.result;
        const objectStore = db.createObjectStore('archive', { keyPath: 'id' });
        const initialData = {
          id: dbId
        };
        objectStore.add(initialData)
      };
      request.onsuccess = function (event) {
        const db = event.target.result;
        const transaction = db.transaction(['archive'], 'readwrite');
        const objectStore = transaction.objectStore('archive');
        const getRequest = objectStore.get(dbId);
        getRequest.onsuccess = function (event) {
          const existingData = event.target.result;
          if (existingData) {
            delete existingData[fileName]
            const updateRequest = objectStore.put(existingData);
            updateRequest.onsuccess = function () {
              resolve(); // 更新成功
            };
            updateRequest.onerror = function (event) {
              resolve(); // 更新失败
            };
          } else {
            resolve();
          }
        };
        getRequest.onerror = function (event) {
          resolve();
        };
      };
      request.onerror = function (event) {
        resolve();
      };
    });
  }
  async function clear() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(dbName, 1);
      request.onupgradeneeded = function (event) {
        const db = event.target.result;
        const objectStore = db.createObjectStore('archive', { keyPath: 'id' });
        const initialData = {
          id: dbId
        };
        objectStore.add(initialData)
      };
      request.onsuccess = function (event) {
        const db = event.target.result;
        db.close();
        // 删除数据库
        const deleteRequest = indexedDB.deleteDatabase(dbName);
        deleteRequest.onsuccess = function () {
          resolve(true);
        };
        deleteRequest.onerror = function (event) {
          resolve(false);
        };
        deleteRequest.onblocked = function () {
          resolve(false);
        };
      };
      request.onerror = function (event) {
        resolve(false);
      };
    });
  }
  gl.localSaveObjext = {}
  loadFile().then(v => { gl.localSaveObjext = v })
  let a = gl.localStorage.getItem, b = gl.localStorage.setItem, c = gl.localStorage.removeItem, d = gl.localStorage.clear
  if (pt === 'cg') {
    gl.oldLocalStorage = {
      getItem: a.bind(gl.localStorage), setItem: b.bind(gl.localStorage),
      removeItem: c.bind(gl.localStorage), clear: d.bind(gl.localStorage)
    };
  }
  gl.localStorage.setItem = function () {
    let t = arguments[0], e = arguments[1]
    let isArchive = pt === 'cg' ? t.includes(GloableData._instance.savekey) || t.includes(guid) : (gl.lodjancjd || new Set()).has(t)
    if (isArchive) {
      if (gl.localStorage[t]) { c.call(this, t) }
      gl.localSaveObjext[t] = e
      saveFile(t, e)
      return
    }
    b.apply(this, arguments)
  }
  gl.localStorage.getItem = function () {
    let t = arguments[0]
    let isArchive = pt === 'cg' ? t.includes(GloableData._instance.savekey) || t.includes(guid) : (gl.lodjancjd || new Set()).has(t)
    if (isArchive) {
      let haS = gl.localStorage[t]
      if (haS) { saveFile(t, haS); gl.localSaveObjext[t] = haS; c.call(this, t); return haS }
      return gl.localSaveObjext[t]
    }
    return a.apply(this, arguments)
  }
  gl.localStorage.removeItem = function () {
    let t = arguments[0]
    let isArchive = pt === 'cg' ? t.includes(GloableData._instance.savekey) || t.includes(guid) : (gl.lodjancjd || new Set()).has(t)
    if (isArchive) {
      delete gl.localSaveObjext[t]
      removeFile(t)
    }
    c.apply(this, arguments)
  }
  gl.localStorage.clear = function () {
    clear().then(v => { if (!v) { clear() } })
    gl.localSave = {}
    d.apply(this, arguments)
  }
}

if (/https:\/\/www\.66rpg\.com\/h5\/\d+/.test(location.href) || /https:\/\/m\.66rpg\.com\/h5\/\d+/.test(location.href)) {
  const intervalId = setInterval(() => {
    if (window.panduan) {
      const customEvent = new CustomEvent("isCgUserAllowed", {
        detail: { value: true }
      });
      window.dispatchEvent(customEvent);
      getBGM()
      getGamebin();
      clearInterval(intervalId);
    }
  }, 100);
  let xhbnxg = false
  const intervalId1 = setInterval(() => {
    if (window.OStorage && window.guid && !xhbnxg) {
      xhbnxg = true
      modifyLocalStorage('cg', window)
      let e = OStorage.prototype.getAllFileName
      OStorage.prototype.getAllFileName = function () {
        let allF = e.call(this)
        const saRes = Object.keys(window.localSaveObjext)
        if (saRes.length > 0) { allF.push(...saRes) }
        allF = Array.from(new Set(allF))
        return allF
      }
    }
    if (!window.moSer && window.serverAjax && serverAjax.getRandomStringWithUID) {
      /* 方法一：记录橙光传递给后端的加密，便于解密时调用 */
      window.incrd = [];
      const originalGetRandomStringWithUID = serverAjax.getRandomStringWithUID;
      let interceptedReturnValue = '';
      // 重写原始函数
      serverAjax.getRandomStringWithUID = function () {
        // 执行原始的函数逻辑
        const originalResult = originalGetRandomStringWithUID.apply(this, arguments);
        // 拦截原始返回值并处理
        interceptedReturnValue = originalResult; //console.log('解密密钥：' + interceptedReturnValue);
        window.incr = interceptedReturnValue;
        // 返回原始的结果
        return originalResult;
      };
      window.moSer = !window.moSer
    }
    if (window.itemCost && IMain && tv && tv.userFlower !== undefined && window.userData !== undefined && window.userData?.uid !== undefined) {
      SAL_log = function () { }
      window.oriCheckIIF = window.checkIIF
      window.oriCompareVar = window.compareVar
      window.originBackT = window.backToMainMenu
      //配合各种购买成功方法使用：重写计算商城商品购买时的需要花数
      itemCost = function () { return 0 }
      // 重写数值加密函数
      GloableData.getInstance().getEncryptionInt = function (value) {
        return value;
      }
      //重写异或数值密钥
      GloableData._instance.memKey = 0
      //记录IMain函数
      window.originIMain = IMain
      //重新赋值商城鲜花使用量
      tv.userFlower = -10000
      tv.flowerMallWZ = 0
      // 停止 setInterval
      clearInterval(intervalId1);
    }
  }, 100);
}

function sortCgV(finalResult) {
  const sortedArray = finalResult.sort((a, b) => {
    const numA = a.valueId;
    const numB = b.valueId;
    return numA - numB;
  });
  const sortArray1 = sortedArray.sort((a, b) => (b.isEx ? 1 : 0) - (a.isEx ? 1 : 0));
  return sortArray1
}
let bnbnb = false, nhbjg = false
window.addEventListener('message', (event) => {
  if (typeof event.data == 'string' && isJSON(event.data)) {
    const message = JSON.parse(event.data);
    if (message.type === 'click' && (window.userData !== undefined || window.typeGame !== undefined || window.isSy !== undefined) && parent.isOpen) {
      const switchOn = message.switchOn
      //如果在橙光页面即转发允许橙光修改数值按钮显示
      if (window.userData !== undefined && window.userData?.uid !== undefined) {
        if (window.allCgValues) {
          window.allCgValues.forEach((element, index) => {
            const key = element.valueId;
            if (element.isEx) {
              const valu = window.tv && tv.system && tv.system.varsEx ? tv.system.varsEx.data[key] ? tv.system.varsEx.data[key] : 0 : 0
              window.allCgValues[index].valueNum = valu
              window.allCgValues[index].valueId = key
            } else {
              const valu = window.tv && tv.system && tv.system.vars ? tv.system.vars.data[key] ? tv.system.vars.data[key] : 0 : 0
              window.allCgValues[index].valueNum = valu
              window.allCgValues[index].valueId = key
            }
          })
          tv.system.vars.data.forEach((v, k) => {
            if (v !== undefined) {
              if (!window.allCgValuesId.has(k)) {
                window.allCgValuesId.add(k)
                window.allCgValues.push({ valueName: `[${k}：无法查到名称]`, name: '', valueNum: v, valueId: k, isEx: false })
              }
            }
          })
          tv.system.varsEx.data.forEach((v, k) => {
            if (v !== undefined) {
              if (!window.allCgExValuesId.has(k)) {
                window.allCgExValuesId.add(k)
                window.allCgValues.push({ valueName: `二周目数值：[${k}：无法查到名称]`, name: '', valueNum: v, valueId: k, isEx: true })
              }
            }
          })
          window.allCgValues = sortCgV(window.allCgValues)

          const customEvent1 = new CustomEvent("pageScriptCg", {
            detail: { value: window.allCgValues }
          });
          window.dispatchEvent(customEvent1);
        }
        if (window.userData && window.userData?.totalFlower !== undefined) {
          const customEvent19 = new CustomEvent("cgAccumulation", {
            detail: { value: window.userData?.totalFlower }
          });
          window.dispatchEvent(customEvent19);
        }
        if (tv && tv.data && tv.data.Headr && gIndex && !nhbjg) {
          nhbjg = true
          getIDData().then(v => {
            //转发修改code
            const code = v.ajaxInterceptor_cgGameCodeArray ? JSON.parse(v.ajaxInterceptor_cgGameCodeArray) : []
            const customEvent55 = new CustomEvent("savedCode", {
              detail: { value: [code, tv.data.Headr.title, gIndex] }
            });
            window.dispatchEvent(customEvent55);
          })
        }
        if (localStorage.getItem('isCgChange') && localStorage.getItem('isCgChange') === 'true') {
          const customEvent56 = new CustomEvent("cgChange", {
            detail: { value: true }
          });
          window.dispatchEvent(customEvent56);
        }
      } else if (window.AVG_GLOBAL_CONFIG !== undefined && window.AVG_GLOBAL_CONFIG.values !== undefined && AVG_GLOBAL_CONFIG.game.name && window.typeGame && window.typeGame && window.typeGame === '1') {
        //获取1.0检测点
        const zh = AVG_GLOBAL_CONFIG;
        const zyz = Object.values(zh['values']);
        const xb = Object.values(zh['arrays']);
        if (!window.jc) {
          window.jc = {
            "数组数值检测": [{ valueName: `${AVG_GLOBAL_CONFIG.game.name}的数组数值检测`, valueNum: 'Ajax插件的提示' }],
            "数值检测": [{ valueName: `${AVG_GLOBAL_CONFIG.game.name}的普通数值检测`, valueNum: 'Ajax插件的提示' }],
          };
        }
        if (window.cts !== undefined) {
          if (!bnbnb) {
            bnbnb = true
            // 预处理 window.cts 数据，创建直接可访问的映射
            const arrayValueIdMap = new Set();
            const valueIdMap = new Set();
            Object.values(window.cts).forEach(ct => {
              ct.arrayValueIds.forEach(id => arrayValueIdMap.add(id));
              ct.valueIds.forEach(id => valueIdMap.add(id));
            });
            // 处理数值检测
            zyz.forEach(item => {
              if (valueIdMap.has(item.id)) {
                window.jc['数值检测'].push({ valueName: item.name, valueNum: BaseUtils.decryptoNumber(item.value), isJc: true });
              }
            });
            // 处理数组数值检测
            xb.forEach(item => {
              Object.values(item.arrayValues).forEach((av, index) => {
                if (arrayValueIdMap.has(av.id)) {
                  window.jc['数组数值检测'].push({ valueName: `${item.name}[${index + 1}]`, valueNum: BaseUtils.decryptoNumber(av.value), isJc: true });
                }
              });
            });
          } else {
            window.jc['数值检测'].forEach(v => {
              if (v.isJc) {
                v.valueNum = BaseUtils['decryptoNumber'](AVG_GLOBAL_VARIABLES[v.valueName]['value'])
              }
            })
            window.jc['数组数值检测'].forEach(v => {
              if (v.isJc) {
                let _0x22b102 = AVGCmdParserUtils['parseArrayValue'](`@${v.valueName}`);
                if (!BaseUtils['isNil'](_0x22b102)) {
                  v.valueNum = AVGCmdParserUtils['parseValueTree'](_0x22b102).value;
                }
              }
            })
          }
        }
        //处理数值
        window.ycyTypeOneValuesName = [];
        window.ycyArraysValues = [];
        let firstNormalV = 3
        let getFirstStringValue = 3, getFirstStringArrayValue = 3;
        if (!window.ycySortedV) {
          window.ycySortedV = Object.values(AVG_GLOBAL_CONFIG.values).sort((a, b) => {
            // 首先按照 valueType 进行排序，'number' 在前
            if (a.valueType === 'number' && b.valueType !== 'number') {
              return -1;
            } else if (a.valueType !== 'number' && b.valueType === 'number') {
              return 1;
            } else {
              // 如果 persisType 相同，则按照 persisType 进行排序，'const' 在前
              if (a.persisType === 'const' && b.persisType !== 'const') {
                return -1;
              } else if (a.persisType !== 'const' && b.persisType === 'const') {
                return 1;
              } else {
                // 如果 valueType 相同，则按照 name 进行排序
                return a.name.localeCompare(b.name);
              }
            }
          });
        }
        window.ycySortedV.forEach(value => {
          if (value.valueType === "number") {
            if (firstNormalV === 3 && value.persisType === 'normal') {
              window.ycyTypeOneValuesName.push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的单档普通数值`, valueId: -1003, valueNum: 'Ajax插件的提示' });
              firstNormalV++;
            }
            window.ycyTypeOneValuesName.push({
              valueName: value.name,
              valueId: value.id ?? value.uuid,
              valueType: value.valueType,
              valueNum: value.value !== undefined ? BaseUtils.decryptoNumber(value.value) : value.initValue ?? value.randMin
            });
          } else if (value.valueType === "string") {
            if (getFirstStringValue === 3) {
              window.ycyTypeOneValuesName.push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的字符数值`, valueId: -1000, valueNum: 'Ajax插件的提示' });
              getFirstStringValue++;
            }
            window.ycyTypeOneValuesName.push({
              valueName: value.name,
              valueId: value.id,
              valueType: value.valueType,
              valueNum: value.value !== undefined ? value.value : value.initValue
            });
          }
        })
        if (!window.ycySortedA) {
          window.ycySortedA = Object.values(AVG_GLOBAL_CONFIG.arrays).sort((a, b) => {
            // 排序逻辑
            if (a.arrayValues[a.size].valueType === 'number' && b.arrayValues[b.size].valueType !== 'number') {
              return -1;
            } else if (a.arrayValues[a.size].valueType !== 'number' && b.arrayValues[b.size].valueType === 'number') {
              return 1;
            } else {
              if (a.persisType === 'const' && b.persisType !== 'const') {
                return -1;
              } else if (a.persisType !== 'const' && b.persisType === 'const') {
                return 1;
              } else {
                return a.name.localeCompare(b.name);
              }
            }
          });
        }
        window.ycySortedA.forEach(value => {
          if (value.size !== 0 && value.arrayValues[value.size].valueType === "string") {
            if (getFirstStringArrayValue === 3) {
              window.ycyArraysValues.push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的数组字符数值`, valueId: -1000, valueNum: 'Ajax插件的提示' });
              getFirstStringArrayValue++;
            }
          }
          const arrayValue = { valueName: value.name, valueId: value.id, valueSize: value.size, valueArray: {} };
          Object.values(value.arrayValues).forEach(val => {
            arrayValue.valueArray[`${value.name}[${val.indexId}]`] = {
              valueType: val.valueType,
              valueNum: val.valueType === 'number' ?
                (val.value !== undefined ? BaseUtils.decryptoNumber(val.value) : val.initValue ?? val.randMin) :
                val.value
            }
          });
          window.ycyArraysValues.push(arrayValue);
        });
        if (window.jc["数值检测"].length === 1) {
          window.jc["数值检测"].push({ valueName: '该作品无普通数值的检测', valueId: -999, valueNum: 'Ajax插件的提示' });
          if (window.ycyTypeOneValuesName.length !== 0 && window.ycyTypeOneValuesName[0].valueType !== undefined) {
            window.jc["数值检测"].push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的全档普通数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        } else if (window.jc["数值检测"].length !== 1 && window.jc["数值检测"][1].isJc) {
          if (window.ycyTypeOneValuesName.length !== 0 && window.ycyTypeOneValuesName[0].valueType !== undefined) {
            window.jc["数值检测"].push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的全档普通数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        }
        if (window.jc["数组数值检测"].length === 1) {
          window.jc["数组数值检测"].push({ valueName: '该作品无数组数值的检测', valueId: -999, valueNum: 'Ajax插件的提示' });
          if (window.ycyArraysValues.length !== 0 && window.ycyArraysValues[0].valueSize !== undefined) {
            window.jc["数组数值检测"].push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的数组数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        } else if (window.jc["数组数值检测"].length !== 1 && window.jc["数组数值检测"][1].isJc) {
          if (window.ycyArraysValues.length !== 0 && window.ycyArraysValues[0].valueSize !== undefined) {
            window.jc["数组数值检测"].push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的数组数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        }
        window.ycyTypeOneValuesName = window.jc["数值检测"].concat(window.ycyTypeOneValuesName);
        window.ycyArraysValues = window.jc["数组数值检测"].concat(window.ycyArraysValues);
        if (window.ycyTypeOneValuesName.length !== 0) {
          const customEvent3 = new CustomEvent("pageScriptYcy", {
            detail: { value: window.ycyTypeOneValuesName }
          });
          window.dispatchEvent(customEvent3);
        }
        if (window.ycyArraysValues.length !== 0) {
          const customEvent3 = new CustomEvent("pageScriptYcyArray", {
            detail: { value: window.ycyArraysValues }
          });
          window.dispatchEvent(customEvent3);
        }

        if (!nhbjg) {
          nhbjg = true
          getIDData().then(v => {
            if (v.ajaxInterceptor_ycyGameCodeArray) {
              //转发修改code
              const code = JSON.parse(v.ajaxInterceptor_ycyGameCodeArray)
              const customEvent55 = new CustomEvent("savedCode", {
                detail: { value: [code] }
              });
              window.dispatchEvent(customEvent55);
            }
          })
        }
        if (localStorage.getItem('isYcyChange') && localStorage.getItem('isYcyChange') === 'true') {
          const customEvent56 = new CustomEvent("ycyChange", {
            detail: { value: true }
          });
          window.dispatchEvent(customEvent56);
        }
      } else if (window.typeGame && window.typeGame === '2' && window.ycyArrays && window.ycyValues) {
        //获取2.0检测点
        let zyz = Object.values(window['ycyValues']);
        let xb = Object.values(window['ycyArrays']);
        if (!window.jc) {
          window.jc = {
            "数组数值检测": [{ valueName: `${window.gameName}的数组数值检测`, valueNum: 'Ajax插件的提示' }],
            "数值检测": [{ valueName: `${window.gameName}的普通数值检测`, valueNum: 'Ajax插件的提示' }],
          };
        }
        if (window.cts !== undefined) {
          if (!bnbnb) {
            bnbnb = true
            // 预处理 window.cts 数据，创建直接可访问的映射
            const arrayValueIdMap = new Set();
            const valueIdMap = new Set();
            Object.values(window.cts).forEach(ct => {
              ct.arrayValueIds.forEach(id => arrayValueIdMap.add(id));
              ct.valueIds.forEach(id => valueIdMap.add(id));
            });
            // 处理数值检测
            zyz.forEach(item => {
              if (valueIdMap.has(item.id)) {
                window.jc['数值检测'].push({
                  valueName: item.name,
                  valueNum: item.persisType === 'normal' ? window['_var'][item.name] : window['_cVar'][item.name],
                  valueType: item.persisType,
                  isJc: true
                });
              }
            });
            // 处理数组数值检测
            xb.forEach(item => {
              item.arrayValues.forEach((av, index) => {
                if (arrayValueIdMap.has(av.id)) {
                  window.jc['数组数值检测'].push({
                    valueName: `${item.name}[${index}]`,
                    valueNum: item.persisType === 'normal' ? window['_arr'][item.name][index] : window['_cArr'][item.name][index],
                    valueIn: index,
                    name: item.name,
                    valueType: item.persisType,
                    isJc: true
                  });
                }
              });
            });
          } else {
            window.jc['数值检测'].forEach(v => {
              if (v.isJc) {
                v.valueNum = v.valueType === 'normal' ? window['_var'][v.valueName] : window['_cVar'][v.valueName]
              }
            })
            window.jc['数组数值检测'].forEach(v => {
              if (v.isJc) {
                v.valueNum = v.valueType === 'normal' ? window['_arr'][v.name][v.valueIn] : window['_cArr'][v.name][v.valueIn]
              }
            })
          }
        }
        let getYcyTwoFirstNormalValue = 3;
        let getYcyTwoFirstStringValue = 3;
        let getYcyTwoFirstStringArray = 3;
        window.ycyTypeThreeValueName = [];
        window.ycyTypeThreeArraysValues = [];
        //开始处理数值-普通数值
        if (!window.ycySortedV) {
          window.ycySortedV = Object.values(window.ycyValues).sort((a, b) => {
            //首先按照 valueType 进行排序，'number' 在前
            if (a.valueType === 'number' && b.valueType !== 'number') {
              return -1;
            } else if (a.valueType !== 'number' && b.valueType === 'number') {
              return 1;
            }
            else {
              // 如果 persisType 相同，则按照 persisType 进行排序，'const' 在前
              if (a.persisType === 'const' && b.persisType !== 'const') {
                return -1;
              } else if (a.persisType !== 'const' && b.persisType === 'const') {
                return 1;
              } else {
                // 如果 valueType 相同，则按照 name 进行排序
                return a.name.localeCompare(b.name);
              }
            }
          });
        }
        window.ycySortedV.forEach(value => {
          if (value.valueType === "number") {
            if (value.persisType === 'const') {
              window.ycyTypeThreeValueName.push({ valueName: value.name, valueNum: window['_cVar'][value.name], valueId: value.id, valueType: value.valueType })
            } else if (value.persisType === 'normal') {
              if (getYcyTwoFirstNormalValue === 3) {
                window.ycyTypeThreeValueName.push({ valueName: `${window.gameName}的单档普通数值`, valueId: -1000, valueNum: 'Ajax插件的提示' });
                getYcyTwoFirstNormalValue++;
              }
              window.ycyTypeThreeValueName.push({ valueName: value.name, valueNum: window['_var'][value.name], valueId: value.id, valueType: value.valueType })
            }
          } else if (value.valueType === "string") {
            if (getYcyTwoFirstStringValue === 3) {
              window.ycyTypeThreeValueName.push({ valueName: `${window.gameName}的字符数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
              getYcyTwoFirstStringValue++;
            }
            if (value.persisType === 'const') {
              window.ycyTypeThreeValueName.push({ valueName: value.name, valueNum: window['_cVar'][value.name], valueId: value.id, valueType: value.valueType })
            } else if (value.persisType === 'normal') {
              window.ycyTypeThreeValueName.push({ valueName: value.name, valueNum: window['_var'][value.name], valueId: value.id, valueType: value.valueType })
            }
          }
        })

        //开始处理数值-数组数值
        if (!window.ycySortedA) {
          window.ycySortedA = Object.values(window.ycyArrays).sort((a, b) => {
            // 首先按照 valueType 进行排序，'number' 在前
            if (a.arrayValues[a.size - 1].valueType === 'number' && b.arrayValues[b.size - 1].valueType !== 'number') {
              return -1;
            } else if (a.arrayValues[a.size - 1].valueType !== 'number' && b.arrayValues[b.size - 1].valueType === 'number') {
              return 1;
            } else {
              // 其次按照 persisType 进行排序，'const' 在前
              if (a.persisType === 'const' && b.persisType !== 'const') {
                return -1;
              } else if (a.persisType !== 'const' && b.persisType === 'const') {
                return 1;
              } else {
                // 如果 valueType 相同，则按照 name 进行排序
                return a.name.localeCompare(b.name);
              }
            }
          });
        }
        window.ycySortedA.forEach(value => {
          if (value.size !== 0 && value.arrayValues[value.size - 1].valueType === "number") {
            if (value.persisType === 'const') {
              const arrayItem = { valueName: value.name, valueId: value.id, valueSize: value.size - 1, valueArray: {} }
              const itemV = window['_cArr'][value.name]
              value.arrayValues.forEach((value1, k) => {
                arrayItem['valueArray'][`${value.name}[${k}]`] = {
                  valueType: value1.valueType,
                  valueNum: itemV[k]
                }
              })
              window.ycyTypeThreeArraysValues.push(arrayItem)
            } else if (value.persisType === 'normal') {
              const arrayItem = { valueName: value.name, valueId: value.id, valueSize: value.size - 1, valueArray: {} }
              const itemV = window['_arr'][value.name]
              value.arrayValues.forEach((value1, k) => {
                arrayItem['valueArray'][`${value.name}[${k}]`] = {
                  valueType: value1.valueType,
                  valueNum: itemV[k]
                }
              })
              window.ycyTypeThreeArraysValues.push(arrayItem)
            }
          } else if (value.size !== 0 && value.arrayValues[value.size - 1].valueType === "string") {
            if (getYcyTwoFirstStringArray === 3) {
              window.ycyTypeThreeArraysValues.push({ valueName: `${window.gameName}的字符数组数值`, valueId: -1000, valueNum: 'Ajax插件的提示' });
              getYcyTwoFirstStringArray++;
            }
            if (value.persisType === 'const') {
              const arrayItem = { valueName: value.name, valueId: value.id, valueSize: value.size - 1, valueArray: {} }
              const itemV = window['_cArr'][value.name]
              value.arrayValues.forEach((value1, k) => {
                arrayItem['valueArray'][`${value.name}[${k}]`] = {
                  valueType: value1.valueType,
                  valueNum: itemV[k]
                }
              })
              window.ycyTypeThreeArraysValues.push(arrayItem)
            } else if (value.persisType === 'normal') {
              const arrayItem = { valueName: value.name, valueId: value.id, valueSize: value.size - 1, valueArray: {} }
              const itemV = window['_arr'][value.name]
              value.arrayValues.forEach((value1, k) => {
                arrayItem['valueArray'][`${value.name}[${k}]`] = {
                  valueType: value1.valueType,
                  valueNum: itemV[k]
                }
              })
              window.ycyTypeThreeArraysValues.push(arrayItem)
            }
          }
        })
        if (window.jc["数值检测"].length === 1) {
          window.jc["数值检测"].push({ valueName: '该作品无普通数值的检测', valueId: -999, valueNum: 'Ajax插件的提示' });
          if (window.ycyTypeThreeValueName.length !== 0 && window.ycyTypeThreeValueName[0].valueType !== undefined) {
            window.jc["数值检测"].push({ valueName: `${window.gameName}的全档普通数值`, valueId: -1002, valueNum: 'Ajax插件的提示' });
          }
        } else if (window.jc["数值检测"].length !== 1 && window.jc["数值检测"][1].isJc) {
          if (window.ycyTypeThreeValueName.length !== 0 && window.ycyTypeThreeValueName[0].valueType !== undefined) {
            window.jc["数值检测"].push({ valueName: `${window.gameName}的全档普通数值`, valueId: -1002, valueNum: 'Ajax插件的提示' });
          }
        }
        if (window.jc["数组数值检测"].length === 1) {
          window.jc["数组数值检测"].push({ valueName: '该作品无数组数值的检测', valueId: -999, valueNum: 'Ajax插件的提示' });
          if (window.ycyTypeThreeArraysValues.length !== 0 && window.ycyTypeThreeArraysValues[0].valueSize !== undefined) {
            window.jc["数组数值检测"].push({ valueName: `${window.gameName}的数组数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        } else if (window.cts && window.jc["数组数值检测"].length !== 1 && window.jc["数组数值检测"][1].isJc) {
          if (window.ycyTypeThreeArraysValues.length !== 0 && window.ycyTypeThreeArraysValues[0].valueSize !== undefined) {
            window.jc["数组数值检测"].push({ valueName: `${window.gameName}的数组数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        }
        window.ycyTypeThreeValueName = window.jc["数值检测"].concat(window.ycyTypeThreeValueName);
        window.ycyTypeThreeArraysValues = window.jc["数组数值检测"].concat(window.ycyTypeThreeArraysValues);
        if (window.ycyTypeThreeValueName.length !== 0) {
          const customEvent3 = new CustomEvent("pageScriptYcy", {
            detail: { value: window.ycyTypeThreeValueName }
          });
          window.dispatchEvent(customEvent3);
        }
        if (window.ycyTypeThreeArraysValues.length !== 0) {
          const customEvent3 = new CustomEvent("pageScriptYcyArray", {
            detail: { value: window.ycyTypeThreeArraysValues }
          });
          window.dispatchEvent(customEvent3);
        }
        if (!nhbjg) {
          nhbjg = true
          getIDData().then(v => {
            if (v.ajaxInterceptor_ycyGameCodeArray) {
              //转发修改code
              const code = JSON.parse(v.ajaxInterceptor_ycyGameCodeArray)
              const customEvent55 = new CustomEvent("savedCode", {
                detail: { value: [code] }
              });
              window.dispatchEvent(customEvent55);
            }
          })
        }
        if (localStorage.getItem('isYcyChange') && localStorage.getItem('isYcyChange') === 'true') {
          const customEvent56 = new CustomEvent("ycyChange", {
            detail: { value: true }
          });
          window.dispatchEvent(customEvent56);
        }
      } else if (window.isSy) {
        if (window.getPCon) {
          const playCont = window.getPCon()
          let payValues = [], values = [], indexValues = [], savedValues = [], stringValues = [], systemValues = [];
          if (!window.valueType || window.skipValueTy) {
            window.valueType = {}
            window.skipValueTy = true
            Object.keys(playCont).forEach(v => {
              const playArray = playCont[v];
              const playArrayLength = playArray.length;
              if (playArrayLength > 0) {
                const firstPlayArrayItem = playArray[0];
                if (playArrayLength === window.gameInfoSy.payValues.length && firstPlayArrayItem.uuid === window.gameInfoSy.payValues[0]?.uuid) {
                  payValues = playArray;
                  window.valueType.pv = v;
                } else if (playArrayLength === window.gameInfoSy.values.length && firstPlayArrayItem.uuid === window.gameInfoSy.values[0]?.uuid) {
                  values = playArray;
                  window.valueType.va = v;
                } else if (playArrayLength === window.gameInfoSy.indexValues.length && firstPlayArrayItem.uuid === window.gameInfoSy.indexValues[0]?.uuid) {
                  indexValues = playArray;
                  window.valueType.iv = v;
                } else if (playArrayLength === window.gameInfoSy.savedValues.length && firstPlayArrayItem.uuid === window.gameInfoSy.savedValues[0]?.uuid) {
                  savedValues = playArray;
                  window.valueType.sa = v;
                } else if (playArrayLength === window.gameInfoSy.stringValues.length && firstPlayArrayItem.uuid === window.gameInfoSy.stringValues[0]?.uuid) {
                  stringValues = playArray;
                  window.valueType.st = v;
                } else if (playArrayLength === window.gameInfoSy.systemValues.length && firstPlayArrayItem.uuid === window.gameInfoSy.systemValues[0]?.uuid) {
                  systemValues = playArray;
                  window.valueType.sy = v;
                }
              }
            });
          } else {
            payValues = playCont[window.valueType.pv], values = playCont[window.valueType.va],
              indexValues = playCont[window.valueType.iv], savedValues = playCont[window.valueType.sa],
              stringValues = playCont[window.valueType.st], systemValues = playCont[window.valueType.sy]
          }
          payValues.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.payValues[k].value = v.value
              } else {
                window.gameInfoSy.payValues[k].value = window.gameInfoSy.payValues[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.payValues[k].value = result
              } else {
                window.gameInfoSy.payValues[k].value = window.gameInfoSy.payValues[k].init.value
              }
            }
          })
          values.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.values[k].value = v.value
              } else {
                window.gameInfoSy.values[k].value = window.gameInfoSy.values[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.values[k].value = result
              } else {
                window.gameInfoSy.values[k].value = window.gameInfoSy.values[k].init.value
              }
            }
          })
          indexValues.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.indexValues[k].value = v.value
              } else {
                window.gameInfoSy.indexValues[k].value = window.gameInfoSy.indexValues[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.indexValues[k].value = result
              } else {
                window.gameInfoSy.indexValues[k].value = window.gameInfoSy.indexValues[k].init.value
              }
            }
          })
          savedValues.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.savedValues[k].value = v.value
              } else {
                window.gameInfoSy.savedValues[k].value = window.gameInfoSy.savedValues[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.savedValues[k].value = result
              } else {
                window.gameInfoSy.savedValues[k].value = window.gameInfoSy.savedValues[k].init.value
              }
            }
          })
          stringValues.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.stringValues[k].value = v.value
              } else {
                window.gameInfoSy.stringValues[k].value = window.gameInfoSy.stringValues[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.stringValues[k].value = result
              } else {
                window.gameInfoSy.stringValues[k].value = window.gameInfoSy.stringValues[k].init.value
              }
            }
          })
          systemValues.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.systemValues[k].value = v.value
              } else {
                window.gameInfoSy.systemValues[k].value = window.gameInfoSy.systemValues[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.systemValues[k].value = result
              } else {
                window.gameInfoSy.systemValues[k].value = window.gameInfoSy.systemValues[k].init.value
              }
            }
          })
          parent.gameInfoSy = window.gameInfoSy
          const syValues = [window.gameInfoSy.payValues, window.gameInfoSy.values, window.gameInfoSy.savedValues, window.gameInfoSy.stringValues, window.gameInfoSy.systemValues, window.gameInfoSy.indexValues]
          const customEvent2 = new CustomEvent("syValues", {
            detail: { value: syValues }
          });
          window.dispatchEvent(customEvent2);
        }
      }
    }
  }
});
window.addEventListener('message', (event) => {
  if (typeof event.data == 'string' && isJSON(event.data)) {
    const message = JSON.parse(event.data);
    if (message.type === 'switchOn') {
      const switchOn = message.switchOn
      if (switchOn && window.userData?.uid !== undefined) {
        if (!window.allCgValues) {
          getGamebin();
        }
        if (window.allCgValues) {
          window.allCgValues.forEach((element, index) => {
            const key = element.valueId;
            if (element.isEx) {
              const valu = window.tv && tv.system && tv.system.varsEx ? tv.system.varsEx.data[key] ? tv.system.varsEx.data[key] : 0 : 0
              window.allCgValues[index].valueNum = valu
              window.allCgValues[index].valueId = key
            } else {
              const valu = window.tv && tv.system && tv.system.vars ? tv.system.vars.data[key] ? tv.system.vars.data[key] : 0 : 0
              window.allCgValues[index].valueNum = valu
              window.allCgValues[index].valueId = key
            }
          })
          tv.system.vars.data.forEach((v, k) => {
            if (v !== undefined) {
              if (!window.allCgValuesId.has(k)) {
                window.allCgValuesId.add(k)
                window.allCgValues.push({ valueName: `[${k}：无法查到名称]`, name: '', valueNum: v, valueId: k, isEx: false })
              }
            }
          })
          tv.system.varsEx.data.forEach((v, k) => {
            if (v !== undefined) {
              if (!window.allCgExValuesId.has(k)) {
                window.allCgExValuesId.add(k)
                window.allCgValues.push({ valueName: `二周目数值：[${k}：无法查到名称]`, name: '', valueNum: v, valueId: k, isEx: true })
              }
            }
          })
          window.allCgValues = sortCgV(window.allCgValues)

          const customEvent1 = new CustomEvent("pageScriptCg", {
            detail: { value: window.allCgValues }
          });
          window.dispatchEvent(customEvent1);
        }
      } else if (switchOn && window.AVG_GLOBAL_CONFIG !== undefined && window.typeGame && window.typeGame === '1') {
        //获取1.0检测点
        const zh = AVG_GLOBAL_CONFIG;
        const zyz = Object.values(zh['values']);
        const xb = Object.values(zh['arrays']);
        if (!window.jc) {
          window.jc = {
            "数组数值检测": [{ valueName: `${AVG_GLOBAL_CONFIG.game.name}的数组数值检测`, valueNum: 'Ajax插件的提示' }],
            "数值检测": [{ valueName: `${AVG_GLOBAL_CONFIG.game.name}的普通数值检测`, valueNum: 'Ajax插件的提示' }],
          };
        }
        if (window.cts !== undefined) {
          window.jc['数值检测'].forEach(v => {
            if (v.isJc) {
              v.valueNum = BaseUtils['decryptoNumber'](AVG_GLOBAL_VARIABLES[v.valueName]['value'])
            }
          })
          window.jc['数组数值检测'].forEach(v => {
            if (v.isJc) {
              let _0x22b102 = AVGCmdParserUtils['parseArrayValue'](`@${v.valueName}`);
              if (!BaseUtils['isNil'](_0x22b102)) {
                v.valueNum = AVGCmdParserUtils['parseValueTree'](_0x22b102).value;
              }
            }
          })
        }
        //处理数值
        window.ycyTypeOneValuesName = [];
        window.ycyArraysValues = [];
        let firstNormalV = 3
        let getFirstStringValue = 3, getFirstStringArrayValue = 3;
        window.ycySortedV.forEach(value => {
          if (value.valueType === "number") {
            if (firstNormalV === 3 && value.persisType === 'normal') {
              window.ycyTypeOneValuesName.push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的单档普通数值`, valueId: -1003, valueNum: 'Ajax插件的提示' });
              firstNormalV++;
            }
            window.ycyTypeOneValuesName.push({
              valueName: value.name,
              valueId: value.id ?? value.uuid,
              valueType: value.valueType,
              valueNum: value.value !== undefined ? BaseUtils.decryptoNumber(value.value) : value.initValue ?? value.randMin
            });
          } else if (value.valueType === "string") {
            if (getFirstStringValue === 3) {
              window.ycyTypeOneValuesName.push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的字符数值`, valueId: -1000, valueNum: 'Ajax插件的提示' });
              getFirstStringValue++;
            }
            window.ycyTypeOneValuesName.push({
              valueName: value.name,
              valueId: value.id,
              valueType: value.valueType,
              valueNum: value.value !== undefined ? value.value : value.initValue
            });
          }
        })
        window.ycySortedA.forEach(value => {
          if (value.size !== 0 && value.arrayValues[value.size].valueType === "string") {
            if (getFirstStringArrayValue === 3) {
              window.ycyArraysValues.push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的数组字符数值`, valueId: -1000, valueNum: 'Ajax插件的提示' });
              getFirstStringArrayValue++;
            }
          }
          const arrayValue = { valueName: value.name, valueId: value.id, valueSize: value.size, valueArray: {} };
          Object.values(value.arrayValues).forEach(val => {
            arrayValue.valueArray[`${value.name}[${val.indexId}]`] = {
              valueType: val.valueType,
              valueNum: val.valueType === 'number' ?
                (val.value !== undefined ? BaseUtils.decryptoNumber(val.value) : val.initValue ?? val.randMin) :
                val.value
            }
          });
          window.ycyArraysValues.push(arrayValue);
        });
        if (window.jc["数值检测"].length === 1) {
          window.jc["数值检测"].push({ valueName: '该作品无普通数值的检测', valueId: -999, valueNum: 'Ajax插件的提示' });
          if (window.ycyTypeOneValuesName.length !== 0 && window.ycyTypeOneValuesName[0].valueType !== undefined) {
            window.jc["数值检测"].push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的全档普通数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        } else if (window.jc["数值检测"].length !== 1 && window.jc["数值检测"][1].isJc) {
          if (window.ycyTypeOneValuesName.length !== 0 && window.ycyTypeOneValuesName[0].valueType !== undefined) {
            window.jc["数值检测"].push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的全档普通数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        }
        if (window.jc["数组数值检测"].length === 1) {
          window.jc["数组数值检测"].push({ valueName: '该作品无数组数值的检测', valueId: -999, valueNum: 'Ajax插件的提示' });
          if (window.ycyArraysValues.length !== 0 && window.ycyArraysValues[0].valueSize !== undefined) {
            window.jc["数组数值检测"].push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的数组数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        } else if (window.jc["数组数值检测"].length !== 1 && window.jc["数组数值检测"][1].isJc) {
          if (window.ycyArraysValues.length !== 0 && window.ycyArraysValues[0].valueSize !== undefined) {
            window.jc["数组数值检测"].push({ valueName: `${AVG_GLOBAL_CONFIG.game.name}的数组数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        }
        window.ycyTypeOneValuesName = window.jc["数值检测"].concat(window.ycyTypeOneValuesName);
        window.ycyArraysValues = window.jc["数组数值检测"].concat(window.ycyArraysValues);
        if (window.ycyTypeOneValuesName.length !== 0) {
          const customEvent3 = new CustomEvent("pageScriptYcy", {
            detail: { value: window.ycyTypeOneValuesName }
          });
          window.dispatchEvent(customEvent3);
        }
        if (window.ycyArraysValues.length !== 0) {
          const customEvent3 = new CustomEvent("pageScriptYcyArray", {
            detail: { value: window.ycyArraysValues }
          });
          window.dispatchEvent(customEvent3);
        }
      } else if (switchOn && window.typeGame && window.typeGame === '2') {
        //获取2.0检测点
        let zyz = Object.values(window['ycyValues']);
        let xb = Object.values(window['ycyArrays']);
        if (!window.jc) {
          window.jc = {
            "数组数值检测": [{ valueName: `${window.gameName}的数组数值检测`, valueNum: 'Ajax插件的提示' }],
            "数值检测": [{ valueName: `${window.gameName}的普通数值检测`, valueNum: 'Ajax插件的提示' }],
          };
        }
        if (window.cts !== undefined) {
          window.jc['数值检测'].forEach(v => {
            if (v.isJc) {
              v.valueNum = v.valueType === 'normal' ? window['_var'][v.valueName] : window['_cVar'][v.valueName]
            }
          })
          window.jc['数组数值检测'].forEach(v => {
            if (v.isJc) {
              v.valueNum = v.valueType === 'normal' ? window['_arr'][v.name][v.valueIn] : window['_cArr'][v.name][v.valueIn]
            }
          })
        }
        let getYcyTwoFirstNormalValue = 3;
        let getYcyTwoFirstStringValue = 3;
        let getYcyTwoFirstStringArray = 3;
        window.ycyTypeThreeValueName = [];
        window.ycyTypeThreeArraysValues = [];
        window.ycySortedV.forEach(value => {
          if (value.valueType === "number") {
            if (value.persisType === 'const') {
              window.ycyTypeThreeValueName.push({ valueName: value.name, valueNum: window['_cVar'][value.name], valueId: value.id, valueType: value.valueType })
            } else if (value.persisType === 'normal') {
              if (getYcyTwoFirstNormalValue === 3) {
                window.ycyTypeThreeValueName.push({ valueName: `${window.gameName}的单档普通数值`, valueId: -1000, valueNum: 'Ajax插件的提示' });
                getYcyTwoFirstNormalValue++;
              }
              window.ycyTypeThreeValueName.push({ valueName: value.name, valueNum: window['_var'][value.name], valueId: value.id, valueType: value.valueType })
            }
          } else if (value.valueType === "string") {
            if (getYcyTwoFirstStringValue === 3) {
              window.ycyTypeThreeValueName.push({ valueName: `${window.gameName}的字符数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
              getYcyTwoFirstStringValue++;
            }
            if (value.persisType === 'const') {
              window.ycyTypeThreeValueName.push({ valueName: value.name, valueNum: window['_cVar'][value.name], valueId: value.id, valueType: value.valueType })
            } else if (value.persisType === 'normal') {
              window.ycyTypeThreeValueName.push({ valueName: value.name, valueNum: window['_var'][value.name], valueId: value.id, valueType: value.valueType })
            }
          }
        })
        window.ycySortedA.forEach(value => {
          if (value.size !== 0 && value.arrayValues[value.size - 1].valueType === "number") {
            if (value.persisType === 'const') {
              const arrayItem = { valueName: value.name, valueId: value.id, valueSize: value.size - 1, valueArray: {} }
              const itemV = window['_cArr'][value.name]
              value.arrayValues.forEach((value1, k) => {
                arrayItem['valueArray'][`${value.name}[${k}]`] = {
                  valueType: value1.valueType,
                  valueNum: itemV[k]
                }
              })
              window.ycyTypeThreeArraysValues.push(arrayItem)
            } else if (value.persisType === 'normal') {
              const arrayItem = { valueName: value.name, valueId: value.id, valueSize: value.size - 1, valueArray: {} }
              const itemV = window['_arr'][value.name]
              value.arrayValues.forEach((value1, k) => {
                arrayItem['valueArray'][`${value.name}[${k}]`] = {
                  valueType: value1.valueType,
                  valueNum: itemV[k]
                }
              })
              window.ycyTypeThreeArraysValues.push(arrayItem)
            }
          } else if (value.size !== 0 && value.arrayValues[value.size - 1].valueType === "string") {
            if (getYcyTwoFirstStringArray === 3) {
              window.ycyTypeThreeArraysValues.push({ valueName: `${window.gameName}的字符数组数值`, valueId: -1000, valueNum: 'Ajax插件的提示' });
              getYcyTwoFirstStringArray++;
            }
            if (value.persisType === 'const') {
              const arrayItem = { valueName: value.name, valueId: value.id, valueSize: value.size - 1, valueArray: {} }
              const itemV = window['_cArr'][value.name]
              value.arrayValues.forEach((value1, k) => {
                arrayItem['valueArray'][`${value.name}[${k}]`] = {
                  valueType: value1.valueType,
                  valueNum: itemV[k]
                }
              })
              window.ycyTypeThreeArraysValues.push(arrayItem)
            } else if (value.persisType === 'normal') {
              const arrayItem = { valueName: value.name, valueId: value.id, valueSize: value.size - 1, valueArray: {} }
              const itemV = window['_arr'][value.name]
              value.arrayValues.forEach((value1, k) => {
                arrayItem['valueArray'][`${value.name}[${k}]`] = {
                  valueType: value1.valueType,
                  valueNum: itemV[k]
                }
              })
              window.ycyTypeThreeArraysValues.push(arrayItem)
            }
          }
        })
        if (window.jc["数值检测"].length === 1) {
          window.jc["数值检测"].push({ valueName: '该作品无普通数值的检测', valueId: -999, valueNum: 'Ajax插件的提示' });
          if (window.ycyTypeThreeValueName.length !== 0 && window.ycyTypeThreeValueName[0].valueType !== undefined) {
            window.jc["数值检测"].push({ valueName: `${window.gameName}的全档普通数值`, valueId: -1002, valueNum: 'Ajax插件的提示' });
          }
        } else if (window.jc["数值检测"].length !== 1 && window.jc["数值检测"][1].isJc) {
          if (window.ycyTypeThreeValueName.length !== 0 && window.ycyTypeThreeValueName[0].valueType !== undefined) {
            window.jc["数值检测"].push({ valueName: `${window.gameName}的全档普通数值`, valueId: -1002, valueNum: 'Ajax插件的提示' });
          }
        }
        if (window.jc["数组数值检测"].length === 1) {
          window.jc["数组数值检测"].push({ valueName: '该作品无数组数值的检测', valueId: -999, valueNum: 'Ajax插件的提示' });
          if (window.ycyTypeThreeArraysValues.length !== 0 && window.ycyTypeThreeArraysValues[0].valueSize !== undefined) {
            window.jc["数组数值检测"].push({ valueName: `${window.gameName}的数组数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        } else if (window.cts && window.jc["数组数值检测"].length !== 1 && window.jc["数组数值检测"][1].isJc) {
          if (window.ycyTypeThreeArraysValues.length !== 0 && window.ycyTypeThreeArraysValues[0].valueSize !== undefined) {
            window.jc["数组数值检测"].push({ valueName: `${window.gameName}的数组数值`, valueId: -1001, valueNum: 'Ajax插件的提示' });
          }
        }
        window.ycyTypeThreeValueName = window.jc["数值检测"].concat(window.ycyTypeThreeValueName);
        window.ycyTypeThreeArraysValues = window.jc["数组数值检测"].concat(window.ycyTypeThreeArraysValues);
        if (window.ycyTypeThreeValueName.length !== 0) {
          const customEvent3 = new CustomEvent("pageScriptYcy", {
            detail: { value: window.ycyTypeThreeValueName }
          });
          window.dispatchEvent(customEvent3);
        }
        if (window.ycyTypeThreeArraysValues.length !== 0) {
          const customEvent3 = new CustomEvent("pageScriptYcyArray", {
            detail: { value: window.ycyTypeThreeArraysValues }
          });
          window.dispatchEvent(customEvent3);
        }
      } else if (window.isSy) {
        if (window.getPCon) {
          const playCont = window.getPCon()
          let payValues = [], values = [], indexValues = [], savedValues = [], stringValues = [], systemValues = [];
          if (!window.valueType || window.skipValueTy) {
            window.valueType = {}
            window.skipValueTy = true
            Object.keys(playCont).forEach(v => {
              const playArray = playCont[v];
              const playArrayLength = playArray.length;
              if (playArrayLength > 0) {
                const firstPlayArrayItem = playArray[0];
                if (playArrayLength === window.gameInfoSy.payValues.length && firstPlayArrayItem.uuid === window.gameInfoSy.payValues[0]?.uuid) {
                  payValues = playArray;
                  window.valueType.pv = v;
                } else if (playArrayLength === window.gameInfoSy.values.length && firstPlayArrayItem.uuid === window.gameInfoSy.values[0]?.uuid) {
                  values = playArray;
                  window.valueType.va = v;
                } else if (playArrayLength === window.gameInfoSy.indexValues.length && firstPlayArrayItem.uuid === window.gameInfoSy.indexValues[0]?.uuid) {
                  indexValues = playArray;
                  window.valueType.iv = v;
                } else if (playArrayLength === window.gameInfoSy.savedValues.length && firstPlayArrayItem.uuid === window.gameInfoSy.savedValues[0]?.uuid) {
                  savedValues = playArray;
                  window.valueType.sa = v;
                } else if (playArrayLength === window.gameInfoSy.stringValues.length && firstPlayArrayItem.uuid === window.gameInfoSy.stringValues[0]?.uuid) {
                  stringValues = playArray;
                  window.valueType.st = v;
                } else if (playArrayLength === window.gameInfoSy.systemValues.length && firstPlayArrayItem.uuid === window.gameInfoSy.systemValues[0]?.uuid) {
                  systemValues = playArray;
                  window.valueType.sy = v;
                }
              }
            });
          } else {
            payValues = playCont[window.valueType.pv], values = playCont[window.valueType.va],
              indexValues = playCont[window.valueType.iv], savedValues = playCont[window.valueType.sa],
              stringValues = playCont[window.valueType.st], systemValues = playCont[window.valueType.sy]
          }
          payValues.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.payValues[k].value = v.value
              } else {
                window.gameInfoSy.payValues[k].value = window.gameInfoSy.payValues[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.payValues[k].value = result
              } else {
                window.gameInfoSy.payValues[k].value = window.gameInfoSy.payValues[k].init.value
              }
            }
          })
          values.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.values[k].value = v.value
              } else {
                window.gameInfoSy.values[k].value = window.gameInfoSy.values[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.values[k].value = result
              } else {
                window.gameInfoSy.values[k].value = window.gameInfoSy.values[k].init.value
              }
            }
          })
          indexValues.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.indexValues[k].value = v.value
              } else {
                window.gameInfoSy.indexValues[k].value = window.gameInfoSy.indexValues[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.indexValues[k].value = result
              } else {
                window.gameInfoSy.indexValues[k].value = window.gameInfoSy.indexValues[k].init.value
              }
            }
          })
          savedValues.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.savedValues[k].value = v.value
              } else {
                window.gameInfoSy.savedValues[k].value = window.gameInfoSy.savedValues[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.savedValues[k].value = result
              } else {
                window.gameInfoSy.savedValues[k].value = window.gameInfoSy.savedValues[k].init.value
              }
            }
          })
          stringValues.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.stringValues[k].value = v.value
              } else {
                window.gameInfoSy.stringValues[k].value = window.gameInfoSy.stringValues[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.stringValues[k].value = result
              } else {
                window.gameInfoSy.stringValues[k].value = window.gameInfoSy.stringValues[k].init.value
              }
            }
          })
          systemValues.forEach((v, k) => {
            if (window.deV) {
              if (void 0 !== v.value) {
                v = window.deV(v)
                window.gameInfoSy.systemValues[k].value = v.value
              } else {
                window.gameInfoSy.systemValues[k].value = window.gameInfoSy.systemValues[k].init.value
              }
            } else {
              if (void 0 !== v.value) {
                const array = window.arrayDeV;
                // 分割字符串为单个字符的数组并除去第一个元素
                const chars = v.value.split('').slice(1);
                // 映射剩余字符到它们在array中的索引，转换为字符串，并拼接
                const result = chars.map(char => array.indexOf(char).toString()).join('');
                window.gameInfoSy.systemValues[k].value = result
              } else {
                window.gameInfoSy.systemValues[k].value = window.gameInfoSy.systemValues[k].init.value
              }
            }
          })
          parent.gameInfoSy = window.gameInfoSy
          const syValues = [window.gameInfoSy.payValues, window.gameInfoSy.values, window.gameInfoSy.savedValues, window.gameInfoSy.stringValues, window.gameInfoSy.systemValues, window.gameInfoSy.indexValues]
          const customEvent2 = new CustomEvent("syValues", {
            detail: { value: syValues }
          });
          window.dispatchEvent(customEvent2);
        }
      }
    }
  }
})
// //判断是否为json
function isValidNonEmptyJson(str) {
  if (typeof str !== 'string' || !str.trim()) {
    return false;
  }
  if (!Number.isNaN(Number(str)) && str.trim() === String(Number(str))) {
    return false;
  }
  try {
    const jsonData = JSON.parse(str);
    // 排除空数组和空对象
    return (
      (Array.isArray(jsonData) && jsonData.length > 0) ||
      (typeof jsonData === 'object' && jsonData !== null && Object.keys(jsonData).length > 0)
    );
  } catch {
    return false;
  }
}
//接收消息保存修改code
async function getIDData() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open('testEngine', 1);
    request.onupgradeneeded = function (event) {
      const db = event.target.result;
      const objectStore = db.createObjectStore('profiles', { keyPath: 'id' });
      const initialData = {
        id: 'test'
      };
      objectStore.add(initialData)
    };
    request.onsuccess = function (event) {
      const db = event.target.result;
      const transaction = db.transaction(['profiles'], 'readwrite');
      const objectStore = transaction.objectStore('profiles');
      const getRequest = objectStore.get('test');
      getRequest.onsuccess = function (event) {
        const existingData = event.target.result;
        resolve(existingData ? existingData : {});
      };
      getRequest.onerror = function (event) {
        resolve({});
      };
    };
    request.onerror = function (event) {
      resolve({});
    };
  });
}
async function upDateInD(data) {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open('testEngine');
    request.onsuccess = function (event) {
      const db = event.target.result;
      const transaction = db.transaction(['profiles'], 'readwrite');
      const objectStore = transaction.objectStore('profiles');
      const getRequest = objectStore.get('test');
      getRequest.onsuccess = function (event) {
        const existingData = event.target.result;
        let cc = {}
        if (existingData) {
          cc = existingData
          cc[data.key] = data.value
        } else {
          cc[data.key] = data.value
        }
        const updateRequest = objectStore.put(cc);
        updateRequest.onsuccess = function () {
          resolve(); // 更新成功
        };
        updateRequest.onerror = function (event) {
          reject(event.target.error); // 更新失败
        };
      };
      getRequest.onerror = function (event) {
        reject(event.target.error)
      };
    };
    request.onerror = function (event) {
      reject(event.target.error)
    };
  });
}
window.addEventListener('message', (event) => {
  if (typeof event.data == 'string' && isJSON(event.data)) {
    const message = JSON.parse(event.data);
    if (message.type === 'saveCode' && (window.userData || window.typeGame || window.isSy)) {
      const saveCode = message.value;
      const saveKey = saveCode.saveKey;
      const code = saveCode.code;
      upDateInD({ key: saveKey, value: code })
    }
  }
})
window.addEventListener('message', async (event) => {
  if (typeof event.data == 'string' && isJSON(event.data)) {
    const message = JSON.parse(event.data);
    if (message.type === 'jgConstVR') {
      if (window.AVG_GLOBAL_VIDEO_ID) {
        const tyGame = window.AVG_GLOBAL_CONFIG ? '1' : '2'
        const gId = localStorage.getItem('AVG_RECENT_PLAY_GAME_ID')
        const cVarList = localStorage.getItem('constV') ? JSON.parse(localStorage.getItem('constV')) : localStorage.getItem('constV');
        const carrList = localStorage.getItem('constArr') ? JSON.parse(localStorage.getItem('constArr')) : localStorage.getItem('constArr');
        const csrf_token = window['Cookies']['get']('TOKEN')
        if (cVarList && cVarList.valueList.length !== 0) {
          var xhr1 = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
          // 设置请求的URL和方法
          xhr1.open("PUT", `https://avg.163.com/avg-portal-api/game/${gId}/user/value/v1?csrf_token=${csrf_token}&em=${tyGame}`, true);
          // 设置请求头，指明发送的数据类型为JSON
          xhr1.setRequestHeader("Content-Type", "application/json");
          xhr1.onreadystatechange = function () { // 设置回调函数
            if (xhr1.readyState === 4) { // 请求完成
              if (xhr1.status === 200) {
                console.log("Success:", xhr1.responseText); // 请求成功时处理返回的数据
              } else {
                console.error("Error:", xhr1.status, xhr1.statusText); // 请求失败时处理错误
              }
            }
          };
          const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
          let dataSend = JSON.stringify(cVarList);
          let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
          // 准备发送的数据
          var sendData = JSON.stringify({
            "v": 1,
            "s": encryptData,
            "data": dataSend
          });
          xhr1.send(sendData); // 发送请求，带上数据
          window.successUpN = true
        }
        if (carrList && carrList.arrayValues.length !== 0) {
          var xhr1 = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
          // 设置请求的URL和方法
          xhr1.open("PUT", `https://avg.163.com/avg-portal-api/game/${gId}/user/array/v1?csrf_token=${csrf_token}&em=${tyGame}`, true);
          // 设置请求头，指明发送的数据类型为JSON
          xhr1.setRequestHeader("Content-Type", "application/json");
          xhr1.onreadystatechange = function () { // 设置回调函数
            if (xhr1.readyState === 4) { // 请求完成
              if (xhr1.status === 200) {
                console.log("Success:", xhr1.responseText); // 请求成功时处理返回的数据
              } else {
                console.error("Error:", xhr1.status, xhr1.statusText); // 请求失败时处理错误
              }
            }
          };
          const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
          let dataSend = JSON.stringify(carrList);
          let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
          // 准备发送的数据
          var sendData = JSON.stringify({
            "v": 1,
            "s": encryptData,
            "data": dataSend
          });
          xhr1.send(sendData); // 发送请求，带上数据
          window.successUpN = true
        }
        if (window.successUpN) {
          localStorage.removeItem('constV');
          localStorage.removeItem('constArr');
          alert("迁移全档数值成功，请重新刷新获取全档数值即可！")
        } else {
          alert("暂时不存在全档数值，原因如下是未先迁移存档或者该作品不存在全档数值！")
        }
        localStorage.removeItem('isCgChange');
        localStorage.removeItem('isYcyChange');
      } else if (window.userData) {
        if (localStorage.getItem(`${gIndex}/${GloableData.getInstance().savekey}varsEx`)) {
          window.cloudProxy['upSaveExData']('normal', localStorage.getItem(`${gIndex}/${GloableData.getInstance().savekey}varsEx`),
            function () {
              tv.system.varsEx['isUpVarsExData'] = ![];
              localStorage.removeItem('isCgChange');
              localStorage.removeItem(`${gIndex}/${GloableData.getInstance().savekey}varsEx`)
            });
          alert("迁移二周目数值成功！")
        } else {
          alert("该作品没有二周目数值或者还没有迁移存档哦宝！")
        }
      }
      localStorage.removeItem('isCgChange');
      localStorage.removeItem('isYcyChange');
    } else if (message.type === 'removeLocalSave' && window.top === window.self) {
      let dbName = location.href.includes('www.66rpg.com') || location.href.includes('m.66rpg.com') ? 'cgStorage' : location.href.includes('www.3000.com') ? 'syStorage'
        : location.href.includes('avg.163.com') ? 'avgEngine' : ''
      if (dbName) {
        if (message.value[0] === 'duqu') {
          async function saveData(inDbName, storeName, data, key) {
            return new Promise((resolve, reject) => {
              const request = indexedDB.open(inDbName);
              request.onupgradeneeded = function (event) {
                const db = event.target.result;
                if (dbName === 'avgEngine') {
                  if (!db.objectStoreNames.contains('autoSave')) {
                    const aaa = db.createObjectStore('autoSave', { keyPath: inDbName === 'avgEngine' ? ['autoSaveKey'] : ['gameId', 'userId'] });
                    aaa.createIndex(inDbName === 'avgEngine' ? 'autoSaveKeyIndex' : 'gameUserIndex', inDbName === 'avgEngine' ? 'autoSaveKey' : ['gameId', 'userId'])
                  }
                  if (!db.objectStoreNames.contains('profiles')) {
                    const aaa = db.createObjectStore('profiles', { keyPath: ['gameId', 'userId'] });
                    aaa.createIndex('gameUserIndex', ['gameId', 'userId'])
                  }
                } else {
                  if (!db.objectStoreNames.contains('archive')) {
                    db.createObjectStore('archive', { keyPath: key });
                  }
                }
              };
              request.onsuccess = function (event) {
                const db = event.target.result;
                if (db.objectStoreNames.contains(storeName)) {
                  const transaction = db.transaction([storeName], 'readwrite');
                  const objectStore = transaction.objectStore(storeName);
                  data.forEach(sj => {
                    objectStore.put(sj);
                  })
                  transaction.oncomplete = function () {
                    db.close();
                    resolve()
                  };
                  transaction.onerror = function (event) {
                    console.error('Transaction failed:', event.target.error);
                    db.close();
                    reject(new Error('Transaction failed'));
                  };
                }
              };
              request.onerror = function (event) {
                resolve({});
              };
            });
          }
          async function getAllfiles(inDbName, storeName) {
            return new Promise((resolve, reject) => {
              const request = indexedDB.open(inDbName);
              request.onsuccess = function (event) {
                const db = event.target.result;
                if (db.objectStoreNames.contains(storeName)) {
                  const transaction = db.transaction([storeName], 'readonly');
                  const objectStore = transaction.objectStore(storeName);
                  const getRequest = objectStore.getAll()
                  getRequest.onsuccess = function (event) {
                    const existingData = event.target.result;
                    resolve(existingData);
                  };
                  getRequest.onerror = function (event) {
                    resolve([]);
                  };
                } else {
                  resolve([]);
                }
              };
              request.onerror = function (event) {
                resolve([]);
              };
            });
          }
          async function checkDbExist(a) {
            const allName = await indexedDB.databases()
            return allName.find(v => v.name === a)
          }
          if (message.value[1] === 1) {
            let inndbSave = {}
            if (location.href.includes('avg.163.com')) {
              let avgE = await checkDbExist('avgEngine')
              let avgJsE = await checkDbExist('avgJsEngine')
              if (avgE) {
                inndbSave['avgEngine'] = {}
                let autoSave = await getAllfiles('avgEngine', 'autoSave')
                if (autoSave.length !== 0) {
                  inndbSave['avgEngine']['autoSave'] = autoSave
                }
                let saveProfile = await getAllfiles('avgEngine', 'profiles')
                if (saveProfile.length !== 0) {
                  inndbSave['avgEngine']['profiles'] = saveProfile
                }
                let aa = localStorage.getItem('avg_game_data')
                if (aa) {
                  inndbSave['avg_game_data'] = JSON.parse(aa)
                }
              }
              if (avgJsE) {
                inndbSave['avgJsEngine'] = {}
                let autoSave = await getAllfiles('avgJsEngine', 'autoSave')
                if (autoSave.length !== 0) {
                  inndbSave['avgJsEngine']['autoSave'] = autoSave
                }
                let saveProfile = await getAllfiles('avgJsEngine', 'profiles')
                if (saveProfile.length !== 0) {
                  inndbSave['avgJsEngine']['profiles'] = saveProfile
                }
              }
            } else {
              let acc = await checkDbExist(dbName)
              if (acc) {
                inndbSave[dbName] = {}
                let autoSave = await getAllfiles(dbName, 'archive')
                if (autoSave.length !== 0) {
                  inndbSave[dbName]['archive'] = autoSave
                }
              }
            }
            const blob = new Blob([JSON.stringify(inndbSave, null, 2)], { type: 'text/plain' });
            /*a标签模拟下载文件*/
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = dbName === 'cgStorage' ? 'cg本地档.txt' : dbName === 'syStorage' ? 'sy本地档.txt' : 'ycy本地档.txt';
            link.click();
            URL.revokeObjectURL(link.href);
          } else {
            if (document.getElementById('uploadButton')) {
              alert('上传按钮已创建啦，直接去点击上传即可')
              return
            }
            const uploadButton = document.createElement("button");
            uploadButton.id = "uploadButton";
            uploadButton.innerText = "上传文件";
            uploadButton.style.position = "fixed";
            uploadButton.style.zIndex = "9999";
            uploadButton.style.top = "50%";
            uploadButton.style.left = "20px";
            uploadButton.style.transform = "translateY(-50%)";
            uploadButton.style.padding = "10px 20px";
            uploadButton.style.backgroundColor = "#4CAF50";
            uploadButton.style.color = "white";
            uploadButton.style.border = "none";
            uploadButton.style.borderRadius = "8px";
            uploadButton.style.boxShadow = "0 4px 6px rgba(0, 0, 0, 0.1)";
            uploadButton.style.cursor = "pointer";
            uploadButton.style.transition = "all 0.3s ease";
            uploadButton.onmouseover = () => {
              uploadButton.style.backgroundColor = "#45a049";
              uploadButton.style.boxShadow = "0 6px 8px rgba(0, 0, 0, 0.15)";
            };
            uploadButton.onmouseout = () => {
              uploadButton.style.backgroundColor = "#4CAF50";
              uploadButton.style.boxShadow = "0 4px 6px rgba(0, 0, 0, 0.1)";
            };
            // 创建隐藏的文件上传 input
            const fileInput = document.createElement("input");
            fileInput.type = "file";
            fileInput.style.display = "none";
            uploadButton.onclick = () => fileInput.click();
            // 添加文件选择监听
            fileInput.addEventListener("change", (event) => {
              const file = event.target.files[0];
              if (!file) return;
              const reader = new FileReader();
              reader.onload = async function (e) {
                const data = JSON.parse(e.target.result);
                if (data && typeof data === 'object') {
                  for (const key in data) {
                    if (data.hasOwnProperty(key)) {
                      if (key === 'avg_game_data') {
                        localStorage.setItem('avg_game_data', JSON.stringify(data[key]))
                        continue
                      }
                      for (const subKey in data[key]) {
                        if (data[key].hasOwnProperty(subKey)) {
                          let keyPath = key === 'avgEngine' ? subKey === 'autoSave' ? ['autoSaveKey'] : ['gameId', 'userId'] :
                            key === 'avgJsEngine' ? ['gameId', 'userId'] : 'id'
                          await saveData(key, subKey, data[key][subKey], keyPath)
                        }
                      }
                    }
                  }
                }
                alert('上传成功')
                fileInput.value = '';
              };
              reader.onerror = function () {
                alert('读取失败，请重试')
                fileInput.value = '';
              };
              reader.readAsText(file); // 读取文件为文本
            });
            // 将按钮添加到页面
            document.body.appendChild(uploadButton);
          }
        } else if (message.value[0] === 'all') {
          async function deleteSave(inDbName, storeName, dbKey) {
            return new Promise((resolve, reject) => {
              const request = indexedDB.open(inDbName);
              request.onsuccess = function (event) {
                const db = event.target.result;
                const transaction = db.transaction([storeName], 'readwrite');
                const objectStore = transaction.objectStore(storeName);
                objectStore.delete(dbKey);
                transaction.oncomplete = function () {
                  alert('删除成功')
                  db.close()
                  resolve(true);
                };
                transaction.onerror = function (event) {
                  alert('删除失败:', event.target.error);
                  db.close()
                  resolve(false);
                };
              };
              request.onerror = function (event) {
                alert('删除失败:', event.target.error);
                db.close()
                resolve(false);
              };
            });
          }
          if (dbName === 'avgEngine') {
            let iframe = document.getElementById('avgGamePlayer')
            if (iframe) {
              let gl = iframe.contentWindow
              deleteSave(gl.typeGame === '1' ? 'avgEngine' : 'avgJsEngine', 'profiles', [gl.typeGame === '1' ? String(gl.gameId) : gl.gameId, gl['Cookies']['get']('AVG_LOGIN_USER_ID')])
            }
          } else if (dbName === 'cgStorage') {
            let iframe = document.getElementById('gameMainBox'), gl = window
            if (iframe) {
              gl = iframe.contentWindow
            }
            deleteSave(dbName, 'archive', gl.guid)
            if (gl.localSaveObjext) {
              gl.localSaveObjext = {}
            }
          } else {
            deleteSave(dbName, 'archive', parent.ueGame.gameUuid)
            let iframe = document.getElementById('h5video'), gl = window
            if (iframe) {
              gl = iframe.contentWindow
            }
            if (gl.localSaveObjext) {
              gl.localSaveObjext = {}
            }
            rFun(190).i(Array(15).fill(null))
          }
        } else if (message.value[0] === 'one') {
          async function removeFile(inDbName, storeName, dbKey, idArray) {
            return new Promise((resolve, reject) => {
              const request = indexedDB.open(inDbName);
              request.onsuccess = function (event) {
                const db = event.target.result;
                const transaction = db.transaction([storeName], 'readwrite');
                const objectStore = transaction.objectStore(storeName);
                const getRequest = objectStore.get(dbKey);
                getRequest.onsuccess = function (event) {
                  const existingData = event.target.result;
                  if (existingData) {
                    if (dbName === 'avgEngine') {
                      let iframe = document.getElementById('avgGamePlayer')
                      if (iframe) {
                        let gl = iframe.contentWindow
                        let cc = gl['Cookies']['get']('AVG_LOGIN_USER_ID')
                        if (gl.typeGame === '1') {
                          let aa = localStorage.getItem('avg_game_data')
                          if (aa) {
                            let bb = JSON.parse(aa)
                            if (bb[gl.gameId] && bb[gl.gameId][cc]) {
                              bb[gl.gameId][cc].forEach((item, index) => {
                                if (item.id === idArray) {
                                  bb[gl.gameId][cc].splice(index, 1);
                                }
                              });
                            }
                          }
                        }
                      }
                    } else if (dbName === 'cgStorage') {
                      deleteSave(dbName, 'archive', guid)
                    } else {
                      deleteSave(dbName, 'archive', parent.ueGame.gameUuid)
                    }
                    const updateRequest = objectStore.put(existingData);
                    updateRequest.onsuccess = function () {
                      resolve(); // 更新成功
                    };
                    updateRequest.onerror = function (event) {
                      resolve(); // 更新失败
                    };
                  } else {
                    resolve();
                  }
                };
                getRequest.onerror = function (event) {
                  resolve();
                };
              };
              request.onerror = function (event) {
                resolve();
              };
            });
          }
        }
      }
    }
  }
})

if (/https:\/\/www\.66rpg\.com\/game\/\d+/.test(location.href) || /https:\/\/www\.66rpg\.com\/h5\/\d+/.test(location.href) || /https:\/\/m\.66rpg\.com\/h5\/\d+/.test(location.href)) {
  function getBGM() {
    const bgmA = Object.keys(fileList).filter(v => v.includes('audio/bgm/')).map(key => ({
      bgmName: fileList[key].fileName.replace('audio/bgm/', ''),
      bgmUrl: fileList[key].url()
    }));
    if (bgmA.length !== 0) {
      const customEvent = new CustomEvent("cgBGM", {
        detail: { value: bgmA }
      });
      window.dispatchEvent(customEvent);
    }
  }
  async function getAllS(a1, getExV, getV) {
    if (tv.data.storyMap) {
      window.sortedArrayPlot = []
      tv.data.storyMap.forEach(v => {
        tv.data.storyRead.cursor = v.cursor
        const c = new DStory(tv.data.storyRead)
        tv.data.stories[v.id] = c
        if (c.events.length !== 0) {
          window.sortedArrayPlot.push({ plotName: c.Name, plotId: c.ID })
        }
      })
      const customEvent2 = new CustomEvent("cgPlotArray", {
        detail: { value: window.sortedArrayPlot }
      });
      window.dispatchEvent(customEvent2);
    } else {
      let ac = new Set();
      Object.keys(fileList).forEach(v => {
        if (v.includes('game')) {
          const mat = v.match(/game(\d+).bin/);
          if (mat) {
            ac.add(mat[1])
          }
        }
      });
      let zcc = [...ac];
      let completedCount = 0;
      const delayTime = zcc.length < 2000 ? 2000 : 3000
      const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
      for (let i = 0; i < zcc.length; i++) {
        if (i > 0 && i % 200 === 0) {
          await delay(delayTime); // Pause for 2 seconds
        }
        let v = zcc[i]
        let id = parseInt(v);
        if (id !== 0) {
          let s = fileListFato(`game${v}.bin`)
          let a = tv.data;
          new ORead(s, function (e) {
            try {
              e['readInt32']();
              let n = new DStory(e);
              a['stories'][id] = n;
            } catch (e) {
              console.log('error:', e)
            }
            completedCount++;
            if (completedCount === zcc.length - 1) {
              const nowP = tv.data.stories.map((_, index) => index).filter(index => tv.data.stories[index] !== undefined);
              if (nowP.length === ac.size - 1) {
                window.sortedArrayPlot = []
                tv.data.stories.forEach(v => {
                  if (v.events.length !== 0) {
                    window.sortedArrayPlot.push({ plotName: v.Name, plotId: v.ID })
                  }
                })
                const customEvent2 = new CustomEvent("cgPlotArray", {
                  detail: { value: window.sortedArrayPlot }
                });
                window.dispatchEvent(customEvent2);
                getExV().then(result => {
                  getV(new Set([...a1, ...result]))
                })
              }
            }
          })
        }
      }
    }
  }
  function getGamebin(sendPanduan) {
    function saveCloudData() {
      const keys = Object.keys(window.cloudSaveOldShow);
      let index = 0, ismoa = false;
      function saveNext() {
        if (index >= keys.length) { return }
        const v = keys[index];
        cloudProxy.downSaveDataNew(function (data) {
          let clouda = JSON.parse(data.data.cloud_data)
          window.cloudSaveOld[v] = clouda
          window.cloudSaveOld[v].ts = data.data.last_save_time
          if ((clouda.PlayerBuyItem && clouda.PlayerBuyItem.items.length !== 0) ||
            (clouda.UserPurchaseInfo && clouda.UserPurchaseInfo.items.length !== 0) ||
            (clouda.timeMallData && clouda.timeMallData.length !== 0)) {
            if (clouda.PlayerBuyItem) clouda.PlayerBuyItem.items = [];
            if (clouda.UserPurchaseInfo) clouda.UserPurchaseInfo.items = [];
            if (clouda.timeMallData) clouda.timeMallData = [];
            if (!ismoa) {
              const customEvent56 = new CustomEvent("cgCloudShopNum", {
                detail: { value: true }
              });
              window.dispatchEvent(customEvent56);
              ismoa = true
            }
            const saveContent = { [v]: clouda };
            cloudProxy.upSaveCloudData(saveContent, () => {
              index++; // 更新索引，处理下一个
              saveNext(); // 递归调用
            });
          } else {
            index++; // 如果没有需要保存的内容，直接更新索引
            saveNext(); // 递归调用
          }
        }, undefined, v)
      }
      saveNext(); // 开始保存过程
    }
    function processGameBin(unitA) {
      window.cloudProxy.downSaveShowData(function () {
        window.cloudSaveOld = {}
        saveCloudData()
      })
      //解码ui工程
      tv.data.System.Cuis.forEach(v => {
        if (!v.isLoaded) {
          v.loadEventData()
        }
      })
      window.cgByteArray = unitA;
      const byteArray = unitA;
      const decoder = new TextDecoder('utf-8');
      const decodedString = decoder.decode(byteArray);
      const allMatchesSet = new Set();
      const matches = decodedString.match(/(?:二周目数值|二周目数值：|数值|数值：)?\[\d+(?:：|:).*?\]/g);//非捕获，性能略好
      //const matches = decodedString.match(/(二周目数值|二周目数值：|数值|数值：|)\[\d+(：|:)[^\]]+\]/g);//含捕获内容(二周目等等)，性能稍微差
      if (matches) {
        matches.forEach(match => {
          if (/(：\s+|:\s*)/g.test(match)) {
            match = match.replace(/(:|：)\s*/g, '：')
          }
          if (match.startsWith("数值：") || match.startsWith("数值")) {
            allMatchesSet.add(match.replace(/^数值(：|)/, ''));
          } else if (match.startsWith("二周目数值") && !match.startsWith("二周目数值：")) {
            allMatchesSet.add(match.replace(/^二周目数值/, '二周目数值：'));
          } else {
            allMatchesSet.add(match);
          }
        });
      }
      return allMatchesSet;
    }
    function getV(allMatchesArray) {
      allMatchesArray = [...allMatchesArray]
      const finalResult = [];
      const extractedValues = new Set();  // 用 Set 来提高查找效率
      window.allCgValues = [];
      window.allCgValuesId = new Set();
      window.allCgExValuesId = new Set();
      // 处理 allMatchesArray 并提取调整后的数据
      allMatchesArray.forEach(match => {
        // 提取原始数字并调整
        const matchRegex = /\[(\d+)(?:：|:)/;
        const originalNumber = parseInt(match.match(matchRegex)[1]);
        const adjustedNumber = originalNumber - 1;
        // 替换匹配中的数字
        const adjustedMatch = match.replace(matchRegex, `[${adjustedNumber}：`);
        // 提取 "二周目数值" 的值
        const extractedMatch = adjustedMatch.match(/(?:二周目数值：)(.+)/);
        if (extractedMatch) {
          extractedValues.add(extractedMatch[1]);  // 使用 Set 避免重复
        }
        finalResult.push({
          adjustedMatch,
          originalNumber
        });
      });
      window.extractedValues = Array.from(extractedValues);
      // 按照原始数字排序，并过滤已提取的值
      finalResult.sort((a, b) => a.originalNumber - b.originalNumber);
      const filteredFinalResult1 = finalResult.filter(item => !extractedValues.has(item.adjustedMatch));
      // 排序，确保 "二周目数值" 在后面
      const sortedArray = filteredFinalResult1.sort((a, b) => (b.adjustedMatch.includes('二周目数值') ? 1 : 0) - (a.adjustedMatch.includes('二周目数值') ? 1 : 0));
      // 遍历并填充 window.allCgValues
      sortedArray.forEach(element => {
        const matchArray = element.adjustedMatch.match(/\[(\d+)：(.*?)\]/);
        if (matchArray) {
          const key = parseInt(matchArray[1]);
          let valueName = element.adjustedMatch;
          if (matchArray[2].trim() === '') {
            valueName = valueName.replace(matchArray[0], `[${key}：无法查到名称]`);
          }
          let a = { valueName };
          if (element.adjustedMatch.includes('二周目数值')) {
            const valu = tv.system.varsEx.data[key] || 0;
            a.valueNum = valu;
            a.valueId = key;
            a.isEx = true;
            a.name = matchArray[2];
            window.allCgExValuesId.add(key);
          } else {
            a.valueNum = 0;
            a.valueId = key;
            a.isEx = false;
            a.name = matchArray[2];
            window.allCgValuesId.add(key);
          }
          window.allCgValues.push(a);
        }
      });
      // 派发事件
      if (window.allCgValues.length !== 0) {
        const customEvent1 = new CustomEvent("pageScriptCg", {
          detail: { value: window.allCgValues }
        });
        window.dispatchEvent(customEvent1);
      }
    }
    async function getExV() {
      let varExIF = new Set();
      const processEventBatch = async (events) => {
        for (const v of events) {
          let e;
          switch (v.Code) {
            case 200:
              if (v.Argv[0].includes('EX')) {
                let vaId = parseInt(v.Argv[0].split('|')[1]) + 1
                let b = v.Argv[5].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(vaId).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                if (b) b.forEach(match => { varExIF.add(match) })
              } else if (v.Argv[0].includes('FL')) {
                if (v.Argv[2] === '2') {
                  let vaId = parseInt(v.Argv[3]) + 1
                  let b = v.Argv[5].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(vaId).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                  if (b) b.forEach(match => { varExIF.add(match) })
                }
              }
              break;
            case 217:
              const maxI = parseInt(v.Argv[3])
              let startI = 4
              for (let i = 0; i < maxI; i++) {
                const vId = v.Argv[startI + i].split('&')
                if (vId[0].includes('EX')) {
                  let vaId = parseInt(vId[0].split('|')[1]) + 1
                  let b = vId[5].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(vaId).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                  if (b) b.forEach(match => { varExIF.add(match) })
                } else if (vId[0].includes('FL')) {
                  if (vId[2] === '2') {
                    let vaId = parseInt(vId[3]) + 1
                    let b = vId[5].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(vaId).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                    if (b) b.forEach(match => { varExIF.add(match) })
                  }
                }
              }
              break;
            case 207:
              e = convertValueOperationData(v.Argv)
              if (e.isExValue) {
                let b = v.Argv[4].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(e.index + 1).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                if (b) b.forEach(match => { varExIF.add(match) })
              }
              if (e.firstValueData) {
                if (e.firstValueData.type === 3) {
                  let b = v.Argv[4].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(e.firstValueData.idOrValue + 1).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                  if (b) b.forEach(match => { varExIF.add(match) })
                }
              }
              if (e.secondValueData) {
                if (e.secondValueData.type === 3) {
                  let b = v.Argv[4].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(e.secondValueData.idOrValue + 1).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                  if (b) b.forEach(match => { varExIF.add(match) })
                }
              }
              break;
            case 213:
              e = convertValueOperationData(v.Argv, true)
              if (e.isExValue) {
                let b = v.Argv[4].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(e.index + 1).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                if (b) b.forEach(match => { varExIF.add(match) })
              }
              if (e.firstValueData) {
                if (e.firstValueData.type === 3) {
                  let b = v.Argv[4].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(e.firstValueData.idOrValue + 1).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                  if (b) b.forEach(match => { varExIF.add(match) })
                }
              }
              if (e.secondValueData) {
                if (e.secondValueData.type === 3) {
                  let b = v.Argv[4].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(e.secondValueData.idOrValue + 1).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                  if (b) b.forEach(match => { varExIF.add(match) })
                }
              }
              break;
            case 216:
              e = convertValueOperationData(v.Argv)
              if (e.isExValue) {
                let b = v.Argv[4].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(e.index + 1).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                if (b) b.forEach(match => { varExIF.add(match) })
              }
              if (e.firstValueData) {
                if (e.firstValueData.type === 3) {
                  let b = v.Argv[4].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(e.firstValueData.idOrValue + 1).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                  if (b) b.forEach(match => { varExIF.add(match) })
                }
              }
              if (e.secondValueData) {
                if (e.secondValueData.type === 3) {
                  let b = v.Argv[4].match(new RegExp(`(?:二周目数值|二周目数值：|数值|数值：)?\\[${String(e.secondValueData.idOrValue + 1).padStart(3, '0')}(?:：|:).*?\\]`, 'g'))
                  if (b) b.forEach(match => { varExIF.add(match) })
                }
              }
              break
            default:
              break
          }
        }
      };
      // 批量处理函数，采用并行处理
      const processBatch = async () => {
        const batches = [];
        const maxBatchSize = 200;  // 每批处理200个事件
        const maxConcurrency = 5;  // 最大并发数，避免一次性启动过多任务
        // 将所有事件按批次分组
        tv.data.stories.forEach(v1 => {
          if (v1 && v1.events.length !== 0) {
            for (let i = 0; i < v1.events.length; i += maxBatchSize) {
              batches.push(v1.events.slice(i, i + maxBatchSize));
            }
          }
        });
        tv.data.System.Cuis.forEach(v => {
          if (v.loadEvent.length !== 0) {
            for (let i = 0; i < v.loadEvent.length; i += maxBatchSize) {
              batches.push(v.loadEvent.slice(i, i + maxBatchSize));
            }
          }
          if (v.afterEvent.length !== 0) {
            for (let i = 0; i < v.afterEvent.length; i += maxBatchSize) {
              batches.push(v.afterEvent.slice(i, i + maxBatchSize));
            }
          }
          if (v.controls.length !== 0) {
            v.controls.forEach(v1 => {
              if (v1.event.length !== 0) {
                for (let i = 0; i < v1.event.length; i += maxBatchSize) {
                  batches.push(v1.event.slice(i, i + maxBatchSize));
                }
              }
            });
          }
        });
        // 批次分组完成后，限制并发数处理每个批次
        const processInBatches = async () => {
          const queue = [...batches];
          const activeTasks = [];
          const processNextBatch = async () => {
            if (queue.length === 0) return;  // 队列空了
            const batch = queue.shift();  // 从队列中取出下一个批次
            const task = processEventBatch(batch);
            activeTasks.push(task);
            // 等待任务完成后，再从活跃任务中移除
            task.finally(() => {
              const index = activeTasks.indexOf(task);
              if (index !== -1) activeTasks.splice(index, 1);
              processNextBatch();  // 继续处理下一个批次
            });
            // 如果同时运行的任务数超过最大并发数，等待直到有任务完成
            if (activeTasks.length >= maxConcurrency) {
              await Promise.race(activeTasks);  // 等待最先完成的任务
            }
          };
          // 启动第一个批次处理
          await processNextBatch();
        };
        await processInBatches();
      };
      // 处理批次
      await processBatch();
      // 数据处理完毕后进行一些后处理
      let a = [...varExIF], b = new Set();
      a.forEach(match => {
        if (/(：\s+|:\s*)/g.test(match)) {
          match = match.replace(/(:|：)\s*/g, '：');
        }
        if (match.startsWith("数值：") || match.startsWith("数值")) {
          b.add(match.replace(/^数值(：|)/, '二周目数值：'));
        } else if (match.startsWith("二周目数值") && !match.startsWith("二周目数值：")) {
          b.add(match.replace(/^二周目数值/, '二周目数值：'));
        } else if (!match.startsWith("二周目数值：")) {
          b.add('二周目数值：' + match);
        } else {
          b.add(match);
        }
      });
      return b;
    }
    if (window.panduan) {
      if (window.getAllGameB) {
        getAllS()
        const a = processGameBin(window.oldGameBin)
        getExV().then(result => {
          getV(new Set([...a, ...result]))
        })
      } else {
        const url = fileList['data/game.bin'].url();
        fetch(url)
          .then(response => {
            if (!response.ok) {
              throw new Error(`请求失败，状态码： ${response.status}`);
            }

            return response.arrayBuffer();
          })
          .then(buffer => {
            // 将整个文件的二进制数据存储到全局变量 window.xx
            let aO = new Uint8Array(buffer);
            let a = processGameBin(aO)
            let newGameBin = new OByteReader(aO)
            newGameBin.convertToString(newGameBin.read(6))
            let dataStory
            try {
              dataStory = new DMain(newGameBin, false)
            } catch (error) {
              return getAllS(a, getExV, getV)
            }
            if (dataStory.storyRead.cursor >= 0) {
              window.sortedArrayPlot = []
              dataStory.storyMap.forEach(v => {
                dataStory.storyRead.cursor = v.cursor
                const c = new DStory(dataStory.storyRead)
                dataStory.stories[v.id] = c
                if (c.events.length !== 0) {
                  window.sortedArrayPlot.push({ plotName: c.Name, plotId: c.ID })
                }
              })
              tv.data.stories = dataStory.stories
              const customEvent2 = new CustomEvent("cgPlotArray", {
                detail: { value: window.sortedArrayPlot }
              });
              window.dispatchEvent(customEvent2);
              getExV().then(result => {
                getV(new Set([...a, ...result]))
              })
            } else {
              getAllS(a, getExV, getV)
            }
          })
          .catch(error => {
            console.error('文件下载失败:', error);
          });
      }
    }
  }
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'modifyCgValue' && window.tv) {
        const modifyCgValue = message.value;
        let allowUpdataVarEx = false;
        modifyCgValue.forEach(element => {
          const key = element.content[1];;
          const value = parseInt(element.value, 10);
          if (element.content[0].includes('二周目数值')) {
            allowUpdataVarEx = true;
            if (window.tv !== undefined && window.tv.system !== undefined) {
              window.tv.system.varsEx.data[key] = a(value);
            }
          } else {
            if (window.tv !== undefined && window.tv.system !== undefined) {
              window.tv.system.vars.data[key] = a(value);
            }
          }
        });
        if (allowUpdataVarEx && window.cloudProxy && window.cloudProxy['upSaveExData']) {
          let saveValue = `${tv.system.varsEx.data.filter(element => element !== undefined).length}|`;
          tv.system.varsEx.data.forEach((value1, key) => { saveValue += `${key}|${GloableData.getInstance().getEncryptionInt(value1)}|` })
          const saveDate = Math['ceil'](Date["now"]() / 0x3e8);
          const savePlatForm = userData.platform;
          const cgVarEx = `varsEx=${saveValue}#time=${saveDate}#limit=1#new=true#platform=${savePlatForm}`;
          window.cloudProxy['upSaveExData']('normal', cgVarEx, function () { tv.system.varsEx['isUpVarsExData'] = ![]; });
        }
        if (tv.scene instanceof SCUI) {
          tv.scene.refresh()
        }
        function a(value) {
          if (value >= 2147483648 || value < -2147483648) {
            if (value >= max - 1000000000000) {
              value = max - 1000000000000
            }
            return value;
          }
          return value ^ (window.GloableData['getInstance']()['memKey']);
        }
      }
    }
  });
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'downloadCgValue' && window.userData) {
        const switchOn = message.value
        function getDownVal(sortArray1, type) {
          let xiugai = [];
          let xiugai1 = [];
          const firstIndex = sortArray1.findIndex(item => item.isEx);
          const lastIndex = sortArray1.findLastIndex(item => item.isEx)
          sortArray1.forEach(element => {
            const key = element.valueId;
            let codeSnippet;
            if (element.isEx) {
              const valu = window.tv && tv.system && tv.system.varsEx ? tv.system.varsEx.data[key] ? tv.system.varsEx.data[key] : 0 : 0
              codeSnippet = `tv.system.varsEx.data[${key}]=a(${valu})`;
            } else {
              const valu = window.tv && tv.system && tv.system.vars ? tv.system.vars.data[key] ? tv.system.vars.data[key] : 0 : 0
              codeSnippet = `tv.system.vars.data[${key}]=a(${valu})`;
            }
            // 添加 "中文数值："，并使其固定在第 51 个位置
            element.name.trim() !== '' ? codeSnippet += ' '.padEnd(50 - codeSnippet.length) + '/*' + element.name + '*/' : '';
            xiugai.push(codeSnippet);
          });
          xiugai.forEach((match, index) => {
            if (firstIndex === -1 && index === 0) {
              xiugai[index] = `/****数字都已经经过减一处理，修改代码时直接使用对应数字，不需要再减一****/\n\n/*修改不要忘了在代码最前面加这个哦*/\n\nlet a=function(value) {return value ^ (GloableData['getInstance']()['memKey']);}\n\n/****普通数值****/\n${match}\n`;
            } else if (index === firstIndex) {
              if (firstIndex === lastIndex) {
                xiugai[index] = `/****数字都已经经过减一处理，修改代码时直接使用对应数字，不需要再减一****/\n\n/*修改不要忘了在代码最前面加这个哦*/\n\nlet a=function(value) {return value ^ (GloableData['getInstance']()['memKey']);}\n\n/****二周目数值****/\n${match}\ntv.system.varsEx.saveExData()\n\n\n/****普通数值****/\n`;
              } else {
                xiugai[index] = `/****数字都已经经过减一处理，修改代码时直接使用对应数字，不需要再减一****/\n\n/*修改不要忘了在代码最前面加这个哦*/\n\nlet a=function(value) {return value ^ (GloableData['getInstance']()['memKey']);}\n\n/****二周目数值****/\n${match}\n`;
              }
            } else if (index > firstIndex && index < lastIndex) {
              xiugai[index] = `${match}\n`;
            } else if (index === lastIndex) {
              xiugai[index] = `${match}\ntv.system.varsEx.saveExData()\n\n\n\n/****普通数值****/\n`;
            } else {
              xiugai[index] = `${match}\n`;
            }
          });
          window.downloadCgValues = xiugai;
          //注释中文数值
          sortArray1.forEach(element => {
            const key = element.valueId;
            let codeSnippet;
            if (element.isEx) {
              const valu = window.tv && tv.system && tv.system.varsEx ? tv.system.varsEx.data[key] ? tv.system.varsEx.data[key] : 0 : 0
              codeSnippet = type ? `tv.system.varsEx.data[${key}]=${valu}` : `tv.system.varsEx.setVar(${key},${valu})        ${element.name.trim() !== '' ? `/*${element.name}*/` : ''}`;
            } else {
              const valu = window.tv && tv.system && tv.system.vars ? tv.system.vars.data[key] ? tv.system.vars.data[key] : 0 : 0
              codeSnippet = type ? `tv.system.vars.data[${key}]=${valu}` : `tv.system.vars.setVar(${key},${valu})        ${element.name.trim() !== '' ? `/*${element.name}*/` : ''}`;
            }
            // 添加 "中文数值："，并使其固定在第 51 个位置
            type ? element.name.trim() !== '' ? codeSnippet += ' '.padEnd(50 - codeSnippet.length) + '/*' + element.name + '*/' : '' : '';
            xiugai1.push(codeSnippet);
          });
          xiugai1.forEach((match, index) => {
            if (firstIndex === -1 && index === 0) {
              xiugai1[index] = `/****数字都已经经过减一处理，修改代码时直接使用对应数字，不需要再减一****/\n\n/****普通数值****/\n${match}\n`;
            } else if (index === firstIndex) {
              if (firstIndex === lastIndex) {
                xiugai1[index] = `/****数字都已经经过减一处理，修改代码时直接使用对应数字，不需要再减一****/\n\n/****二周目数值****/\n${match}\ntv.system.varsEx.saveExData()\n\n\n/****普通数值****/\n`;
              } else {
                xiugai1[index] = `/****数字都已经经过减一处理，修改代码时直接使用对应数字，不需要再减一****/\n\n/****二周目数值****/\n${match}\n`;
              }
            } else if (index > firstIndex && index < lastIndex) {
              xiugai1[index] = `${match}\n`;
            } else if (index === lastIndex) {
              xiugai1[index] = `${match}\ntv.system.varsEx.saveExData()\n\n\n\n/****普通数值****/\n`;
            } else {
              xiugai1[index] = `${match}\n`;
            }
          });
          window.downloadZsCgValues = xiugai1;
        }
        window.allCgValues ? getDownVal(window.allCgValues, switchOn === 1 ? window.confirm('生成哪种格式呢？\n格式一:tv.system.vars.setVar(0,100)，点击取消\n格式二:tv.system.vars.data[0]=100，点击确定') : false) : ''
        if (switchOn === 2 && window.userData?.uid !== undefined) {
          if (window.downloadCgValues) {
            const blob = new Blob([window.downloadCgValues.join('')], { type: 'text/plain' });
            /*a标签模拟下载文件*/
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = tv.data.Headr.title + '.txt';
            link.click();
            URL.revokeObjectURL(link.href);
          } else {
            getGamebin()
            getDownVal(window.allCgValues)
            const intervalId = setInterval(() => {
              if (window.downloadCgValues) {
                const blob = new Blob([window.downloadCgValues.join('')], { type: 'text/plain' });
                /*a标签模拟下载文件*/
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = tv.data.Headr.title + '.txt';
                link.click();
                URL.revokeObjectURL(link.href);
                clearInterval(intervalId);
              }
            }, 100);
          }
        } else if (switchOn === 1 && window.userData?.uid !== undefined) {
          if (window.downloadZsCgValues) {
            const blob = new Blob([window.downloadZsCgValues.join('')], { type: 'text/plain' });
            /*a标签模拟下载文件*/
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = tv.data.Headr.title + '.txt';
            link.click();
            URL.revokeObjectURL(link.href);
          } else {
            getGamebin()
            getDownVal(window.allCgValues)
            const intervalId = setInterval(() => {
              if (window.downloadZsCgValues) {
                const blob = new Blob([window.downloadZsCgValues.join('')], { type: 'text/plain' });
                /*a标签模拟下载文件*/
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = tv.data.Headr.title + '.txt';
                link.click();
                URL.revokeObjectURL(link.href);
                clearInterval(intervalId);
              }
            }, 100);
          }
        }
      } else if (message.type === 'downloadCgGameBin' && window.userData) {
        const switchOn = message.value
        if (switchOn && window.userData?.uid !== undefined) {
          function getB(byteArray) {
            const decoder = new TextDecoder('utf-8');
            const link = document.createElement('a');
            link.download = tv.data.Headr.title + '.bin';

            if (byteArray.length > 40 * 1024 * 1024) {
              const chunkSize = 10 * 1024 * 1024; // 每次处理的字节数
              const blobParts = [];
              let offset = 0;

              function processChunk(startOffset) {
                return new Promise((resolve, reject) => {
                  const chunk = byteArray.slice(startOffset, startOffset + chunkSize);
                  let decodedChunk = decoder.decode(chunk, { stream: true }); // 使用流模式解码以节省内存
                  decodedChunk = decodedChunk.replace(/\x00/g, ' '); // 替换掉\x00字符
                  blobParts.push(new TextEncoder().encode(decodedChunk)); // 将替换后的字符串重新编码为字节数组

                  // 如果还有剩余数据，递归处理下一个数据块
                  if (startOffset + chunkSize < byteArray.length) {
                    setTimeout(() => {
                      processChunk(startOffset + chunkSize).then(resolve, reject);
                    }, 0);
                  } else {
                    // 处理最后一块数据
                    decoder.decode(); // 结束流模式解码
                    resolve();
                  }
                });
              }

              // 开始处理第一个数据块
              processChunk(offset)
                .then(() => {
                  // 所有数据块处理完成后创建Blob并下载
                  const concatenatedChunks = new Uint8Array(blobParts.reduce((acc, curr) => {
                    const combined = new Uint8Array(acc.length + curr.length);
                    combined.set(acc);
                    combined.set(curr, acc.length);
                    return combined;
                  }, new Uint8Array(0)));
                  const blob = new Blob([concatenatedChunks], { type: 'text/plain' });
                  link.href = URL.createObjectURL(blob);
                  link.click();
                  URL.revokeObjectURL(link.href);
                })
                .catch(error => {
                  console.error('解析出错:', error);
                });

            } else {
              let decodedString = decoder.decode(byteArray);
              decodedString = decodedString.replace(/\x00/g, ' ');
              const blob = new Blob([decodedString], { type: 'text/plain' });
              link.href = URL.createObjectURL(blob);
              link.click();
              URL.revokeObjectURL(link.href);
            }
          }
          if (window.cgByteArray) {
            getB(window.cgByteArray)
          } else {
            getGamebin()
            const intervalId = setInterval(() => {
              if (window.cgByteArray) {
                getB(window.cgByteArray)
                clearInterval(intervalId);
              }
            }, 100);
          }
        }
      }
    }
  });
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'mallGetAllItem' && window.userData) {
        const switchOn = message.switchOn
        if (switchOn && window.userData?.uid !== undefined && tv.scene.getAllItem && tv.scene.init) {
          tv.scene.getAllItem();
          tv.scene.init();
        } else if (switchOn && window.userData?.uid !== undefined && tv.scene.getAllItem === undefined && tv.scene.mallItems === undefined) {
          alert("请进入商城后再点击此按钮！")
        }
      } else if (message.type === 'cgTimeMall' && window.userData) {
        const cgTimeMallNum = parseInt(message.value.num, 10);
        const addMall = message.value.addMall;
        if (window.userData !== undefined && mallProxy) {
          //领取限时商城
          if (tv.gameTimeMall.goodList.goods.length === 1 && tv.gameTimeMall.goodList.goods[0].sell_status === -2 && tv.gameTimeMall.goodList.goods[0].prop_uptime === 0) {
            addMall ? alert(`<${tv.data.Headr.title}>没有限时商城哦！为您领取商城中......`) : alert(`<${tv.data.Headr.title}>没有限时商城哦！`);
          }
          tv.gameTimeMall.goodList.goods.forEach(v => {
            v.itemAttributes.forEach(v1 => {
              let originNum = tv.system.vars.getVar(v1.arrributeId);
              switch (v1.operator) {
                case 0: originNum = v1.varValue; break;
                case 1: originNum += v1.varValue * cgTimeMallNum; break;
                case 2: originNum -= v1.varValue * cgTimeMallNum; break;
                case 3: originNum *= v1.varValue * cgTimeMallNum; break;
                case 4: originNum /= v1.varValue * cgTimeMallNum; break;
                case 5: originNum %= v1.varValue * cgTimeMallNum; break;
              }
              tv.system.vars.setVar(v1.arrributeId, originNum);
            })
          })
          if (addMall) {
            const goods = tv.gameMallBin === null ? tv.gameNewMall.goodList.goods : tv.gameMallBin.items;
            goods.forEach(v => {
              v.itemAttributes.forEach(v1 => {
                let originNum = tv.system.vars.getVar(v1.arrributeId);
                switch (v1.operator) {
                  case 0: originNum = v1.varValue; break;
                  case 1: originNum += v1.varValue * cgTimeMallNum; break;
                  case 2: originNum -= v1.varValue * cgTimeMallNum; break;
                  case 3: originNum *= v1.varValue * cgTimeMallNum; break;
                  case 4: originNum /= v1.varValue * cgTimeMallNum; break;
                  case 5: originNum %= v1.varValue * cgTimeMallNum; break;
                }
                tv.system.vars.setVar(v1.arrributeId, originNum);
              })
            })
          }
        }
      }
    }
  });
  //橙光迁移存档逻辑
  function xorEncrypt(inputString, key) {
    let result = '';
    for (let i = 0; i < inputString.length; i++) {
      let charCode = inputString.charCodeAt(i) ^ key.charCodeAt(i % key.length);
      result += String.fromCharCode(charCode);
    }
    return result;
  }
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'replaceCg' && window.userData) {
        const switchOn = message.switchOn;
        const oldId = switchOn.oldId;
        const newId = switchOn.newId;
        if (switchOn && window.userData !== undefined) {
          const saveKeyOld = `save${window.guid}${oldId}`;
          const saveKeyNew = `save${window.guid}${newId}`;
          const SaveFileIndexOld = `${saveKeyOld}SaveFileIndex`;
          const SaveFileIndexNew = `${saveKeyNew}SaveFileIndex`;
          const SaveFileIndexLOld = `${saveKeyOld}SaveFileIndexLocal`;
          const SaveFileIndexLNew = `${saveKeyNew}SaveFileIndexLocal`;
          const iconOld = `${saveKeyOld}icon`;
          const iconNew = `${saveKeyNew}icon`;
          const acx = saveKeyOld === GloableData.getInstance().savekey
          let newL = localStorage
          let newK = localStorage[saveKeyOld + (window.parseInt(newL.getItem(SaveFileIndexLOld)) + 1)] ? localStorage : window.localSaveObjext
          let autoSave = newL.getItem(`${saveKeyOld}-100`)
          if (!newL.getItem(SaveFileIndexLOld) && !autoSave) {
            alert("还没在本地存档呢，快去存档吧！")
          } else {
            //const saveNum = Array(parseInt(localStorage.getItem(SaveFileIndexOld).split("|")[2]) + 1).fill().map((_, idx) => idx + 1);
            if (newL.getItem(SaveFileIndexOld)) { oldLocalStorage.setItem(SaveFileIndexNew, newL.getItem(SaveFileIndexOld)); }
            if (newL.getItem(SaveFileIndexLOld)) { oldLocalStorage.setItem(SaveFileIndexLNew, newL.getItem(SaveFileIndexLOld)) };
            if (newL.getItem(iconOld)) { oldLocalStorage.setItem(iconNew, newL.getItem(iconOld)) };
            Object.keys(newK).forEach(key => {
              if (key.includes(saveKeyOld)) {
                let amv = key.replace(saveKeyOld, '')
                if (!isNaN(amv) && !isNaN(parseFloat(amv))) {
                  const varOld = JSON.parse(newL.getItem(key))
                  if (varOld.PlayerBuyItem) {
                    varOld.PlayerBuyItem.items = []
                  }
                  if (varOld.UserPurchaseInfo) {
                    varOld.UserPurchaseInfo.items = []
                  }
                  if (varOld.timeMallData) {
                    varOld.timeMallData = []
                  }
                  let vars = varOld.SystemDefine.Vars.split('|');
                  let first = `${vars.shift()}|`;
                  while (vars.length > 1) {
                    const popOne = vars.shift();
                    first += `${popOne}|`;
                    const popTwo = vars.shift();
                    const ePop = xorEncrypt(popTwo, `${newId}${guid}${parseInt(amv) - 1}`)
                    first += `${ePop}|`
                  }
                  varOld.SystemDefine.eVars = first;
                  const varNew = JSON.stringify(varOld);
                  oldLocalStorage.setItem(saveKeyNew + amv, varNew);
                }
              }
            })
            if (autoSave) {
              const varOld = JSON.parse(autoSave)
              if (varOld.PlayerBuyItem) {
                varOld.PlayerBuyItem.items = []
              }
              if (varOld.UserPurchaseInfo) {
                varOld.UserPurchaseInfo.items = []
              }
              if (varOld.timeMallData) {
                varOld.timeMallData = []
              }
              let vars = varOld.SystemDefine.Vars.split('|');
              let first = `${vars.shift()}|`;
              while (vars.length > 1) {
                const popOne = vars.shift();
                first += `${popOne}|`;
                const popTwo = vars.shift();
                const ePop = xorEncrypt(popTwo, `${newId}${guid}${parseInt(amv) - 1}`)
                first += `${ePop}|`
              }
              varOld.SystemDefine.eVars = first;
              const varNew = JSON.stringify(varOld);
              oldLocalStorage.setItem(`${saveKeyNew}-100`, varNew)
            }
            //获取二周目
            if (acx) {
              if (tv.system.varsEx.data.length !== 0) {
                const saveKey = `${gIndex}/${saveKeyNew}varsEx`;
                let saveValue = `${tv.system.varsEx.data.filter(element => element !== undefined).length}|`;
                tv.system.varsEx.data.forEach((value1, key) => { saveValue += `${key}|${GloableData.getInstance().getEncryptionInt(value1)}|` })
                const saveDate = Math['ceil'](Date["now"]() / 0x3e8);
                const savePlatForm = userData.platform;
                const cgVarEx = `varsEx=${saveValue}#time=${saveDate}#limit=1#new=true#platform=${savePlatForm}`;
                oldLocalStorage.setItem(saveKey, cgVarEx);
              }
            } else {
              let varExOldKey = `${gIndex}/${saveKeyOld}varsEx`, varExNewKey = `${gIndex}/${saveKeyNew}varsEx`
              let varExOldValue = newL.getItem(varExOldKey);
              if (varExOldValue) {
                oldLocalStorage.setItem(varExNewKey, varExOldValue);
              }
            }
            alert("存档迁移成功，快去新号读档玩耍吧！")
          }
        }
      } else if (message.type === 'replaceCgConst' && window.userData) {
        const switchOn = message.switchOn;
        if (switchOn && window.userData !== undefined) {
          //上传二周目
          if (localStorage.getItem(`${gIndex}/${GloableData.getInstance().savekey}varsEx`)) {
            window.cloudProxy['upSaveExData']('normal', localStorage.getItem(`${gIndex}/${GloableData.getInstance().savekey}varsEx`),
              function () {
                tv.system.varsEx['isUpVarsExData'] = ![];
                localStorage.removeItem('isCgChange');
                localStorage.removeItem(`${gIndex}/${GloableData.getInstance().savekey}varsEx`)
              });
            alert("迁移二周目数值成功！")
          } else {
            alert("该作品没有二周目数值或者还没有迁移存档哦宝！")
          }
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'modifyCgAccumulation' && window.userData) {
        const modifyCgAccumulation = message.value;
        if (modifyCgAccumulation && window.userData !== undefined && userData.totalFlower !== undefined) {
          //修改累充
          userData.totalFlower = parseInt(modifyCgAccumulation, 10);
          GloableData.getInstance().userData.totalFlower = GloableData.getInstance().userData.realFlower =
            GloableData.getInstance().userData.freshFlower = parseInt(modifyCgAccumulation, 10);
        }
      } else if (message.type === 'cgAccumulationAdapt' && window.userData) {
        const cgAccumulationAdapt = message.value;
        if (cgAccumulationAdapt && window.userData && tv.gameNewMall) {
          let allH = 0;
          const goods = tv.gameMallBin === null ? tv.gameNewMall.goodList.goods : tv.gameMallBin.items;
          goods.forEach(v => {
            if (GloableData._instance.mallBuyItem[v.itemId]) {
              const price = v.itemPrice ^ GloableData._instance.memKey;
              const buyNum = GloableData._instance.mallBuyItem[v.itemId].max;
              allH += price * buyNum;
            }
          });
          if (allH !== 0) {
            userData.totalFlower = allH;
            userData.realFlower = allH;
            userData.freshFlower = allH;
            GloableData.getInstance().userData.totalFlower = GloableData.getInstance().userData.realFlower =
              GloableData.getInstance().userData.freshFlower = allH;
          }
        }
      }
    }
  })
  //代码修改橙光数值
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgCodeModify' && window.userData) {
        const cgCodeModify = message.value;
        let allowUpdataVarEx = false;
        if (window.tv && window.tv.system) {
          if (cgCodeModify.includes('tv.system.varsEx.data')) {
            allowUpdataVarEx = true;
          }
          function a(value) {
            if (value >= 2147483648 || value < -2147483648) {
              if (value >= max - 1000000000000) {
                value = max - 1000000000000
              }
              return value;
            }
            return value ^ (GloableData['getInstance']()['memKey']);
          }
          try {
            const executeCommands = new Function('a', cgCodeModify);
            executeCommands(a);
            //上传二周目，发送请求
            if (allowUpdataVarEx && window.cloudProxy && window.cloudProxy['upSaveExData']) {
              let saveValue = `${tv.system.varsEx.data.filter(element => element !== undefined).length}|`;
              tv.system.varsEx.data.forEach((value1, key) => { saveValue += `${key}|${GloableData.getInstance().getEncryptionInt(value1)}|` })
              const saveDate = Math['ceil'](Date["now"]() / 0x3e8);
              const savePlatForm = userData.platform;
              const cgVarEx = `varsEx=${saveValue}#time=${saveDate}#limit=1#new=true#platform=${savePlatForm}`;
              window.cloudProxy['upSaveExData']('normal', cgVarEx, function () { tv.system.varsEx['isUpVarsExData'] = ![]; });
            }
            if (tv.scene instanceof SCUI) {
              tv.scene.refresh()
            }
          } catch (e) {
            alert("请检查输入的代码是否有误！一般是符号或者格式问题！具体错误：" + e)
          }
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgHideFlB' && window.userData) {
        const cgHideFlB = message.value;
        if (cgHideFlB && window.tv && tv.canvas) {
          tv.canvas.sFloatButton && tv.canvas.sFloatButton.setVisible(false)
        }
      } else if (message.type === 'cgHideOther' && window.userData) {
        const cgHideOther = message.value;
        if (cgHideOther && window.tv && tv.canvas) {
          tv.canvas.clear()
          alert('清除后可能背景会变黑，剧情往后走一点就好了！')
        }
      } else if (message.type === 'cgHideSelB' && window.userData) {
        const cgHideSelB = message.value;
        if (cgHideSelB && window.tv && tv.canvas) {
          tv.canvas.ButtonChoice.sp.setVisible(false)
          tv.canvas.TextChoice.sp.setVisible(false)
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgPlotJump' && window.userData) {
        const plotId = message.value
        if (window.userData && window.tv && tv.inter) {
          tv.canvas.message[tv.canvas.msgIndex].view.setVisible(false)
          tv.inter.jumpStory(plotId, function () {
            tv.storyList.addStory(tv.inter)
          })
          //tv.data.getOAF2Data(tv.data.stories[plotId])
          //tv.inter.jumpStory(plotId,function(){i=true})
        }
      } else if (message.type === 'cgPlotDisplay' && window.userData) {
        const plotId = message.value
        if (window.userData && window.tv && tv.inter) {
          let n = new IMain();
          n.callJump(tv.data.stories[plotId]);
          tv.storyList.addStory(n)
        }
      }
    }
  })

  //橙光提取txt
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgGetTxt' && window.tv) {
        let floatBT = {}
        function getStoTxt(events, cgPlotTextType, getT) {
          let plotText = []
          events.forEach(v => {
            switch (v.Code) {
              case 100:
                if (v.Argv[2].trim() !== '') {
                  let a = v.Argv[0];
                  let b = v.Argv[2];
                  if (a === '') {
                    a = '旁白';
                  } else {
                    a = getT.getShowText(a);
                  }
                  b = getT.getShowText(b);
                  plotText.push(cgPlotTextType ? `${a}：${b}` : a === '旁白' ? b : `${a}：${b}`);
                }
                break;
              case 221:
                let bubbleContent = getT.getShowText(v.Argv[6]);
                let bubbleName = getT.getShowText(v.Argv[4])
                plotText.push(`${bubbleName.trim() === '' ? '气泡内容' : bubbleName}：${bubbleContent}`);
                break;
              case 206:
                plotText.push(`跳转章节：${v.Argv[2]}`);
                break;
              case 251:
                plotText.push(`插播章节：${v.Argv[1]}`);
                break;
              case 101:
                let options = '';
                v.Argv.forEach((arg, index) => {
                  options += (index === v.Argv.length - 1) ? `${arg}` : `${arg}、`;
                });
                if (options.includes('\\') || options.includes('/')) {
                  options = getT.getShowText(options);
                }
                plotText.push(`出现选项————${options}`);
                break;
              case 108:
                let optionText = v.Argv[1].includes('\\') ? getT.getShowText(v.Argv[1]) : v.Argv[1];
                plotText.push(`选项${optionText}`);
                break;
              case 212:
                let buttonText = v.Argv[2].includes('\\') ? getT.getShowText(v.Argv[2]) : v.Argv[2];
                plotText.push(`按钮${buttonText}`);
                break;
              case 1010:
                if (v.Argv[0].includes('ORGTEXT')) {
                  let num = parseInt(v.Argv[0].split('|')[1]);
                  let options = [v.Argv[9]];
                  if (v.Argv[10] && cgPlotTextType) {
                    options[0] += `(条件：${v.Argv[10].split(',')[5]})`;
                  }
                  if (num > 1) {
                    for (let i = 1; i < num; i++) {
                      let optionIndex = 9 + (i * 2);
                      let conditionIndex = 10 + (i * 2);
                      if (v.Argv[optionIndex]) {
                        options.push(v.Argv[optionIndex]);
                      }
                      if (v.Argv[conditionIndex] && cgPlotTextType) {
                        options[i] += `(条件：${v.Argv[conditionIndex].split(',')[5]})`;
                      }
                    }
                  }
                  const prefix = v.Argv[v.Argv.length - 1].includes('ORGTIMEOVER') ? '出现限时选项————' : '出现判断选项————';
                  plotText.push(`${prefix}${options.join('、')}`);
                }
                break;
              case 1011:
                const choiceNum = parseInt(v.Argv[0])
                let ps = ''
                for (let i = 0; i < choiceNum; i++) {
                  const ind = 15 + (3 * i)
                  let chText = v.Argv[ind].includes('ORGTIMEOVER|') ? `限时：${utils.getShowText(v.Argv[ind])}` : utils.getShowText(v.Argv[ind])
                  if (v.Argv[ind + 1]) {
                    chText += `(判断显示：${v.Argv[ind + 1].split(',')[5]})`
                  }
                  ps += i === choiceNum - 1 ? `${chText}` : `${chText}、`
                }
                plotText.push(`出现选项————${ps}`)
                break;
              default:
                if (cgPlotTextType) {
                  switch (v.Code) {
                    case 107:
                      plotText.push(`******${v.Argv[0]}******`);
                      break;
                    case 202:
                      plotText.push(`******开始循环******`);
                      break;
                    case 203:
                      plotText.push(`******回到循环一开始继续循环******`);
                      break;
                    case 209:
                      plotText.push(`******跳出(结束)循环、判断******`);
                      break;
                    case 200:
                      plotText.push(`判断——————${v.Argv[5]}`);
                      break;
                    case 217:
                      plotText.push(`判断——————${v.Argv[2]}`);
                      break;
                    case 216:
                      plotText.push(`计算：${v.Argv[4]}`);
                      break;
                    case 207:
                      plotText.push(`赋值：${v.Argv[4]}`);
                      break;
                    case 213:
                      plotText.push(`赋值二周目：${v.Argv[4]}`);
                      break;
                    case 215:
                      let assignText = getT.getShowText(v.Argv[1]);
                      plotText.push(`赋值字符：${v.Argv[0]}='${assignText}'`);
                      break;
                    case 214:
                      let uiText = '';
                      switch (v.Argv[0]) {
                        case '10001':
                          uiText = `呼叫菜单界面`;
                          break;
                        case '10002':
                          uiText = `呼叫回放界面`;
                          break;
                        case '10003':
                          uiText = `呼叫CG查看界面`;
                          break;
                        case '10004':
                          uiText = `呼叫BGM查看界面`;
                          break;
                        case '10005':
                          uiText = `呼叫存档界面`;
                          break;
                        case '10006':
                          uiText = `呼叫读档界面`;
                          break;
                        case '10007':
                          uiText = `呼叫设置界面`;
                          break;
                        case '10009':
                          uiText = `呼叫剧情界面`;
                          break;
                        case '10010':
                          uiText = `呼叫商城界面`;
                          break;
                        case '10012':
                          uiText = `呼叫限时商城界面`;
                          break;
                        case '10013':
                          uiText = `呼叫福利界面`;
                          break;
                        case '10014':
                          uiText = `呼叫命名(可输入)界面`;
                          break;
                        case '10015':
                          uiText = `呼叫换装界面`;
                          break;
                        default:
                          if (parseInt(v.Argv[0]) < tv.data.System.Cuis.length) {
                            uiText = `呼叫UI，id为：${v.Argv[0]}`;
                          }
                      }
                      plotText.push(uiText);
                      break;
                    case 211:
                      let failureText = v.Argv[0] ? `判断不满足———${v.Argv[0]}` : `判断不满足后执行`;
                      plotText.push(failureText);
                      break;
                    case 201:
                      let endText = v.Argv[0] ? `判断结束————${v.Argv[0]}` : `判断结束`;
                      plotText.push(endText);
                      break;
                    case 208:
                      plotText.push(`返回标题`);
                      break;
                    case 253:
                      plotText.push(`遇到商品锁，检测${v.Argv[1]}`);
                      break;
                    case 308:
                      plotText.push(`获得CG：${v.Argv[1]}`);
                      break;
                    case 112:
                      if (v.Argv[0] === '0') {
                        let fb = tv.data.DFloatButton[v.Argv[2] === '-1' ? 0 : v.Argv[2]]
                        let name = fb && fb.name ? fb.name : v.Argv[1]
                        plotText.push(`关闭悬浮组件：${name}`);
                      } else if (v.Argv[0] === '1') {
                        let fb = tv.data.DFloatButton[v.Argv[2] === '-1' ? 0 : v.Argv[2]]
                        let name = fb && fb.name ? fb.name : v.Argv[1]
                        plotText.push(`打开悬浮组件：${name}`);
                        if (!floatBT[name] && fb) {
                          let flT = []
                          fb.DFloatItem.forEach(v1 => {
                            switch (v1.type) {
                              case 0:
                                const namePicture = v1.isUserString ? tv.system.string.data[v1.stringIndex] : v1.image;
                                flT.push(`/*图片背景：${namePicture}*/`);
                                break;
                              case 1:
                                flT.push(`/*显示字符数值*/\ntv.system.string.data[${v1.stringIndex}]`);
                                break;
                              case 2:
                                flT.push(`/*显示数值*/\ntv.system.vars.data[${v1.varIndex}]`);
                                break;
                              default:
                                break;
                            }
                          })
                          if (fb.event && fb.event.length > 0) {
                            flT.push('/*事件*/')
                            flT.push(...getUITxt(fb.event))
                          }
                          floatBT[name] = flT
                        }
                      }
                      break
                  }
                }
            }
          })
          return plotText
        }

        function getUITxt(event) {
          let plotText = []
          event.forEach(v2 => {
            switch (v2.Code) {
              case 107:
                plotText.push(`******${v2.Argv[0]}******`);
                break;
              case 202:
                plotText.push(`******开始循环******`);
                break;
              case 203:
                plotText.push(`******回到循环一开始继续循环******`);
                break;
              case 209:
                plotText.push(`******跳出(结束)循环、判断******`);
                break;
              case 200:
                plotText.push(`判断——————${v2.Argv[5]}`);
                break;
              case 217:
                plotText.push(`判断——————${v2.Argv[2]}`);
                break;
              case 216:
                plotText.push(`计算：${v2.Argv[4]}`);
                break;
              case 207:
                plotText.push(`赋值：${v2.Argv[4]}`);
                break;
              case 213:
                plotText.push(`赋值二周目：${v2.Argv[4]}`);
                break;
              case 215:
                plotText.push(`赋值字符：${v2.Argv[0]}='${v2.Argv[1]}'`);
                break;
              case 214:
                switch (v2.Argv[0]) {
                  case '10001':
                    plotText.push(`呼叫菜单界面`);
                    break;
                  case '10002':
                    plotText.push(`呼叫回放界面`);
                    break;
                  case '10003':
                    plotText.push(`呼叫CG查看界面`);
                    break;
                  case '10004':
                    plotText.push(`呼叫BGM查看界面`);
                    break;
                  case '10005':
                    plotText.push(`呼叫存档界面`);
                    break;
                  case '10006':
                    plotText.push(`呼叫读档界面`);
                    break;
                  case '10007':
                    plotText.push(`呼叫设置界面`);
                    break;
                  case '10009':
                    plotText.push(`呼叫剧情界面`);
                    break;
                  case '10010':
                    plotText.push(`呼叫商城界面`);
                    break;
                  case '10012':
                    plotText.push(`呼叫限时商城界面`);
                    break;
                  case '10013':
                    plotText.push(`呼叫福利界面`);
                    break;
                  case '10014':
                    plotText.push(`呼叫命名(可输入)界面`);
                    break;
                  case '10015':
                    plotText.push(`呼叫换装界面`);
                    break;
                  default:
                    if (parseInt(v2.Argv[0]) < tv.data.System.Cuis.length) {
                      plotText.push(`呼叫UI：${v2.Argv[0]}`);
                    }
                    break;
                }
                break;
              case 211:
                let b = v2.Argv[0] ? v2.Argv[0] : '';
                plotText.push(b ? `判断失败后———${b}` : `判断失败后`);
                break;
              case 201:
                let c = v2.Argv[0] ? v2.Argv[0] : '';
                plotText.push(c ? `判断结束————${c}` : `判断结束`);
                break;
              case 208:
                plotText.push(`返回标题`);
                break;
              case 253:
                plotText.push(`遇到商品锁，检测${v2.Argv[1]}`);
                break;
              case 308:
                plotText.push(`获得CG：${v2.Argv[1]}`);
                break;
              case 2063:
                plotText.push(`跳转章节：${v2.Argv[2]}`);
                break;
              case 151:
                plotText.push(`返回游戏剧情`);
                break;
              default:
                break;
            }
          })
          return plotText
        }
        const mv = message.value
        if (mv[0] === 1) {
          const plotId = message.value[1];
          const cgPlotTextType = message.value[2];
          let plotText = [];
          const sto = tv.data.stories.find(v => v && v.ID === plotId)
          if (sto) {
            const getT = new Utils()
            plotText = getStoTxt(sto.events, cgPlotTextType, getT);
            if (Object.keys(floatBT).length > 0) {
              plotText.push('\n\n\n')
              Object.keys(floatBT).forEach(v => {
                if (floatBT[v].length > 0) {
                  plotText.push(`\n————悬浮组件：${v}————`)
                  plotText.push(...floatBT[v])
                }
              })
            }
            const blob = new Blob([plotText.join('\n')], { type: 'text/plain' });
            /*a标签模拟下载文件*/
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = tv.data.Headr.title + '-' + sto.Name + '.txt';
            link.click();
            URL.revokeObjectURL(link.href);
          } else {
            alert('未查询到章节')
          }
        } else if (mv[0] === 2) {
          const cgPlotTextType = window.confirm('需要提取判断、赋值等操作吗(可用作简易的攻略)？')
          const dowType = window.confirm('所有都下载到一个文档吗？\n取消的话就是一个章节对应一个文档\n全部一个文档比较综合好看\n一个章节一个文档分类清晰\n看个人的需求爱好选择')
          let plotText = []
          let isFirst = true;
          const getT = new Utils()
          if (dowType) {
            tv.data.stories.forEach((v1, k) => {
              if (v1 && v1.events.length !== 0) {
                if (isFirst) {
                  plotText.push(`——————————————章节名称：${v1.Name}——————————————`);
                  isFirst = false;
                } else {
                  plotText.push(`\n\n——————————————章节名称：${v1.Name}——————————————`);
                }
                plotText.push(...getStoTxt(v1.events, cgPlotTextType, getT))
              }
            });
            if (Object.keys(floatBT).length > 0) {
              plotText.push('\n\n\n')
              Object.keys(floatBT).forEach(v => {
                if (floatBT[v].length > 0) {
                  plotText.push(`\n————悬浮组件：${v}————`)
                  plotText.push(...floatBT[v])
                }
              })
            }
            const blob = new Blob([plotText.join('\n')], { type: 'text/plain' });
            /*a标签模拟下载文件*/
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = tv.data.Headr.title + '.txt';
            link.click();
            URL.revokeObjectURL(link.href);
          } else {
            const aa = window.confirm('是否要下载为Zip(建议下载为Zip)？');
            let bb = []
            const downloadFile = (plotText, title, name) => {
              return new Promise((resolve) => {
                const blob = new Blob([plotText.join('\n')], { type: 'text/plain' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `${title}-${name}.txt`;
                link.click();
                requestAnimationFrame(() => {
                  URL.revokeObjectURL(link.href);
                  resolve();
                });
              });
            };
            function downloadZip(txtArray) {
              const jszipUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
              const fileSaverUrl = 'https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js';
              let loadScript = function (src) {
                return new Promise((resolve, reject) => {
                  const script = document.createElement('script');
                  script.src = src;
                  script.onload = resolve;
                  script.onerror = reject;
                  document.head.appendChild(script);
                });
              }
              let importLibraries = async function () {
                if (typeof JSZip === 'undefined') {
                  await loadScript(jszipUrl);
                }
                if (typeof saveAs === 'undefined') {
                  await loadScript(fileSaverUrl);
                }
              };
              let downloadImagesAsZip = async function (imageUrls) {
                const zip = new JSZip();
                for (const url of imageUrls) {
                  zip.file(url.name, url.b);
                }
                zip.generateAsync({ type: 'blob' })
                  .then(function (content) {
                    saveAs(content, `${tv.data.Headr.title}(txt).zip`);
                  });
              }
              importLibraries().then(() => {
                downloadImagesAsZip(txtArray);
              }).catch(error => {
                alert('下载出错，请重试:', error);
              });
            }
            const processStories = async () => {
              for (const v1 of tv.data.stories) {
                if (v1 === undefined || v1 === null) {
                  continue;
                }
                if (v1.events.length !== 0) {
                  plotText = getStoTxt(v1.events, cgPlotTextType, getT);
                  if (aa) {
                    bb.push({ name: `${v1.Name}(${v1.ID}).txt`, b: new Blob([plotText.join('\n')], { type: 'text/plain' }) })
                  } else {
                    await downloadFile(plotText, tv.data.Headr.title, v1.Name)
                    await new Promise(resolve => setTimeout(resolve, 200));
                  }
                }
              }
              if (Object.keys(floatBT).length > 0) {
                let allFlo = []
                Object.keys(floatBT).forEach((v, k) => {
                  if (floatBT[v].length > 0) {
                    allFlo.push(`${k === 0 ? '' : '\n'}————悬浮组件：${v}————`)
                    allFlo.push(...floatBT[v])
                  }
                })
                if (aa) {
                  bb.push({ name: `悬浮组件.txt`, b: new Blob([allFlo.join('\n')], { type: 'text/plain' }) })
                } else {
                  await downloadFile(allFlo, tv.data.Headr.title, '悬浮组件')
                }
              }
            }
            processStories()
            if (aa) { downloadZip(bb) }
          }
        } else if (mv[0] === 3 || mv[0] === 4) {
          let plotText = [];
          let UIN
          if (mv[1] === 1) {
            if (tv.scene instanceof SCUI && tv.CUIFromIndex !== -1) {
              UIN = `UI(单)-${tv.CUIFromIndex}`
              const v = tv.data.System.Cuis[tv.CUIFromIndex]
              if (v.loadEvent.length !== 0) {
                plotText.push(`(1)loadEvent：以下是进入UI便加载执行的事件`)
                plotText.push(...getUITxt(v.loadEvent))
              }
              if (v.afterEvent.length !== 0) {
                if (plotText.length > 0 && plotText[plotText.length - 1].includes('loadEvent：以下是')) {
                  plotText[plotText.length - 1] = `(1)afterEvent：以下是loadEvent完成后的事件`
                } else if (plotText.length === 0) {
                  plotText.push(`(1)afterEvent：以下是loadEvent完成后的事件`)
                } else {
                  plotText.push(`\n(2)afterEvent：以下是loadEvent完成后的事件`)
                }
                plotText.push(...getUITxt(v.afterEvent))
              }
              if (v.controls.length !== 0) {
                if (plotText.length > 0 && plotText[plotText.length - 1].includes('afterEvent：以下是')) {
                  plotText[plotText.length - 1] = `(2)以下是UI各按钮图片的点击事件`
                } else if (plotText.length === 0) {
                  plotText.push(`(1)以下是UI各按钮图片的点击事件`)
                } else {
                  plotText.push(`\n(3)以下是UI各按钮图片的点击事件`)
                }
                v.controls.forEach(v1 => {
                  if (v1.event.length !== 0 || v1.type !== 0) {
                    switch (v1.type) {
                      case 0:
                        const index = v1.isUserIndex ? tv['system']['vars']['getVar'](v1['index']) - 1 : v1['index'];
                        let buttonN
                        if (index < 0 || index >= tv.data.System.Buttons.length) {
                          buttonN = `/*index为${v1.index}的按钮点击事件*/`
                        } else {
                          const nameButton = tv.data.System.Buttons[index].name;
                          buttonN = `/*index为${v1.index}：<${nameButton}>的按钮点击事件*/`
                        }
                        plotText.push(buttonN);
                        break;
                      case 1:
                        plotText.push(`/*显示字符数值*/\ntv.system.string.data[${v1.index}]`);
                        break;
                      case 2:
                        plotText.push(`/*显示数值*/\ntv.system.vars.data[${v1.index}]`);
                        break;
                      case 3:
                        const namePicture = v1.isUserString ? tv.system.string.data[v1.stringIndex] : v1.image1;
                        plotText.push(`/*图片背景：${namePicture}*/`);
                        break;
                      case 4:
                        plotText.push(`/*显示进度条*/\n最大值为tv.system.vars.data[${v1.maxIndex}]，当前为tv.system.vars.data[${v1.index}]`);
                        break;
                      default:
                        break;
                    }
                    plotText.push(...getUITxt(v1.event))
                  }
                })
              }
            } else {
              UIN = `${tv.inter.storyName}(${tv.inter.storyId})`
              const getT = new Utils()
              const cgPlotTextType = window.confirm('需要提取判断、赋值等操作吗(可用作简易的攻略)？')
              plotText = getStoTxt(tv.inter.story, cgPlotTextType, getT);
              if (Object.keys(floatBT).length > 0) {
                plotText.push('\n\n\n')
                Object.keys(floatBT).forEach(v => {
                  if (floatBT[v].length > 0) {
                    plotText.push(`\n————悬浮组件：${v}————`)
                    plotText.push(...floatBT[v])
                  }
                })
              }
            }
          } else {
            UIN = 'UI'
            tv.data.System.Cuis.forEach((v, k) => {
              if (!(v.loadEvent.length === 0 && v.controls.length === 0 && v.afterEvent.length === 0)) {
                if (plotText.length !== 0 && (plotText[plotText.length - 1].includes('以下是') || plotText[plotText.length - 1].includes('的UI————————————'))) {
                  plotText[plotText.length - 1] = `\n\n————————————id为${k}的UI————————————`
                } else {
                  plotText.push(plotText.length === 0 ? `————————————id为${k}的UI————————————` : `\n\n————————————id为${k}的UI————————————`)
                }
                if (v.loadEvent.length !== 0) {
                  plotText.push(`(1)loadEvent：以下是进入UI便加载执行的事件`)
                  plotText.push(...getUITxt(v.loadEvent))
                }
                if (v.afterEvent.length !== 0) {
                  if (plotText.length > 0 && plotText[plotText.length - 1].includes('loadEvent：以下是')) {
                    plotText[plotText.length - 1] = `(1)afterEvent：以下是loadEvent完成后的事件`
                  } else if (plotText.length > 0 && plotText[plotText.length - 1].includes('的UI————————————')) {
                    plotText.push(`(1)afterEvent：以下是loadEvent完成后的事件`)
                  } else {
                    plotText.push(`\n(2)afterEvent：以下是loadEvent完成后的事件`)
                  }
                  plotText.push(...getUITxt(v.afterEvent))
                }
                if (v.controls.length !== 0) {
                  if (plotText.length > 0 && plotText[plotText.length - 1].includes('afterEvent：以下是')) {
                    plotText[plotText.length - 1] = `\n(2)以下是UI各按钮图片的点击事件`
                  } else if (plotText.length > 0 && plotText[plotText.length - 1].includes('loadEvent：以下是')) {
                    plotText[plotText.length - 1] = `(1)以下是UI各按钮图片的点击事件`
                  } else if (plotText.length > 0 && plotText[plotText.length - 1].includes('的UI————————————')) {
                    plotText.push(`(1)以下是UI各按钮图片的点击事件`)
                  } else if (v.afterEvent.length === 0) {
                    plotText.push(`\n(2)以下是UI各按钮图片的点击事件`)
                  } else {
                    plotText.push(`\n(3)以下是UI各按钮图片的点击事件`)
                  }
                  v.controls.forEach(v1 => {
                    if (v1.event.length !== 0 || v1.type !== 0) {
                      switch (v1.type) {
                        case 0:
                          const index = v1.isUserIndex ? tv['system']['vars']['getVar'](v1['index']) - 1 : v1['index'];
                          let buttonN
                          if (index < 0 || index >= tv.data.System.Buttons.length) {
                            buttonN = `/*index为${v1.index}的按钮点击事件*/`
                          } else {
                            const nameButton = tv.data.System.Buttons[index].name;
                            buttonN = `/*index为${v1.index}：<${nameButton}>的按钮点击事件*/`
                          }
                          plotText.push(buttonN);
                          break;
                        case 1:
                          plotText.push(`/*显示字符数值*/\ntv.system.string.data[${v1.index}]`);
                          break;
                        case 2:
                          plotText.push(`/*显示数值*/\ntv.system.vars.data[${v1.index}]`);
                          break;
                        case 3:
                          const namePicture = v1.isUserString ? tv.system.string.data[v1.stringIndex] : v1.image1;
                          plotText.push(`/*图片背景：${namePicture}*/`);
                          break;
                        case 4:
                          plotText.push(`/*显示进度条*/\n最大值为tv.system.vars.data[${v1.maxIndex}]，当前为tv.system.vars.data[${v1.index}]`);
                          break;
                        default:
                          break;
                      }
                      plotText.push(...getUITxt(v1.event));
                    }
                  })
                }
              }
            })
          }
          const blob = new Blob([plotText.join('\n')], { type: 'text/plain' });
          /*a标签模拟下载文件*/
          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          link.download = tv.data.Headr.title + `-${UIN}` + '.txt';
          link.click();
          URL.revokeObjectURL(link.href);
        }
      }
    }
  })


  window.addEventListener('message', async (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'downloadCgBGM' && window.userData) {
        if (message.value[0] === 1) {
          let fileN
          if (message.value[0] === 1) {
            const currBGM = (message.value[1] === 'bgm' ? oaudio.currentBgmPath : oaudio.pathVoice).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')
            fileN = currBGM
          } else {
            fileN = message.value
          }
          if (fileList[fileN]) {
            const nameMatch = fileN.match(/audio\/(?:bgm|voice)\/(.*)/)
            let name = nameMatch ? nameMatch[1] : fileN
            name = `${name.replace(/(\.mp3|.wav|.flac|.ogg|.acc|.m4a)$/i, `【${fileList[fileN].md5}】$1`)}`
            const fileLink = fileList[fileN].url()
            fetch(fileLink)
              .then(response => response.blob())
              .then(blob => {
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = name;
                link.click();
                URL.revokeObjectURL(url);
              })
              .catch(error => console.error('Error downloading the file:', error));
          } else {
            alert('不存在该音乐')
          }
          return
        }
        if (message.value[0] === 3) {
          if (message.value[2] === 'other') {
            try {
              const response = await fetch(message.value[1]); // 等待 fetch 完成
              const blob = await response.blob(); // 等待 blob() 完成
              message.value[1] = URL.createObjectURL(blob); // 更新为 Blob URL
            } catch (error) {
              console.error('Error converting Data URL to Blob:', error);
              alert('发生错误，请重新上传替换')
              return
            }
          }
          let isBGS = false
          const currBGM = oaudio.currentBgmPath.toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')
          if (!oaudio.salaudioBGM.isAudioProgress && oaudio.salaudioBGS && oaudio.salaudioBGS.isAudioProgress && oaudio.pathBGS) {
            isBGS = true
            currBGM = oaudio.pathBGS.toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')
          }
          const picMd5 = message.value[1];
          if (fileList[currBGM]) {
            if (fileList[currBGM].local) {
              URL.revokeObjectURL(fileList[currBGM].local)
            }
            if (message.value[2] === 'cg') {
              fileList[currBGM].md5 = picMd5
              if (fileList[currBGM].local) {
                fileList[currBGM].url = function () { return convertMD5ToCDNPath(this.md5) }
              }
            } else if (message.value[2] === 'other') {
              fileList[currBGM].local = picMd5
              fileList[currBGM].url = function () { return this.local }
            }
            isBGS ? oaudio.pathBGS = "" : oaudio.pathBGM = ""
            isBGS ? oaudio.playBGS(oaudio.pathBGS, 100) : oaudio.playBGM(oaudio.currentBgmPath, 100)
          } else {
            alert('查询不到当前在播放的bgm，替换失败')
          }
          return
        }
        if (message.value[0] === 4) {
          if (message.value[3] === 'other') {
            try {
              const response = await fetch(message.value[2]); // 等待 fetch 完成
              const blob = await response.blob(); // 等待 blob() 完成
              message.value[2] = URL.createObjectURL(blob); // 更新为 Blob URL
            } catch (error) {
              console.error('Error converting Data URL to Blob:', error);
              alert('发生错误，请重新上传替换')
              return
            }
          }
          const currBGM = message.value[1]
          const picMd5 = message.value[2];
          if (fileList[currBGM]) {
            if (fileList[currBGM].local) {
              URL.revokeObjectURL(fileList[currBGM].local)
            }
            if (message.value[3] === 'cg') {
              fileList[currBGM].md5 = picMd5
              if (fileList[currBGM].local) {
                fileList[currBGM].url = function () { return convertMD5ToCDNPath(this.md5) }
              }
            } else if (message.value[3] === 'other') {
              fileList[currBGM].local = picMd5
              fileList[currBGM].url = function () { return this.local }
            }
          } else {
            alert('查询不到此bgm，替换失败')
          }
          return
        }
        if (message.value[0] === 5) {
          const currBGM = oaudio.salaudioBGM
          if (!oaudio.salaudioBGM.isAudioProgress && oaudio.salaudioBGS && oaudio.salaudioBGS.isAudioProgress && oaudio.pathBGS) {
            currBGM = oaudio.salaudioBGS
          }
          if (message.value[1] === 'info') {
            let v = message.value[2].v, p = message.value[2].p
            if (v) { currBGM.setVolume(parseFloat(v)) }
            if (p) { currBGM.player.playbackRate = parseFloat(p) }
            currBGM.player.play()
          } else if (message.value[1] === 'forward') {
            let a = currBGM.player.currentTime
            a += 10
            if (a > currBGM.player.duration) { currBGM.player.currentTime = currBGM.player.duration } else { currBGM.player.currentTime = a }
            currBGM.player.play()
          } else if (message.value[1] === 'back') {
            let a = currBGM.player.currentTime
            a -= 10
            if (a < 0) { currBGM.player.currentTime = 0 } else { currBGM.player.currentTime = a }
            currBGM.player.play()
          }
          return
        }
      }
    }
  })

  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'getCgPic' && window.userData) {
        let pic = []
        if (tv.scene instanceof SCUI) {
          if (message.value === 1) {
            tv.scene.mask.childList.forEach(item => {
              if (item instanceof OBitmap && item.imageUrl) {
                pic.push({
                  picFil: item.pathObj.fileName,
                  picMd5: item.pathObj.md5,
                  picName: item.pathObj.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                  picUrl: item.imageUrl
                })
              }
            })
          } else if (message.value === 3) {
            const uia = tv.data.System.Cuis[tv.CUIFromIndex]
            let uiaa = new Set()
            if (uia.controls.length !== 0) {
              uia.controls.forEach(item => {
                switch (item.type) {
                  case 3:
                    if (item.isUserString && tv.system.string.data[item.stringIndex] && tv.system.string.data[item.stringIndex].trim() !== '') {
                      const str = ('graphics/other/' + tv.system.string.data[item.stringIndex]).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/');
                      const regexString = str.replace(/\d+/g, '\\d+'); // 替换数字为 \d+
                      const c = new RegExp(regexString);
                      Object.values(fileList).filter(v => c.test(v.fileName)).forEach(v1 => {
                        if (!uiaa.has(v1.fileName)) {
                          uiaa.add(v1.fileName)
                          pic.push({
                            picFil: v1.fileName,
                            picMd5: v1.md5,
                            picName: v1.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                            picUrl: v1.url()
                          })
                        }
                      })
                    } else {
                      const str = ('graphics/other/' + item.image1).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/');
                      if (!uiaa.has(str)) {
                        uiaa.add(str)
                        if (fileList[str]) {
                          let a = fileList[str]
                          pic.push({
                            picFil: a.fileName,
                            picMd5: a.md5,
                            picName: a.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                            picUrl: a.url()
                          })
                        }
                      }
                    }
                    break;
                }
              })
            }
          }
          let aaa = new Set()
          tv.canvas.GamePictrue.forEach(item => {
            if (item instanceof OBitmap && item.imageUrl) {
              pic.push({
                picFil: item.pathObj.fileName,
                picMd5: item.pathObj.md5,
                picName: item.pathObj.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                picUrl: item.imageUrl
              })
            } else if (item instanceof CChatLayer) {
              item.chatItemList.forEach(v => {
                if (v.chatItem.type === '2') {
                  if (v.chatItem.content) {
                    let a = fileList[('graphics/chat/' + v.chatItem.content).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                    if (a && !aaa.has(a.fileName)) {
                      aaa.add(a.fileName)
                      pic.push({
                        picFil: a.fileName,
                        picMd5: a.md5,
                        picName: v.chatItem.content,
                        picUrl: a.url()
                      })
                    }
                  }
                  if (v.chatItem.picPath) {
                    let a = fileList[('graphics/chat/' + v.chatItem.picPath).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                    if (a && !aaa.has(a.fileName)) {
                      aaa.add(a.fileName)
                      pic.push({
                        picFil: a.fileName,
                        picMd5: a.md5,
                        picName: v.chatItem.picPath,
                        picUrl: a.url()
                      })
                    }
                  }
                }
                if (v.chatItem.head) {
                  let a = fileList[('graphics/face/' + v.chatItem.head).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                  if (a && !aaa.has(a.fileName)) {
                    aaa.add(a.fileName)
                    pic.push({
                      picFil: a.fileName,
                      picMd5: a.md5,
                      picName: v.chatItem.head,
                      picUrl: a.url()
                    })
                  }
                }
              })
            }
          })
        } else {
          if (message.value === 1) {
            if (tv.inter.story[tv.inter.pos].Code === 100 && fileList[('graphics/face/' + tv.inter.story[tv.inter.pos].Argv[3]).toLocaleLowerCase()]) {
              let a = fileList[('graphics/face/' + tv.inter.story[tv.inter.pos].Argv[3]).toLocaleLowerCase()]
              pic.push({
                picFil: a.fileName,
                picMd5: a.md5,
                picName: a.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                picUrl: a.url()
              })
            }
            let aaa = new Set()
            tv.canvas.GamePictrue.forEach(item => {
              if (item instanceof OBitmap && item.imageUrl) {
                pic.push({
                  picFil: item.pathObj.fileName,
                  picMd5: item.pathObj.md5,
                  picName: item.pathObj.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                  picUrl: item.imageUrl
                })
              } else if (item instanceof CChatLayer) {
                item.chatItemList.forEach(v => {
                  if (v.chatItem.type === '2') {
                    if (v.chatItem.content) {
                      let a = fileList[('graphics/chat/' + v.chatItem.content).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                      if (a && !aaa.has(a.fileName)) {
                        aaa.add(a.fileName)
                        pic.push({
                          picFil: a.fileName,
                          picMd5: a.md5,
                          picName: v.chatItem.content,
                          picUrl: a.url()
                        })
                      }
                    }
                    if (v.chatItem.picPath) {
                      let a = fileList[('graphics/chat/' + v.chatItem.picPath).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                      if (a && !aaa.has(a.fileName)) {
                        aaa.add(a.fileName)
                        pic.push({
                          picFil: a.fileName,
                          picMd5: a.md5,
                          picName: v.chatItem.picPath,
                          picUrl: a.url()
                        })
                      }
                    }
                  }
                  if (v.chatItem.head) {
                    let a = fileList[('graphics/face/' + v.chatItem.head).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                    if (a && !aaa.has(a.fileName)) {
                      aaa.add(a.fileName)
                      pic.push({
                        picFil: a.fileName,
                        picMd5: a.md5,
                        picName: v.chatItem.head,
                        picUrl: a.url()
                      })
                    }
                  }
                })
              }
            })
            if (tv.canvas.sFloatButton && tv.canvas.sFloatButton.isFBOnOff) {
              tv.canvas.sFloatButton.isVisibilArray.forEach((v, k) => {
                if (v === 1) {
                  tv.data.DFloatButton[k].DFloatItem.forEach(v => {
                    if (v.type === 0) {
                      let a = v.image
                      if (v.isUserString) { a = tv.system.string.data[v.indexOfStr] }
                      let b = fileList[('graphics/other/' + a.replace(/(\\\\|\/\/|\\)/g, '/')).toLocaleLowerCase()]
                      if (b) {
                        let c = b.url()
                        pic.push({
                          picFil: b.fileName,
                          picMd5: b.md5,
                          picName: b.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                          picUrl: c
                        })
                      }
                    }
                  })
                }
              })
            }
          } else if (message.value === 2) {
            tv.canvas.GamePictrue.forEach(item => {
              if (item instanceof CAnimation && item.path) {
                let a = item.path.toLocaleLowerCase()
                a.includes('.oaf2') ? '' : a = a.replace('.oaf', '.oafx')
                let cc = a.replace(/(\\\\|\/\/|\\)/g, '/')
                if (tv.oaf2Data[a] || tv.oaf2Data[cc]) {
                  let aaaaa = tv.oaf2Data[a] || tv.oaf2Data[cc]
                  if (aaaaa instanceof DAnimation) {
                    aaaaa.picList.forEach(v => {
                      v = v.replace(/(\\\\|\/\/|\\)/g, '/')
                      let b = fileList[`graphics/oafs/${v}`]
                      if (b) {
                        pic.push({
                          picFil: b.fileName,
                          picMd5: b.md5,
                          picName: v,
                          picUrl: b.url()
                        })
                      }
                    })
                  } else if (aaaaa instanceof DoafData) {
                    aaaaa.imageList.forEach((v, k) => {
                      let c = cc.replace('.oafx', '')
                      pic.push({
                        picFil: `${c}_${k}.png`,
                        picMd5: v,
                        picName: `${c}_${k}.png`.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                        picUrl: convertMD5ToCDNPath(v)
                      })
                    })
                  }
                } else if (a.includes('.oaf2')) {
                  a = cc.replace('.oaf2', '')
                  let b = Object.values(fileList).filter(v => v.fileName.includes(a))
                  b.forEach(v => {
                    pic.push({
                      picFil: v.fileName,
                      picMd5: v.md5,
                      picName: v.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                      picUrl: v.url()
                    })
                  })
                }
              }
            })
          } else {
            let aaa = new Set()
            const preLoM = tv.inter.story.find(v => v && v.Code === 405)
            if (preLoM) {
              pic = preLoM.Argv[0].split('|').map(v => {
                let a = v.replace(/(\\\\|\/\/|\\)/g, '/').toLocaleLowerCase()
                let b = fileList[a]
                if (!b || !a.match(/graphics\/(?:background|other|half|face|oafs|chat)\//) || a.includes('.oaf')) { return null }
                aaa.add(a)
                return {
                  picFil: a,
                  picMd5: b.md5,
                  picName: a.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                  picUrl: b.url()
                }
              }).filter(item => item !== null)
            }
            tv.inter.story.forEach(item => {
              switch (item.Code) {
                case 400:
                  let M = false, c
                  if (item.Argv.length > 11) {
                    M = item.Argv[11] === '1'
                  }
                  if (M) {
                    c = ("Graphics/Other/" + utils.madeString(tv.system.string.data[parseInt(item.Argv[12])], 0, item.Code)).toLocaleLowerCase()
                  } else {
                    c = ("Graphics/" + item.Argv[1]).toLocaleLowerCase()
                  }
                  c = c.replace(/(\\\\|\/\/|\\)/g, '/')
                  if (fileList[c] && c.match(/graphics\/(?:background|other|half|face|oafs|chat)\//) && !aaa.has(c)) {
                    aaa.add(c)
                    let a = fileList[c]
                    pic.push({
                      picFil: a.fileName,
                      picMd5: a.md5,
                      picName: a.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                      picUrl: a.url()
                    })
                  }
                  break
                case 100:
                  if (item.Argv[3].length > 0) {
                    let a = fileList[('graphics/face/' + item.Argv[3]).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                    if (a && !aaa.has(a.fileName)) {
                      aaa.add(a.fileName)
                      pic.push({
                        picFil: a.fileName,
                        picMd5: a.md5,
                        picName: a.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                        picUrl: a.url()
                      })
                    }
                  }
                  break
                case 1010:
                  let a = ("Graphics/Other/" + item.Argv[5]).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')
                  if (fileList[a] && !aaa.has(a)) {
                    aaa.add(a)
                    let b = fileList[a]
                    pic.push({
                      picFil: b.fileName,
                      picMd5: b.md5,
                      picName: b.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                      picUrl: b.url()
                    })
                  }
                  let d = ("Graphics/Other/" + item.Argv[6]).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')
                  if (fileList[d] && !aaa.has(d)) {
                    aaa.add(d)
                    let f = fileList[d]
                    pic.push({
                      picFil: f.fileName,
                      picMd5: f.md5,
                      picName: f.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                      picUrl: f.url()
                    })
                  }
                case 221:
                  let k = tv.data.chatCharacter.GetChatCharacterByID(item.Argv[11])
                  if (k && k.facePath) {
                    let a = fileList[('graphics/face/' + k.facePath).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                    if (a && !aaa.has(a.fileName)) {
                      aaa.add(a.fileName)
                      pic.push({
                        picFil: a.fileName,
                        picMd5: a.md5,
                        picName: k.facePath,
                        picUrl: a.url()
                      })
                    }
                  }
                  if (item.Argv[5] && (!k || k.facePath !== item.Argv[5])) {
                    let a = fileList[('graphics/face/' + item.Argv[5]).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                    if (a && !aaa.has(a.fileName)) {
                      aaa.add(a.fileName)
                      pic.push({
                        picFil: a.fileName,
                        picMd5: a.md5,
                        picName: item.Argv[5],
                        picUrl: a.url()
                      })
                    }
                  }
                  if (item.Argv[3] === '2') {
                    if (item.Argv[6]) {
                      let a = fileList[('graphics/chat/' + item.Argv[6]).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                      if (a && !aaa.has(a.fileName)) {
                        aaa.add(a.fileName)
                        pic.push({
                          picFil: a.fileName,
                          picMd5: a.md5,
                          picName: item.Argv[6],
                          picUrl: a.url()
                        })
                      }
                    }
                    if (item.Argv[12]) {
                      let a = fileList[('graphics/chat/' + item.Argv[12]).toLocaleLowerCase().replace(/(\\\\|\/\/|\\)/g, '/')]
                      if (a && !aaa.has(a.fileName)) {
                        aaa.add(a.fileName)
                        pic.push({
                          picFil: a.fileName,
                          picMd5: a.md5,
                          picName: item.Argv[12],
                          picUrl: a.url()
                        })
                      }
                    }
                  }
                  break
              }
            })
            tv.data.DFloatButton.forEach(v1 => {
              v1.DFloatItem.forEach(v => {
                if (v.type === 0) {
                  let a = v.image
                  if (v.isUserString) { a = tv.system.string.data[v.indexOfStr] }
                  let b = fileList[('graphics/other/' + a.replace(/(\\\\|\/\/|\\)/g, '/')).toLocaleLowerCase()]
                  if (b) {
                    let c = b.url()
                    pic.push({
                      picFil: b.fileName,
                      picMd5: b.md5,
                      picName: b.fileName.replace(/graphics\/(?:background|other|half|face|oafs|chat)\//, ''),
                      picUrl: c
                    })
                  }
                }
              })
            })
          }
        }
        const customEvent1 = new CustomEvent("cgPic", {
          detail: { value: pic }
        });
        window.dispatchEvent(customEvent1);
      }
    }
  })

  let bmkklh = false, gjkdjf = false
  window.addEventListener('message', async (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgReplacePic' && window.userData) {
        if (message.value[2] === 'cgRoleN') {
          if (!bmkklh) {
            bmkklh = true
            for (let i = 0; i < tv.canvas.message.length; i++) {
              let a = tv.canvas.message[i].Talk;
              tv.canvas.message[i].Talk = function () {
                if (gjkdjf) {
                  if (arguments[0][0].trim() !== '') {
                    let na = utils.madeString(arguments[0][0])
                    if (window.roleNameR[na]) {
                      arguments[0][0] = window.roleNameR[na]
                    }
                  }
                  if (arguments[0][2].trim() !== '') {
                    let na = utils.madeString(arguments[0][2])
                    if (window.roleNameS.test(na)) {
                      arguments[0][2] = na.replace(window.roleNameS, match => window.roleNameR[match])
                    }
                  }
                }
                a.apply(this, arguments)
              }
            }
          }
          window.roleNameR = message.value[0]
          if (Object.values(window.roleNameR).length === 0) {
            gjkdjf = false
          } else {
            gjkdjf = true
          }
          window.roleNameS = new RegExp(Object.keys(window.roleNameR).join('|'), 'g')
          let notS = []
          Object.values(window.roleNameR).join('').split('').forEach(v => {
            if (!(tv.imageFontMap.data[encodeURIComponent(v)] || BitmapFont._instance.bitMapDataArr[encodeURIComponent(v)])) {
              notS.push(v)
            }
          })
          if (notS.length !== 0) {
            fetch(`${webConfig.GET_FONT_SKETCH}?text=${notS.join("")}&font_size=${tv.data.System.realFontSize}&font_name=${tv.gameNameBin.textMd5}&font_origin_name=${tv.data.System.FontName}&gindex=${gIndex}&os=${encodeURI(tv.gameNameBin.os)}`)
              .then(response => response.json())
              .then(result => {
                result.data.forEach((v, k) => {
                  tv.imageFontMap.addItem(encodeURIComponent(notS[k]), v)
                })
                tv.imageFontMap.textString += notS.join('')
              })
          }
        } else if (message.value[2] === 'cgPicAll') {
          const jszipUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
          const fileSaverUrl = 'https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js';
          let loadScript = function (src) {
            return new Promise((resolve, reject) => {
              const script = document.createElement('script');
              script.src = src;
              script.onload = resolve;
              script.onerror = reject;
              document.head.appendChild(script);
            });
          }
          let importLibraries = async function () {
            if (typeof JSZip === 'undefined') {
              await loadScript(jszipUrl);
            }
            if (typeof saveAs === 'undefined') {
              await loadScript(fileSaverUrl);
            }
          };
          let downloadImagesAsZip = async function (imageUrls) {
            const zip = new JSZip();
            for (const url of imageUrls) {
              const response = await fetch(url.picUrl);
              const blob = await response.blob();
              const filename = url.picName.replace(/(\.jpg|\.jpeg|\.png|\.gif|\.bmp|\.svg|\.webp|\.tiff|\.tif)/i, `《${url.picMd5}》$1`);
              zip.file(filename, blob);
            }
            zip.generateAsync({ type: 'blob' })
              .then(function (content) {
                saveAs(content, `${tv.data.Headr.title}(图片).zip`);
              });
          }
          if (message.value[1] === '2') {
            // 下载图片并打包为 ZIP
            downloadImagesAsZip = async function (imageUrls) {
              const zip = new JSZip();
              // 创建任务数组，用于限制并发下载
              const tasks = imageUrls.map(url => async () => {
                const response = await fetch(url.url());
                const blob = await response.blob();
                const filename = url.fileName.replace(/(\.jpg|\.jpeg|\.png|\.gif|\.bmp|\.svg|\.webp|\.tiff|\.tif)/i, `《${url.md5}》$1`);
                zip.file(filename, blob);
              });
              // 设置最大并发数和每 200 个请求后暂停 1 秒
              const chunkSize = 300;  // 每处理 200 个请求暂停
              const delayMs = 2000;   // 暂停时间为 1000 毫秒（即 1 秒）
              await limitConcurrency(tasks, 3, chunkSize, delayMs);
              const content = await zip.generateAsync({
                type: 'blob',
                streamFiles: true,
                compression: "DEFLATE",
                compressionOptions: { level: 5 }
              });
              saveAs(content, `${tv.data.Headr.title}(${message.value[0]}).zip`);
            }
          }
          async function batchDownloadImages(imageUrls) {
            const totalImages = imageUrls.length;
            const batchSize = 2000;
            for (let i = 0; i < totalImages; i += batchSize) {
              const currentBatch = imageUrls.slice(i, i + batchSize);
              // 调用 downloadImagesAsZip 处理当前批次
              await downloadImagesAsZip(currentBatch);
              if (i + batchSize < totalImages) {
                await new Promise(resolve => setTimeout(resolve, 1000));  // 延迟1秒
              }
            }
            alert('下载完成')
          }
          importLibraries().then(() => {
            let allF
            if (message.value[1] === '1') {
              downloadImagesAsZip(message.value[0])
            } else {
              let ty = `graphics/${message.value[0]}`
              allF = Object.values(fileList).filter(item => item.fileName.includes(ty))
              if (allF.length === 0) {
                alert('无此类型的图片')
                return
              }
              batchDownloadImages(allF)
            }
          }).catch(error => {
            alert('下载出错，请重试:', error);
          });
        } else {
          if (message.value[2] === 'cgPicWH') {
            if (fileList[message.value[0]]) {
              const urlP = fileList[message.value[0]].url()
              const w = message.value[1].w ? parseFloat(message.value[1].w) : 0
              const h = message.value[1].h ? parseFloat(message.value[1].h) : 0
              const posX = message.value[1].posX ? parseFloat(message.value[1].posX) : 0
              const posY = message.value[1].posY ? parseFloat(message.value[1].posY) : 0
              const scaX = message.value[1].scaX ? parseFloat(message.value[1].scaX) : 0
              const scaY = message.value[1].scaY ? parseFloat(message.value[1].scaY) : 0
              if (g._textureMap[urlP]) {
                if (h) { g._textureMap[urlP].texInfo._height = h }
                if (w) { g._textureMap[urlP].texInfo._width = w }
              }
              if (tv.scene instanceof SCUI) {
                const nowInG = tv.scene.mask.childList.findIndex(v => v && v.imageUrl === urlP)
                if (nowInG !== -1) {
                  //tv.canvas.GamePictrue[nowInG].imageUrl = convertMD5ToCDNPath(picMd5)
                  let bnb = tv.scene.mask.childList[nowInG].element
                  bnb.setSize(w ? w : bnb.width, h ? h : bnb.height)
                  bnb.setTextureSize(w ? w : bnb.width, h ? h : bnb.height)
                  bnb.setPosition(posX ? posX : bnb.x, posY ? posY : bnb.y)
                  bnb.setZoom(scaX ? scaX : bnb.scaleX, scaY ? scaY : bnb.scaleY)
                  SAL_resetElement(bnb, urlP)
                }
              } else {
                const nowInG = tv.canvas.GamePictrue.findIndex(v => v && v.imageUrl === urlP)
                if (nowInG !== -1) {
                  //tv.canvas.GamePictrue[nowInG].imageUrl = convertMD5ToCDNPath(picMd5)
                  let bnb = tv.canvas.GamePictrue[nowInG].element
                  bnb.setSize(w ? w : bnb.width, h ? h : bnb.height)
                  bnb.setTextureSize(w ? w : bnb.width, h ? h : bnb.height)
                  bnb.setPosition(posX ? posX : bnb.x, posY ? posY : bnb.y)
                  bnb.setZoom(scaX ? scaX : bnb.scaleX, scaY ? scaY : bnb.scaleY)
                  SAL_resetElement(bnb, urlP)
                }
                if (tv.inter.story[tv.inter.pos].Code === 100 && 'graphics/face/' + tv.inter.story[tv.inter.pos].Argv[3] === message.value[0]) {
                  let b = tv.canvas.message[tv.canvas.msgIndex].view.element._children.find(v => v.textureID && v.textureID === urlP)
                  if (b) {
                    b.setSize(w ? w : b.width, h ? h : b.height)
                    b.setTextureSize(w ? w : b.width, h ? h : b.height)
                    b.setPosition(posX ? posX : bnb.x, posY ? posY : bnb.y)
                    b.setZoom(scaX ? scaX : bnb.scaleX, scaY ? scaY : bnb.scaleY)
                    SAL_resetElement(b, urlP)
                  }
                }
                if (tv.canvas.sFloatButton && tv.canvas.sFloatButton.isFBOnOff) {
                  const mm = tv.canvas.sFloatButton.element._children.findIndex(v => v.textureID && v.textureID === urlP)
                  if (mm !== -1) {
                    let bnb = tv.canvas.sFloatButton.element._children[mm]
                    bnb.setSize(w ? w : bnb.width, h ? h : bnb.height)
                    bnb.setTextureSize(w ? w : bnb.width, h ? h : bnb.height)
                    bnb.setPosition(posX ? posX : bnb.x, posY ? posY : bnb.y)
                    bnb.setZoom(scaX ? scaX : bnb.scaleX, scaY ? scaY : bnb.scaleY)
                    SAL_resetElement(bnb, urlP)
                  }
                }
              }
              if (!window.picInfo) {
                window.picInfo = {}
                let sca = SAL_setElementScale
                SAL_setElementScale = function () {
                  if (arguments[0] && arguments[0].textureID && window.picInfo[arguments[0].textureID]) {
                    let a = window.picInfo[arguments[0].textureID]
                    if (a.scaleX) {
                      arguments[1] = a.scaleX
                    }
                    if (a.scaleY) {
                      arguments[2] = a.scaleY
                    }
                  }
                  sca.apply(this, arguments)
                }
                let pos = SAL_setPosition
                SAL_setPosition = function () {
                  if (arguments[0] && arguments[0].textureID && window.picInfo[arguments[0].textureID]) {
                    let a = window.picInfo[arguments[0].textureID]
                    if (a.posX) {
                      arguments[1] = a.posX
                    }
                    if (a.posY) {
                      arguments[2] = a.posY
                    }
                  }
                  pos.apply(this, arguments)
                }
                let runa = SAL_runAction
                SAL_runAction = function () {
                  if (arguments[0] && arguments[0].textureID && window.picInfo[arguments[0].textureID]) {
                    if (arguments[1]) {
                      let a = window.picInfo[arguments[0].textureID]
                      if (arguments[1].type === "moveTo") {
                        if (a.posX !== undefined) {
                          arguments[1].targetX = a.posX
                        }
                        if (a.posY !== undefined) {
                          arguments[1].targetY = a.posY
                        }
                      } else if (arguments[1].type === "zoomTo") {
                        if (a.scaleX !== undefined) {
                          arguments[1].targetX = a.scaleX
                        }
                        if (a.scaleY !== undefined) {
                          arguments[1].targetY = a.scaleY
                        }
                      }
                    }
                  }
                  runa.apply(this, arguments)
                }
                let siz = SAL_setElementSize
                SAL_setElementSize = function () {
                  if (arguments[0] && arguments[0].textureID && window.picInfo[arguments[0].textureID]) {
                    let a = window.picInfo[arguments[0].textureID]
                    if (a.width) {
                      arguments[1] = a.width
                    }
                    if (a.height) {
                      arguments[2] = a.height
                    }
                  }
                  siz.apply(this, arguments)
                }
              }
              if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
              if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
              if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
              if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
              if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
              if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
              if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
            }
            return
          }
          if (message.value[2] === 'other') {
            try {
              const response = await fetch(message.value[1]); // 等待 fetch 完成
              const blob = await response.blob(); // 等待 blob() 完成
              message.value[1] = URL.createObjectURL(blob); // 更新为 Blob URL
            } catch (error) {
              console.error('Error converting Data URL to Blob:', error);
            }
          }
          const picName = message.value[0];
          const picMd5 = message.value[1];
          if (fileList[picName]) {
            let mn = fileList[picName].url()
            if (tv.scene instanceof SCUI) {
              const nowInG = tv.scene.mask.childList.findIndex(v => v && v.imageUrl === mn)
              if (nowInG !== -1) {
                //tv.canvas.GamePictrue[nowInG].imageUrl = convertMD5ToCDNPath(picMd5)
                SAL_resetElement(tv.scene.mask.childList[nowInG].element, message.value[2] === 'cg' ? convertMD5ToCDNPath(picMd5) : picMd5)
                tv.scene.mask.childList[nowInG].imageUrl = tv.scene.mask.childList[nowInG].element.textureID
              }
            } else {
              const nowInG = tv.canvas.GamePictrue.findIndex(v => v && v.imageUrl === mn)
              if (nowInG !== -1) {
                //tv.canvas.GamePictrue[nowInG].imageUrl = convertMD5ToCDNPath(picMd5)
                SAL_resetElement(tv.canvas.GamePictrue[nowInG].element, message.value[2] === 'cg' ? convertMD5ToCDNPath(picMd5) : picMd5)
                tv.canvas.GamePictrue[nowInG].imageUrl = tv.canvas.GamePictrue[nowInG].element.textureID
              }
              const nowIn = tv.canvas.viewport.childList.findIndex(v => v && v.imageUrl === mn)
              if (nowIn !== -1) {
                tv.canvas.viewport.childList[nowIn].imageUrl = message.value[2] === 'cg' ? convertMD5ToCDNPath(picMd5) : picMd5
              }
              if (tv.inter.story[tv.inter.pos].Code === 100 && 'graphics/face/' + tv.inter.story[tv.inter.pos].Argv[3] === picName) {
                let b = tv.canvas.message[tv.canvas.msgIndex].view.element._children.find(v => v.textureID && v.textureID === mn)
                if (b) {
                  SAL_resetElement(b, message.value[2] === 'cg' ? convertMD5ToCDNPath(picMd5) : picMd5)
                }
              }
              if (tv.canvas.sFloatButton && tv.canvas.sFloatButton.isFBOnOff) {
                const mm = tv.canvas.sFloatButton.element._children.findIndex(v => v.textureID && v.textureID === mn)
                if (mm !== -1) {
                  SAL_resetElement(tv.canvas.sFloatButton.element._children[mm], message.value[2] === 'cg' ? convertMD5ToCDNPath(picMd5) : picMd5)
                }
              }
            }
            if (fileList[picName].local) {
              URL.revokeObjectURL(fileList[picName].local)
            }
            if (message.value[2] === 'cg') {
              fileList[picName].md5 = picMd5
              if (fileList[picName].local) {
                fileList[picName].url = function () { return convertMD5ToCDNPath(this.md5) }
              }
            } else if (message.value[2] === 'other') {
              fileList[picName].local = picMd5
              fileList[picName].url = function () { return this.local }
            }
          }
        }
      }
    }
  })

  //cg随意兑换
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgFreeRedeem' && window.userData) {
        const cgFreeRedeem = message.value;
        if (cgFreeRedeem && window.IMain && window.checkIIF) {
          if (tv.scene instanceof SCUI) {
            let choiceF = window.confirm('点击确定将所有兑换码的数值都会兑换（一般不会显示兑换成功的提示，但可以重复兑换）\n点击取消则是一个一个兑换码依次进行运行判断（可能有的游戏只能兑换第一个）\n一般我个人推荐大家使用确定的那种方法，按照个人喜好来，一般第二种有的游戏不怎么行的话就重开档用第一种。');
            window.ss = 1
            let searhP = false
            //重写IMain函数
            IMain = function () {
              this['\x65\x76\x65\x6e\x74'] = null,
                this['\x73\x74\x6f\x72\x79'] = new Array(),
                this['\x70\x6f\x73'] = -(416610 ^ 416608),
                this['\x69\x73\x45\x6e\x64'] = !0,
                this['\x65\x6e\x64\x4c\x6f\x67\x69\x63'] = null,
                this['\x73\x75\x62\x53\x74\x6f\x72\x79'] = null,
                this['\x69\x73\x43\x75\x69'] = !1,
                this['\x73\x74\x6f\x72\x79\x4e\x61\x6d\x65'] = function () {
                  return "";
                }(),
                this['\x73\x74\x6f\x72\x79\x49\x64'] = function () {
                  return 0;
                }(),
                this['\x69\x73\x4d\x75\x73\x74\x53\x61\x76\x65'] = !1,
                this['\x69\x73\x43\x61\x6e\x52\x75\x6e'] = !0,
                this['\x70\x72\x65\x6c\x6f\x61\x64\x49\x6e\x64\x65\x78'] = -1,
                this['\x75\x70\x64\x61\x74\x65'] = tv.inter.update
                ,
                this['\x50\x6f\x73\x41\x64\x64'] = function () {
                  return this['\x70\x6f\x73'] += function () {
                    return 1;
                  }(),
                    this['\x70\x6f\x73'] >= this['\x73\x74\x6f\x72\x79']['\x6c\x65\x6e\x67\x74\x68'] ? (this['\x69\x73\x45\x6e\x64'] = !0,
                      this['\x65\x76\x65\x6e\x74'] = null, window.backGame && new window.originIMain().MakerEvent(window.backGame), window.backGame = null,
                      !1) : !!this['\x4d\x61\x6b\x65\x72\x45\x76\x65\x6e\x74'](this['\x73\x74\x6f\x72\x79'][this['\x70\x6f\x73']]);
                }
                ,
                this['\x4d\x61\x6b\x65\x72\x45\x76\x65\x6e\x74'] = function (t) {
                  if (choiceF === true) {
                    let isO = [], isJS = [], isJSU = [];

                    // 分类事件
                    this.story.forEach(v => {
                      if ((v.Code === 207 || v.Code === 213) && (v.Argv[1] === '1' || v.Argv[1] === '0')) {
                        isO.push(v);
                      } else if (v.Code === 2063) {
                        isJS.push(v);
                      } else if (v.Code === 214 && parseInt(v.Argv[0]) < tv.data.System.Cuis.length) {
                        isJSU.push(v);
                      }
                    });

                    // 处理 isJSU 事件
                    if (isJSU.length && gIndex !== '1565470') {
                      isJSU.forEach(v => {
                        // if (gIndex === '1565470' && v.Argv[0] === '0') {
                        //   return
                        // }
                        const cuis = tv.data.System.Cuis[v.Argv[0]];

                        const processEvents = (events) => {
                          events.forEach(event => {
                            if ((event.Code === 207 || event.Code === 213) && (event.Argv[1] === '1' || event.Argv[1] === '0')) {
                              new window.originIMain().MakerEvent(event);
                            }
                          });
                        };

                        if (cuis.loadEvent.length) processEvents(cuis.loadEvent);
                        if (cuis.afterEvent.length) processEvents(cuis.afterEvent);
                        cuis.controls.forEach(control => {
                          if (control.event.length) processEvents(control.event);
                        });
                      });
                    }

                    // 处理 isJS 事件
                    if (isJS.length) {
                      isJS.forEach(v => {
                        tv.data.stories[v.Argv[0]].events.forEach(event => {
                          if ((event.Code === 207 || event.Code === 213) && (event.Argv[1] === '1' || event.Argv[1] === '0')) {
                            new window.originIMain().MakerEvent(event);
                          }
                        });
                      });
                    }

                    // 生成兑换提示
                    let redeemTip = '兑换成功！兑换奖励如下所示：\n';
                    let rewardMap = new Map();

                    isO.forEach(v => {
                      let match = v.Argv[4].match(/(二周目数值：|数值：|)\[\d+(：|:)[^\]]*\]/);
                      if (match) {
                        let key = match[0];
                        let number = parseInt(v.Argv[3]);
                        if (rewardMap.has(key)) {
                          if (v.Argv[1] === '1') {
                            let existingReward = rewardMap.get(key);
                            existingReward.number += number;
                          }
                        } else {
                          rewardMap.set(key, { value: key, number });
                        }
                        new window.originIMain().MakerEvent(v);
                      }
                    });

                    // 排序和显示兑换提示
                    let sortedRewards = Array.from(rewardMap.values()).sort((a, b) => {
                      let numA = parseInt(a.value.match(/\[(\d+)(：|:)/)[1]);
                      let numB = parseInt(b.value.match(/\[(\d+)(：|:)/)[1]);
                      return numA - numB;
                    });

                    sortedRewards.forEach((reward, index) => {
                      redeemTip += `（${index + 1}）${reward.value} = ${reward.number}\n`;
                    });
                    alert(redeemTip)
                    return this['\x65\x76\x65\x6e\x74'] = null, this['\x70\x6f\x73'] = this.story.length - 1, this['\x70\x6f\x73'] >= this['\x73\x74\x6f\x72\x79']['\x6c\x65\x6e\x67\x74\x68'] && (this['\x69\x73\x45\x6e\x64'] = !0, this['\x65\x76\x65\x6e\x74'] = null);
                  }
                  if (choiceF === false) {
                    // 函数用于处理事件
                    const processEvents = (events) => {
                      events.forEach(event => {
                        if ((event.Code === 207 || event.Code === 213) && (event.Argv[1] === '1' || event.Argv[1] === '0')) {
                          new window.originIMain().MakerEvent(event);
                        }
                      });
                    };

                    const findIIF = this.story.findIndex((v, k) => k > this.pos && (v.Code === 200 || v.Code === 217))

                    // 主逻辑
                    if (findIIF > -1) {
                      if (t.Code === 214 && parseInt(t.Argv[0]) < tv.data.System.Cuis.length) {
                        // if (gIndex === '1565470' && t.Argv[0] === '0') {
                        //   this.jumpToIndex(this.pos);
                        //   return;
                        // }
                        if (gIndex !== '1565470') {
                          const cuis = tv.data.System.Cuis[t.Argv[0]];
                          if (cuis.loadEvent.length) processEvents(cuis.loadEvent);
                          if (cuis.afterEvent.length) processEvents(cuis.afterEvent);
                          cuis.controls.forEach(control => {
                            if (control.event.length) processEvents(control.event);
                          });
                        }
                        this.jumpToIndex(this.pos + 1);
                      } else if (t.Code === 2063) {
                        const story = tv.data.stories[t.Argv[0]];
                        if (story.events.length) processEvents(story.events);
                        this.jumpToIndex(this.pos + 1);
                      } else if (t.Code === 151) {
                        window.backGame = t
                        return true
                      } else if (t.Code === 209 || t.Code === 211) {
                        this.jumpToIndex(findIIF);
                      } else {
                        return t && 700 != t['Code'] && (GloableData["getInstance"]()['isSkipVideo'] = !1),
                          this['\x65\x76\x65\x6e\x74'] = new IEventList()['\x4d\x61\x6b\x65\x72\x45\x76\x65\x6e\x74'](t, this),
                          null != this['\x65\x76\x65\x6e\x74'] && this['\x65\x76\x65\x6e\x74']['\x69\x6e\x69\x74']();
                      }
                    } else {
                      return t && 700 != t['Code'] && (GloableData["getInstance"]()['isSkipVideo'] = !1),
                        this['\x65\x76\x65\x6e\x74'] = new IEventList()['\x4d\x61\x6b\x65\x72\x45\x76\x65\x6e\x74'](t, this),
                        null != this['\x65\x76\x65\x6e\x74'] && this['\x65\x76\x65\x6e\x74']['\x69\x6e\x69\x74']();
                    }
                  }
                }//tv.inter.MakerEvent
                ,

                this['\x64\x69\x73\x70\x6f\x73\x65'] = tv.inter.dispose
                ,
                this['\x6a\x75\x6d\x70\x53\x74\x6f\x72\x79'] = tv.inter.jumpStory
                ,
                this['\x73\x74\x61\x72\x74\x53\x74\x6f\x72\x79'] = tv.inter.startStory
                ,
                this['\x6c\x6f\x61\x64\x45\x76\x65\x6e\x74'] = tv.inter.loadEvent
                ,
                this['\x63\x61\x6c\x6c\x4a\x75\x6d\x70'] = tv.inter.callJump
                ,
                this['\x63\x6f\x6d\x70\x6c\x65\x74\x65\x52\x75\x6e'] = tv.inter.completeRun
                ,
                this['\x77\x6d\x6f\x64\x4e\x65\x65\x64\x4e\x75\x6d'] = function () {
                  return 767345 ^ 767345;
                }(),
                this['\x6e\x65\x65\x64\x52\x65\x61\x64\x4c\x69\x73\x74'] = [],
                this['\x67\x65\x74\x57\x6d\x6f\x64\x42\x79\x45\x76\x65\x6e\x74\x73'] = tv.inter.getWmodByEvents
                ,
                this['\x73\x65\x74\x57\x6d\x6f\x64\x42\x79\x45\x76\x65\x6e\x74\x73'] = tv.inter.setWmodByEvents
                ,
                this['\x69\x73\x46\x69\x6e\x69\x73\x68'] = function () {
                  return this['\x69\x73\x45\x6e\x64'];
                }
                ,
                this['\x55\x70\x64\x61\x74\x65\x53\x43\x55\x49'] = tv.inter.UpdateSCUI
                ,
                this['\x6a\x75\x6d\x70\x54\x6f\x49\x6e\x64\x65\x78'] = tv.inter.jumpToIndex
                ,
                this['\x6a\x75\x6d\x70\x54\x6f\x42\x72\x61\x6e\x63\x68\x49\x6e\x64\x65\x78'] = tv.inter.jumpToBranchIndex
                ,
                this['\x6a\x75\x6d\x70\x54\x6f\x4f\x76\x65\x72\x43\x6f\x64\x65\x49\x6e\x64\x65\x78'] = tv.inter.jumpToOverCodeIndex
                ,
                this['\x73\x61\x76\x65\x44\x61\x74\x61'] = tv.inter.saveData
                ,
                this['\x6c\x6f\x61\x64\x43\x6c\x6f\x75\x64\x44\x61\x74\x61'] = tv.inter.loadCloudData
                ,
                this['\x67\x65\x74\x50\x72\x65\x4c\x6f\x61\x64\x49\x6e\x66\x6f'] = tv.inter.getPreLoadInfo
                ,
                this['\x67\x65\x74\x43\x75\x72\x45\x76\x65\x6e\x74'] = tv.inter.getCurEvent
                ,
                this['\x6e\x65\x65\x64\x50\x72\x65\x6c\x6f\x61\x64'] = tv.inter.needPreload
                ,
                this['\x6e\x65\x65\x64\x50\x61\x75\x73\x65\x50\x72\x65\x6c\x6f\x61\x64'] = tv.inter.needPausePreload
                ;
            }
            checkIIF = function () {
              //window.needFalseIIF = true
              return true
            };
            compareVar = function (t, e, i) {
              return true
              //return window.oriCompareVar(t, e, i)
            }
          } else if (tv.scene instanceof SGame) {
            const newP = tv.inter.story.findIndex((v, k) => k > tv.inter.pos && (v.Code === 217 || v.Code === 200))
            tv.inter.jumpToIndex(newP + 1)
            tv.inter.update()
            checkIIF = function () {
              return true
            };
            compareVar = function (t, e, i) {
              return true
            }
          }
        } else {
          IMain = window.originIMain
          checkIIF = window.oriCheckIIF
          compareVar = window.oriCompareVar
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'replaceCgJg' && window.userData) {
        localStorage.setItem('isCgChange', message.value)
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgZj' && window.userData) {
        if (message.value) {
          window.openSelfT = true
          const IIFType = window.confirm('单个数值判断都为假false吗(有的游戏可能会有问题)？\n建议点击取消按照是什么结果就是什么结果\n一般是可以点击确定的，看具体游戏的效果吧')
          function getNPos() {
            const currentStory = tv.storyList.currentStory;
            const story = currentStory.story;
            let currentPos = currentStory.pos;
            if (currentPos >= story.length) {
              return story.length - 1
            }
            const currentIndent = story[currentPos].Indent;
            while (currentPos < story.length - 1) {
              currentPos++;
              const nextStory = story[currentPos];
              if (nextStory.Indent < currentIndent && nextStory.Code !== 201) {
                currentStory.pos = currentPos;
                return currentPos;
              }
            }
            currentStory.pos = currentPos;
            return currentPos;
          }
          let firstC = true, firs = 1, checkS = '', checkStoryN = '', checkStoryUI = -1
          window.incEvent = new Set();
          window.incStoEvent = {}
          window.incStoEventUI = {}
          checkIIF = function (t) {
            if (tv.scene instanceof SGame) {
              if (checkStoryN === '' || checkStoryN !== tv.storyList.currentStory.storyName) {
                checkStoryN = tv.storyList.currentStory.storyName
                const stoN = tv.storyList.currentStory.storyName
                window.incStoEvent[stoN] = []
                tv.storyList.currentStory.story.forEach(v => {
                  if (v.Code === 200) {
                    window.incStoEvent[stoN].push(v.Argv[5])
                  } else if (v.Code === 217) {
                    window.incStoEvent[stoN].push(v.Argv[2])
                  } else if (v.Code === 107) {
                    window.incStoEvent[stoN].push(`以下是：${v.Argv[0]}`)
                  }
                })
              }
            } else if (tv.scene instanceof SCUI) {
              if (checkStoryUI === -1 || checkStoryUI !== tv.CUIFromIndex) {
                checkStoryUI = tv.CUIFromIndex
                const nowUI = tv.data.System.Cuis[tv.CUIFromIndex]
                if (nowUI) {
                  const stoN = `UI——id为${tv.CUIFromIndex}`
                  window.incStoEventUI[stoN] = []
                  if (nowUI.loadEvent.length !== 0) {
                    window.incStoEventUI[stoN].push('****loadEvent：进入便执行****')
                    nowUI.loadEvent.forEach(v => {
                      if (v.Code === 200) {
                        window.incStoEventUI[stoN].push(v.Argv[5])
                      } else if (v.Code === 217) {
                        window.incStoEventUI[stoN].push(v.Argv[2])
                      } else if (v.Code === 107) {
                        window.incStoEventUI[stoN].push(`以下是：${v.Argv[0]}`)
                      }
                    })
                  }
                  if (nowUI.afterEvent.length !== 0) {
                    window.incStoEventUI[stoN].push('****afterEvent：loadEvent执行后执行****')
                    nowUI.afterEvent.forEach(v => {
                      if (v.Code === 200) {
                        window.incStoEventUI[stoN].push(v.Argv[5])
                      } else if (v.Code === 217) {
                        window.incStoEventUI[stoN].push(v.Argv[2])
                      } else if (v.Code === 107) {
                        window.incStoEventUI[stoN].push(`以下是：${v.Argv[0]}`)
                      }
                    })
                  }
                  if (nowUI.controls.length !== 0) {
                    window.incStoEventUI[stoN].push('****按钮点击事件****')
                    nowUI.controls.forEach(v1 => {
                      if (v1.type === 0 && v1.event.length !== 0) {
                        const index = v1.isUserIndex ? tv['system']['vars']['getVar'](v1['index']) - 1 : v1['index'];
                        let buttonN
                        if (index < 0 || index >= tv.data.System.Buttons.length) {
                          buttonN = `/*index为${v1.index}的按钮点击事件*/`
                        } else {
                          const nameButton = tv.data.System.Buttons[index].name;
                          buttonN = `/*index为${v1.index}：<${nameButton}>的按钮点击事件*/`
                        }
                        window.incStoEventUI[stoN].push(buttonN)
                        v1.event.forEach(v => {
                          if (v.Code === 200) {
                            window.incStoEventUI[stoN].push(v.Argv[5])
                          } else if (v.Code === 217) {
                            window.incStoEventUI[stoN].push(v.Argv[2])
                          } else if (v.Code === 107) {
                            window.incStoEventUI[stoN].push(`以下是：${v.Argv[0]}`)
                          }
                        })
                      }
                    })
                  }
                }
              }
            }
            return IIFType ? false : window.oriCheckIIF(t)
          }
          compareVar = function (t, e, i) {
            //let isMulitiIIF
            if (tv.scene instanceof SGame) {
              if (checkStoryN === '' || checkStoryN !== tv.storyList.currentStory.storyName) {
                checkStoryN = tv.storyList.currentStory.storyName
                const stoN = tv.storyList.currentStory.storyName
                window.incStoEvent[stoN] = []
                tv.storyList.currentStory.story.forEach(v => {
                  if (v.Code === 200) {
                    window.incStoEvent[stoN].push(v.Argv[5])
                  } else if (v.Code === 217) {
                    window.incStoEvent[stoN].push(v.Argv[2])
                  } else if (v.Code === 107) {
                    window.incStoEvent[stoN].push(`以下是：${v.Argv[0]}`)
                  }
                })
              }
              const currentStory = tv.storyList.currentStory
              const nowEvent = currentStory.story[currentStory.pos]
              nowEvent.Code === 200 && window.incEvent.add(nowEvent.Argv[5])
            } else if (tv.scene instanceof SCUI) {
              if (checkStoryUI === -1 || checkStoryUI !== tv.CUIFromIndex) {
                checkStoryUI = tv.CUIFromIndex
                const nowUI = tv.data.System.Cuis[tv.CUIFromIndex]
                if (nowUI) {
                  const stoN = `UI——id为${tv.CUIFromIndex}`
                  window.incStoEventUI[stoN] = []
                  if (nowUI.loadEvent.length !== 0) {
                    window.incStoEventUI[stoN].push('****loadEvent：进入便执行****')
                    nowUI.loadEvent.forEach(v => {
                      if (v.Code === 200) {
                        window.incStoEventUI[stoN].push(v.Argv[5])
                      } else if (v.Code === 217) {
                        window.incStoEventUI[stoN].push(v.Argv[2])
                      } else if (v.Code === 107) {
                        window.incStoEventUI[stoN].push(`以下是：${v.Argv[0]}`)
                      }
                    })
                  }
                  if (nowUI.afterEvent.length !== 0) {
                    window.incStoEventUI[stoN].push('****afterEvent：loadEvent执行后执行****')
                    nowUI.afterEvent.forEach(v => {
                      if (v.Code === 200) {
                        window.incStoEventUI[stoN].push(v.Argv[5])
                      } else if (v.Code === 217) {
                        window.incStoEventUI[stoN].push(v.Argv[2])
                      } else if (v.Code === 107) {
                        window.incStoEventUI[stoN].push(`以下是：${v.Argv[0]}`)
                      }
                    })
                  }
                  if (nowUI.controls.length !== 0) {
                    window.incStoEventUI[stoN].push('****按钮点击事件****')
                    nowUI.controls.forEach(v1 => {
                      if (v1.type === 0 && v1.event.length !== 0) {
                        const index = v1.isUserIndex ? tv['system']['vars']['getVar'](v1['index']) - 1 : v1['index'];
                        let buttonN
                        if (index < 0 || index >= tv.data.System.Buttons.length) {
                          buttonN = `/*index为${v1.index}的按钮点击事件*/`
                        } else {
                          const nameButton = tv.data.System.Buttons[index].name;
                          buttonN = `/*index为${v1.index}：<${nameButton}>的按钮点击事件*/`
                        }
                        window.incStoEventUI[stoN].push(buttonN)
                        v1.event.forEach(v => {
                          if (v.Code === 200) {
                            window.incStoEventUI[stoN].push(v.Argv[5])
                          } else if (v.Code === 217) {
                            window.incStoEventUI[stoN].push(v.Argv[2])
                          } else if (v.Code === 107) {
                            window.incStoEventUI[stoN].push(`以下是：${v.Argv[0]}`)
                          }
                        })
                      }
                    })
                  }
                }
              }
            }
            return IIFType ? false : window.oriCompareVar(t, e, i)
          }
          backToMainMenu = function () {
            if (tv.scene instanceof SGame) {
              if (tv.storyList.storyList.length !== 0) {
                const currentStory = tv.storyList.currentStory;
                const nowEvent = currentStory.story[currentStory.pos - 1]
                if (nowEvent.Code === 200) {
                  window.incEvent.add(nowEvent.Argv[5])
                } else if (nowEvent.Code === 217) {
                  window.incEvent.add(nowEvent.Argv[2])
                }
                const nextPos = getNPos()
                currentStory.jumpToIndex(nextPos + 1)
                currentStory.update();
              } else {
                return true
              }
            } else if (tv.scene instanceof SCUI) {
              if (checkStoryUI === -1 || checkStoryUI !== tv.CUIFromIndex) {
                checkStoryUI = tv.CUIFromIndex
                const nowUI = tv.data.System.Cuis[tv.CUIFromIndex]
                if (nowUI) {
                  const stoN = `UI——id为${tv.CUIFromIndex}`
                  window.incStoEventUI[stoN] = []
                  if (nowUI.loadEvent.length !== 0) {
                    window.incStoEventUI[stoN].push('****loadEvent：进入便执行****')
                    nowUI.loadEvent.forEach(v => {
                      if (v.Code === 200) {
                        window.incStoEventUI[stoN].push(v.Argv[5])
                      } else if (v.Code === 217) {
                        window.incStoEventUI[stoN].push(v.Argv[2])
                      } else if (v.Code === 107) {
                        window.incStoEventUI[stoN].push(`以下是：${v.Argv[0]}`)
                      }
                    })
                  }
                  if (nowUI.afterEvent.length !== 0) {
                    window.incStoEventUI[stoN].push('****afterEvent：loadEvent执行后执行****')
                    nowUI.afterEvent.forEach(v => {
                      if (v.Code === 200) {
                        window.incStoEventUI[stoN].push(v.Argv[5])
                      } else if (v.Code === 217) {
                        window.incStoEventUI[stoN].push(v.Argv[2])
                      } else if (v.Code === 107) {
                        window.incStoEventUI[stoN].push(`以下是：${v.Argv[0]}`)
                      }
                    })
                  }
                  if (nowUI.controls.length !== 0) {
                    window.incStoEventUI[stoN].push('****按钮点击事件****')
                    nowUI.controls.forEach(v1 => {
                      if (v1.type === 0 && v1.event.length !== 0) {
                        const index = v1.isUserIndex ? tv['system']['vars']['getVar'](v1['index']) - 1 : v1['index'];
                        let buttonN
                        if (index < 0 || index >= tv.data.System.Buttons.length) {
                          buttonN = `/*index为${v1.index}的按钮点击事件*/`
                        } else {
                          const nameButton = tv.data.System.Buttons[index].name;
                          buttonN = `/*index为${v1.index}：<${nameButton}>的按钮点击事件*/`
                        }
                        window.incStoEventUI[stoN].push(buttonN)
                        v1.event.forEach(v => {
                          if (v.Code === 200) {
                            window.incStoEventUI[stoN].push(v.Argv[5])
                          } else if (v.Code === 217) {
                            window.incStoEventUI[stoN].push(v.Argv[2])
                          } else if (v.Code === 107) {
                            window.incStoEventUI[stoN].push(`以下是：${v.Argv[0]}`)
                          }
                        })
                      }
                    })
                  }
                }
              }
              return true
            }
          }
        } else {
          window.openSelfT = false
          //const needCloseBT = window.confirm('需要关闭防护返回标题的自检吗？\n如果这个游戏的自检后返回标题，可以不用关\n如果通过获取的判断去通过了自检，那就关闭吧')
          backToMainMenu = window.originBackT
          checkIIF = window.oriCheckIIF
          compareVar = window.oriCompareVar
        }
      } else if (message.type === 'cgZjGet' && window.userData) {
        const allIIF = Object.assign({}, window.incStoEvent, window.incStoEventUI)
        const customEvent1 = new CustomEvent("cgZjDetails", {
          detail: { value: [[...window.incEvent], allIIF] }
        });
        window.dispatchEvent(customEvent1);
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgClearAllPI' && window.userData) {
        function saveCloudData() {
          const keys = Object.keys(window.cloudSaveOldShow);
          let index = 0, ismoa = false;
          GloableData._instance.cloudData = {}
          function saveNext() {
            if (index >= keys.length) { return }
            const v = keys[index];
            cloudProxy.downSaveDataNew(function (data) {
              let clouda = JSON.parse(data.data.cloud_data)
              window.cloudSaveOld[v] = clouda
              window.cloudSaveOld[v].ts = data.data.last_save_time
              if ((clouda.PlayerBuyItem && clouda.PlayerBuyItem.items.length !== 0) ||
                (clouda.UserPurchaseInfo && clouda.UserPurchaseInfo.items.length !== 0) ||
                (clouda.timeMallData && clouda.timeMallData.length !== 0)) {
                if (clouda.PlayerBuyItem) clouda.PlayerBuyItem.items = [];
                if (clouda.UserPurchaseInfo) clouda.UserPurchaseInfo.items = [];
                if (clouda.timeMallData) clouda.timeMallData = [];
                if (!ismoa) {
                  const customEvent56 = new CustomEvent("cgCloudShopNum", {
                    detail: { value: true }
                  });
                  window.dispatchEvent(customEvent56);
                  ismoa = true
                }
                const saveContent = { [v]: clouda };
                cloudProxy.upSaveCloudData(saveContent, () => {
                  index++; // 更新索引，处理下一个
                  saveNext(); // 递归调用
                });
              } else {
                index++; // 如果没有需要保存的内容，直接更新索引
                saveNext(); // 递归调用
              }
            }, undefined, v)
          }
          saveNext(); // 开始保存过程
        }
        if (window.cloudSaveOldShow) {
          saveCloudData()
        } else {
          GloableData._instance.cloudInfo.latest = -1
          GloableData._instance.cloudInfo.needGet = false
          GloableData._instance.cloudInfo.ts = 0
          cloudProxy.downSaveShowData(function () {
            window.cloudSaveOld = {}
            saveCloudData()
          })
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgRemoveCloudSave' && window.userData) {
        function deleteNext(index, cloudIndexArray) {
          if (index >= cloudIndexArray.length) return; // 所有删除操作完成
          const ind = cloudIndexArray[index].trim(); // 去除空格
          const cloudIndex = parseInt(ind);
          if (isNaN(cloudIndex)) {
            alert(`无效的索引：${ind}`);
            deleteNext(index + 1); // 递归处理下一个
            return;
          }
          if (window.cloudSaveOldShow) {
            const findS = Object.keys(window.cloudSaveOldShow).find(v => v === ind);
            if (findS) {
              cloudProxy.deleteCloudData(cloudIndex, () => { delete GloableData._instance.cloudShowData[cloudIndex]; deleteNext(index + 1, cloudIndexArray) });
            } else {
              alert(`当前第${cloudIndex}个档位没有存档`);
              cloudProxy.deleteCloudData(cloudIndex, () => { delete GloableData._instance.cloudShowData[cloudIndex]; deleteNext(index + 1, cloudIndexArray) });
            }
          } else {
            cloudProxy.deleteCloudData(cloudIndex, () => { delete GloableData._instance.cloudShowData[cloudIndex]; deleteNext(index + 1, cloudIndexArray) });
          }
        }
        if (message.value !== 'true') {
          if (message.value.includes(',') || message.value.includes('，')) {
            let cloudIndexArray
            if (message.value.includes(',')) {
              cloudIndexArray = message.value.split(',')
            } else {
              cloudIndexArray = message.value.split('，')
            }
            deleteNext(0, cloudIndexArray);
          } else {
            const cloudIndex = parseInt(message.value)
            if (isNaN(cloudIndex)) {
              alert('无效输入')
              return;
            }
            if (window.cloudSaveOldShow) {
              const findS = Object.keys(window.cloudSaveOldShow).find(v => v === message.value)
              if (findS) {
                cloudProxy.deleteCloudData(cloudIndex)
                delete GloableData._instance.cloudShowData[cloudIndex];
              } else {
                alert(`当前第${cloudIndex}个档位没有存档`)
                cloudProxy.deleteCloudData(cloudIndex)
                delete GloableData._instance.cloudShowData[cloudIndex];
              }
            } else {
              cloudProxy.deleteCloudData(cloudIndex)
              delete GloableData._instance.cloudShowData[cloudIndex];
            }
          }
        } else {
          if (window.cloudSaveOldShow) {
            deleteNext(0, Object.keys(window.cloudSaveOldShow))
          }
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgResetValue' && window.userData) {
        if (tv.system.varsEx.data.length !== 0 && window.confirm('需要清除二周目数值吗？')) {
          tv.system.varsEx.data.forEach((v, k) => {
            if (v) {
              tv.system.varsEx.data[k] = 0
            }
          })
          tv.system.varsEx.saveExData()
        }
        if (tv.system.vars.data.length !== 0 && window.confirm('需要清除单档数值吗？')) {
          tv.system.vars.data.forEach((v, k) => {
            if (v) {
              tv.system.vars.data[k] = 0
            }
          })
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'cgGetUIValues' && window.userData) {
        if (message.value === 1) {
          if (window.isProTv) {
            alert('已经开启获取，无需重复点击')
            return
          }
          if (!window.proTvData) { window.proTvData = { vars: tv.system.vars.data, varsEx: tv.system.varsEx.data } }
          window.accessedIndices = new Set(), window.accessedIndicesEx = new Set();
          // 创建代理
          tv.system.vars.data = new Proxy(window.proTvData.vars, {
            get(target, prop, receiver) {
              if (!isNaN(prop)) {
                accessedIndices.add(Number(prop)); // 记录访问的索引
              }
              return Reflect.get(target, prop, receiver);
            },
            set(target, prop, value, receiver) {
              return Reflect.set(target, prop, value, receiver);
            }
          });
          tv.system.varsEx.data = new Proxy(window.proTvData.varsEx, {
            get(target, prop, receiver) {
              if (!isNaN(prop)) {
                accessedIndicesEx.add(Number(prop)); // 记录访问的索引
              }
              return Reflect.get(target, prop, receiver);
            },
            set(target, prop, value, receiver) {
              return Reflect.set(target, prop, value, receiver);
            }
          });
          window.isProTv = true
        } else {
          if (window.isProTv) {
            window.isProTv = false
            tv.system.vars.data = window.proTvData.vars
            tv.system.varsEx.data = window.proTvData.varsEx
            const varIFId = [...accessedIndices].sort((a, b) => a - b),
              varExIFId = [...accessedIndicesEx].sort((a, b) => a - b), varIFSend = []
            varExIFId.forEach(id => {
              const oldV = window.allCgValues.filter(v => v.valueId === id && v.isEx)
              if (oldV.length !== 0) {
                oldV.forEach((v, k) => {
                  oldV[k].valueNum = tv.system.varsEx.data[id] || 0
                  oldV[k].isEx = true
                  varIFSend.push(oldV[k])
                })
              } else {
                const valueN = tv.system.varsEx.data[id] || 0
                varIFSend.push({ valueName: `二周目数值：[${id}：无法查到名称]`, valueNum: valueN, valueId: id, isEx: true })
              }
            })
            varIFId.forEach(id => {
              const oldV = window.allCgValues.filter(v => v.valueId === id && !v.isEx)
              if (oldV.length !== 0) {
                oldV.forEach((v, k) => {
                  oldV[k].valueNum = tv.system.vars.data[id] || 0
                  oldV[k].isEx = false
                  varIFSend.push(oldV[k])
                })
              } else {
                const valueN = tv.system.vars.data[id] || 0
                varIFSend.push({ valueName: `[${id}：无法查到名称]`, valueNum: valueN, valueId: id, isEx: false })
              }
            })
            const customEvent1 = new CustomEvent("cgUIV", {
              detail: { value: { showValue: [], allValue: varIFSend } }
            });
            window.dispatchEvent(customEvent1);
            return
          }
          let varSet = new Set()
          let varIF = new Set()
          let varExIF = new Set()
          let indexAllLoad = []
          let indexAllAfter = []
          let indexAllControl = []
          function getUIEventV(event) {
            let indexK = 0
            event.forEach((v, k) => {
              if (v.Code === 200) {
                if (v.Argv[0].includes('EX')) {
                  let vaId = parseInt(v.Argv[0].split('|')[1])
                  varExIF.add(vaId)
                } else if (v.Argv[0].includes('FL')) {
                  if (v.Argv[2] === '1') {
                    let vaId = parseInt(v.Argv[3])
                    varIF.add(vaId)
                  } else if (v.Argv[2] === '2') {
                    let vaId = parseInt(v.Argv[3])
                    varExIF.add(vaId)
                  }
                } else if (!Number.isNaN(parseInt(v.Argv[0]))) {
                  let vaId = parseInt(v.Argv[0])
                  varIF.add(vaId)
                }
              } else if (v.Code === 217) {
                const maxI = parseInt(v.Argv[3])
                let startI = 4
                for (let i = 0; i < maxI; i++) {
                  const vId = v.Argv[startI + i].split('&')
                  if (vId[0].includes('EX')) {
                    let vaId = parseInt(vId[0].split('|')[1])
                    varExIF.add(vaId)
                  } else if (vId[0].includes('FL')) {
                    if (vId[2] === '1') {
                      let vaId = parseInt(vId[3])
                      varIF.add(vaId)
                    } else if (vId[2] === '2') {
                      let vaId = parseInt(vId[3])
                      varExIF.add(vaId)
                    }
                  } else if (!Number.isNaN(parseInt(vId[0]))) {
                    let vaId = parseInt(vId[0])
                    varIF.add(vaId)
                  }
                }
              } else if (v.Code === 207) {
                const e = convertValueOperationData(v.Argv)
                if (e.useIndex) {
                  const newLoad = event.slice(indexK, k + 1)
                  newLoad.forEach(v1 => {
                    if (v1.Code === 207 && (parseInt(v1.Argv[0]) === e.index || parseInt(v1.Argv[3]) === e.index)) {
                      indexAllLoad.push(v1.Argv[4])
                    } else if (v1.Code === 213 && (parseInt(v1.Argv[0]) === e.index || parseInt(v1.Argv[3]) === e.index)) {
                      indexAllLoad.push(v1.Argv[4])
                    }
                  })
                  indexK = k + 1
                } else {
                  if (e.isExValue) {
                    varExIF.add(e.index)
                  } else {
                    varIF.add(e.index)
                  }
                }
                if (e.firstValueData) {
                  if (e.firstValueData.type === 1) {
                    varIF.add(e.firstValueData.idOrValue)
                  } else if (e.firstValueData.type === 3) {
                    varExIF.add(e.firstValueData.idOrValue)
                  } else if (e.firstValueData.type === 4) {
                    const newLoad = event.slice(indexK, k + 1)
                    newLoad.forEach(v1 => {
                      if (v1.Code === 207 && (parseInt(v1.Argv[0]) === e.firstValueData.idOrValue || parseInt(v1.Argv[3]) === e.firstValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      } else if (v1.Code === 213 && (parseInt(v1.Argv[0]) === e.firstValueData.idOrValue || parseInt(v1.Argv[3]) === e.firstValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      }
                    })
                    indexK = k + 1
                  }
                }
                if (e.secondValueData) {
                  if (e.secondValueData.type === 1) {
                    varIF.add(e.secondValueData.idOrValue)
                  } else if (e.secondValueData.type === 3) {
                    varExIF.add(e.secondValueData.idOrValue)
                  } else if (e.secondValueData.type === 4) {
                    const newLoad = event.slice(indexK, k + 1)
                    newLoad.forEach(v1 => {
                      if (v1.Code === 207 && (parseInt(v1.Argv[0]) === e.secondValueData.idOrValue || parseInt(v1.Argv[3]) === e.secondValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      } else if (v1.Code === 213 && (parseInt(v1.Argv[0]) === e.secondValueData.idOrValue || parseInt(v1.Argv[3]) === e.secondValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      }
                    })
                    indexK = k + 1
                  }
                }
              } else if (v.Code === 213) {
                const e = convertValueOperationData(v.Argv, true)
                if (e.useIndex) {
                  const newLoad = event.slice(indexK, k + 1)
                  newLoad.forEach(v1 => {
                    if (v1.Code === 207 && (parseInt(v1.Argv[0]) === e.index || parseInt(v1.Argv[3]) === e.index)) {
                      indexAllLoad.push(v1.Argv[4])
                    } else if (v1.Code === 213 && (parseInt(v1.Argv[0]) === e.index || parseInt(v1.Argv[3]) === e.index)) {
                      indexAllLoad.push(v1.Argv[4])
                    }
                  })
                  indexK = k + 1
                } else {
                  if (e.isExValue) {
                    varExIF.add(e.index)
                  } else {
                    varIF.add(e.index)
                  }
                }
                if (e.firstValueData) {
                  if (e.firstValueData.type === 1) {
                    varIF.add(e.firstValueData.idOrValue)
                  } else if (e.firstValueData.type === 3) {
                    varExIF.add(e.firstValueData.idOrValue)
                  } else if (e.firstValueData.type === 4) {
                    const newLoad = event.slice(indexK, k + 1)
                    newLoad.forEach(v1 => {
                      if (v1.Code === 207 && (parseInt(v1.Argv[0]) === e.firstValueData.idOrValue || parseInt(v1.Argv[3]) === e.firstValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      } else if (v1.Code === 213 && (parseInt(v1.Argv[0]) === e.firstValueData.idOrValue || parseInt(v1.Argv[3]) === e.firstValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      }
                    })
                    indexK = k + 1
                  }
                }
                if (e.secondValueData) {
                  if (e.secondValueData.type === 1) {
                    varIF.add(e.secondValueData.idOrValue)
                  } else if (e.secondValueData.type === 3) {
                    varExIF.add(e.secondValueData.idOrValue)
                  } else if (e.secondValueData.type === 4) {
                    const newLoad = event.slice(indexK, k + 1)
                    newLoad.forEach(v1 => {
                      if (v1.Code === 207 && (parseInt(v1.Argv[0]) === e.secondValueData.idOrValue || parseInt(v1.Argv[3]) === e.secondValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      } else if (v1.Code === 213 && (parseInt(v1.Argv[0]) === e.secondValueData.idOrValue || parseInt(v1.Argv[3]) === e.secondValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      }
                    })
                    indexK = k + 1
                  }
                }
              } else if (v.Code === 215 && /\\v/.test(v.Argv[1])) {
                const regex = /\\v\[(\d+)\]/g;
                const matches = [...v.Argv[1].matchAll(regex)];
                const numbers = matches.map(match => match[1]);
                numbers.forEach(id => {
                  const vaId = parseInt(id) - 1
                  varIF.add(vaId)
                })
              } else if (v.Code === 216) {
                const e = convertValueOperationData(v.Argv)
                if (e.useIndex) {
                  const newLoad = event.slice(indexK, k + 1)
                  newLoad.forEach(v1 => {
                    if (v1.Code === 207 && (parseInt(v1.Argv[0]) === e.index || parseInt(v1.Argv[3]) === e.index)) {
                      indexAllLoad.push(v1.Argv[4])
                    } else if (v1.Code === 213 && (parseInt(v1.Argv[0]) === e.index || parseInt(v1.Argv[3]) === e.index)) {
                      indexAllLoad.push(v1.Argv[4])
                    }
                  })
                  indexK = k + 1
                } else {
                  if (e.isExValue) {
                    varExIF.add(e.index)
                  } else {
                    varIF.add(e.index)
                  }
                }
                if (e.firstValueData) {
                  if (e.firstValueData.type === 1) {
                    varIF.add(e.firstValueData.idOrValue)
                  } else if (e.firstValueData.type === 3) {
                    varExIF.add(e.firstValueData.idOrValue)
                  } else if (e.firstValueData.type === 4) {
                    const newLoad = event.slice(indexK, k + 1)
                    newLoad.forEach(v1 => {
                      if (v1.Code === 207 && (parseInt(v1.Argv[0]) === e.firstValueData.idOrValue || parseInt(v1.Argv[3]) === e.firstValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      } else if (v1.Code === 213 && (parseInt(v1.Argv[0]) === e.firstValueData.idOrValue || parseInt(v1.Argv[3]) === e.firstValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      }
                    })
                    indexK = k + 1
                  }
                }
                if (e.secondValueData) {
                  if (e.secondValueData.type === 1) {
                    varIF.add(e.secondValueData.idOrValue)
                  } else if (e.secondValueData.type === 3) {
                    varExIF.add(e.secondValueData.idOrValue)
                  } else if (e.secondValueData.type === 4) {
                    const newLoad = event.slice(indexK, k + 1)
                    newLoad.forEach(v1 => {
                      if (v1.Code === 207 && (parseInt(v1.Argv[0]) === e.secondValueData.idOrValue || parseInt(v1.Argv[3]) === e.secondValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      } else if (v1.Code === 213 && (parseInt(v1.Argv[0]) === e.secondValueData.idOrValue || parseInt(v1.Argv[3]) === e.secondValueData.idOrValue)) {
                        indexAllLoad.push(v1.Argv[4])
                      }
                    })
                    indexK = k + 1
                  }
                }
              }
            })
          }
          if (tv.scene instanceof SCUI) {
            const nowUI = tv.data.System.Cuis[tv.CUIFromIndex]
            if (nowUI.loadEvent.length !== 0) {
              getUIEventV(nowUI.loadEvent)
            }
            nowUI.controls.forEach(v => {
              if (v.type === 2) {
                varSet.add(v.index)
              } else if (v.type === 4) {
                varSet.add(v.index)
                varSet.add(v.maxIndex)
              } else if (v.type === 0 && v.event.length !== 0) {
                getUIEventV(v.event)
              }
            })
            if (nowUI.afterEvent.length !== 0) {
              getUIEventV(nowUI.afterEvent)
            }
            if (indexAllLoad.length !== 0) {
              indexAllLoad.unshift('——loadEvent：一开始执行的事件——')
            }
            if (indexAllAfter.length !== 0) {
              indexAllAfter.unshift('——afterEvent：loadEvent执行后执行的事件——')
            }
            if (indexAllControl.length !== 0) {
              indexAllControl.unshift('——按钮点击事件——')
            }
            const indexEnd = indexAllLoad.concat(indexAllAfter).concat(indexAllControl)
            if (indexEnd.length !== 0) {
              const customEvent1 = new CustomEvent("cgIndex", {
                detail: { value: indexEnd }
              });
              window.dispatchEvent(customEvent1);
            }
            const varIFId = [...varIF].sort((a, b) => a - b),
              varExIFId = [...varExIF].sort((a, b) => a - b), varIFSend = []
            varExIFId.forEach(id => {
              const oldV = window.allCgValues.filter(v => v.valueId === id && v.isEx)
              if (oldV.length !== 0) {
                oldV.forEach((v, k) => {
                  oldV[k].valueNum = tv.system.varsEx.data[id] || 0
                  oldV[k].isEx = true
                  varIFSend.push(oldV[k])
                })
              } else {
                const valueN = tv.system.varsEx.data[id] || 0
                varIFSend.push({ valueName: `二周目数值：[${id}：无法查到名称]`, valueNum: valueN, valueId: id, isEx: true })
              }
            })
            varIFId.forEach(id => {
              const oldV = window.allCgValues.filter(v => v.valueId === id && !v.isEx)
              if (oldV.length !== 0) {
                oldV.forEach((v, k) => {
                  oldV[k].valueNum = tv.system.vars.data[id] || 0
                  oldV[k].isEx = false
                  varIFSend.push(oldV[k])
                })
              } else {
                const valueN = tv.system.vars.data[id] || 0
                varIFSend.push({ valueName: `[${id}：无法查到名称]`, valueNum: valueN, valueId: id, isEx: false })
              }
            })
            const varId = [...varSet].sort((a, b) => a - b), varSend = []
            varId.forEach(id => {
              const oldV = window.allCgValues.filter(v => v.valueId === id && !v.isEx)
              if (oldV.length !== 0) {
                oldV.forEach((v, k) => {
                  oldV[k].valueNum = tv.system.vars.data[id] || 0
                  oldV[k].isEx = false
                  varSend.push(oldV[k])
                })
              } else {
                const valueN = tv.system.vars.data[id] || 0
                varSend.push({ valueName: `[${id}：无法查到名称]`, valueNum: valueN, valueId: id, isEx: false })
              }
            })
            const customEvent1 = new CustomEvent("cgUIV", {
              detail: { value: { showValue: varSend, allValue: varIFSend } }
            });
            window.dispatchEvent(customEvent1);
          } else if (tv.scene instanceof SGameNewMall || tv.scene instanceof SGameMall || tv.scene instanceof SGameTimeMall) {
            const products = tv.scene instanceof SGameNewMall ? tv.gameNewMall.goodList.goods : tv.scene instanceof SGameMall ? tv.gameMallBin.items : tv.gameTimeMall.goodList.goods
            products.forEach(v => {
              v.itemAttributes.forEach(ia => {
                varSet.add(ia.arrributeId)
              })
            })
            const varId = [...varSet].sort((a, b) => a - b), varSend = []
            varId.forEach(id => {
              const oldV = window.allCgValues.filter(v => v.valueId === id && !v.isEx)
              if (oldV.length !== 0) {
                oldV.forEach((v, k) => {
                  oldV[k].valueNum = tv.system.vars.data[id] || 0
                  oldV[k].isEx = false
                  varSend.push(oldV[k])
                })
              } else {
                const valueN = tv.system.vars.data[id] || 0
                varSend.push({ valueName: `[${id}：无法查到名称]`, valueNum: valueN, valueId: id, isEx: false })
              }
            })
            const customEvent1 = new CustomEvent("cgUIV", {
              detail: { value: { showValue: varSend, allValue: [] } }
            });
            window.dispatchEvent(customEvent1);
          } else {
            if (tv.canvas.sFloatButton) {
              const isVF = tv.canvas.sFloatButton.isVisibilArray.find(v => v === 1)
              if (!isVF) {
                alert('暂未处于UI界面')
              } else {
                tv.canvas.sFloatButton.isVisibilArray.forEach((v, k) => {
                  if (v === 1) {
                    const fb = tv.data.DFloatButton[k]
                    fb.DFloatItem.forEach(v1 => {
                      switch (v1.type) {
                        case 2:
                          varSet.add(v1.varIndex)
                          break;
                        case 3:
                          varSet.add(v1.varIndex)
                          varSet.add(v1.stringIndex)
                          break;
                      }
                    })
                    if (fb.event && fb.event.length > 0) {
                      getUIEventV(fb.event)
                    }
                  }
                })
                const indexEnd = indexAllLoad.concat(indexAllAfter).concat(indexAllControl)
                if (indexEnd.length !== 0) {
                  const customEvent1 = new CustomEvent("cgIndex", {
                    detail: { value: indexEnd }
                  });
                  window.dispatchEvent(customEvent1);
                }
                const varIFId = [...varIF].sort((a, b) => a - b),
                  varExIFId = [...varExIF].sort((a, b) => a - b), varIFSend = []
                varExIFId.forEach(id => {
                  const oldV = window.allCgValues.filter(v => v.valueId === id && v.isEx)
                  if (oldV.length !== 0) {
                    oldV.forEach((v, k) => {
                      oldV[k].valueNum = tv.system.varsEx.data[id] || 0
                      oldV[k].isEx = true
                      varIFSend.push(oldV[k])
                    })
                  } else {
                    const valueN = tv.system.varsEx.data[id] || 0
                    varIFSend.push({ valueName: `二周目数值：[${id}：无法查到名称]`, valueNum: valueN, valueId: id, isEx: true })
                  }
                })
                varIFId.forEach(id => {
                  const oldV = window.allCgValues.filter(v => v.valueId === id && !v.isEx)
                  if (oldV.length !== 0) {
                    oldV.forEach((v, k) => {
                      oldV[k].valueNum = tv.system.vars.data[id] || 0
                      oldV[k].isEx = false
                      varIFSend.push(oldV[k])
                    })
                  } else {
                    const valueN = tv.system.vars.data[id] || 0
                    varIFSend.push({ valueName: `[${id}：无法查到名称]`, valueNum: valueN, valueId: id, isEx: false })
                  }
                })
                const varId = [...varSet].sort((a, b) => a - b), varSend = []
                varId.forEach(id => {
                  const oldV = window.allCgValues.filter(v => v.valueId === id && !v.isEx)
                  if (oldV.length !== 0) {
                    oldV.forEach((v, k) => {
                      oldV[k].valueNum = tv.system.vars.data[id] || 0
                      oldV[k].isEx = false
                      varSend.push(oldV[k])
                    })
                  } else {
                    const valueN = tv.system.vars.data[id] || 0
                    varSend.push({ valueName: `[${id}：无法查到名称]`, valueNum: valueN, valueId: id, isEx: false })
                  }
                })
                const customEvent1 = new CustomEvent("cgUIV", {
                  detail: { value: { showValue: varSend, allValue: varIFSend } }
                });
                window.dispatchEvent(customEvent1);
              }
            } else {
              alert('暂未处于UI界面')
            }
          }
        }
      }
    }
  })
}
if (/https:\/\/avg\.163\.com\/game\/detail\/\d+/.test(location.href) || /https:\/\/avg\.163\.com\/enginejs/.test(location.href) || /https:\/\/avg\.163\.com\/engine/.test(location.href)) {
  //存档加密解密用户id
  function encryptString(inputString) {
    const charMap = { "0": "3", "1": "6", "2": "7", "3": "1", "4": "0", "5": "2", "6": "9", "7": "8", "8": "4", "9": "5", "a": "q", "b": "w", "c": "e", "d": "r", "e": "t", "f": "y", "g": "u", "h": "i", "i": "o", "j": "p", "k": "a", "l": "s", "m": "d", "n": "f", "o": "g", "p": "h", "q": "j", "r": "k", "s": "l", "t": "z", "u": "x", "v": "c", "w": "v", "x": "b", "y": "n", "z": "m" };
    let encryptedString = '';
    for (let i = 0; i < inputString.length; i++) {
      const currentChar = inputString[i];
      const mappedChar = charMap[currentChar];
      encryptedString += mappedChar !== undefined ? mappedChar : currentChar;
    }
    return encryptedString;
  }
  function decryptString(inputString) {
    const charMap = { "0": "4", "1": "3", "2": "5", "3": "0", "4": "8", "5": "9", "6": "1", "7": "2", "8": "7", "9": "6", "a": "k", "b": "x", "c": "v", "d": "m", "e": "c", "f": "n", "g": "o", "h": "p", "i": "h", "j": "q", "k": "r", "l": "s", "m": "z", "n": "y", "o": "i", "p": "j", "q": "a", "r": "d", "s": "l", "t": "e", "u": "g", "v": "w", "w": "b", "x": "u", "y": "f", "z": "t" };
    let decryptedString = '';
    for (let i = 0; i < inputString.length; i++) {
      const currentChar = inputString[i];
      const mappedChar = charMap[currentChar];
      decryptedString += mappedChar !== undefined ? mappedChar : currentChar;
    }
    return decryptedString;
  }
  function getSortedObjString(input) {
    let stack = [input]; // 初始化栈，包含输入
    let result = ''; // 初始化最终的结果字符串

    while (stack.length > 0) {
      let item = stack.pop(); // 从栈中弹出一个元素

      if (Array.isArray(item)) {
        // 如果元素是数组，将其转换为字符串并添加到结果中
        result += JSON.stringify(item);
      } else if (typeof item === 'string' || typeof item === 'number' && !isNaN(item)) {
        // 如果元素是字符串或非NaN数字，直接添加到结果中
        result += item;
      } else if (typeof item === 'object' && item !== null) {
        // 如果元素是对象（非null），按键名排序后处理每个键值
        Object.keys(item).sort().forEach(key => {
          stack.push(item[key]); // 将值推回栈中进行后续处理
        });
      }
      // 注意：对于NaN和null，此实现不会将它们添加到结果字符串中
    }

    return result;
  }
  let _0x44acae = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
    , _0x204941 = function (_0x4a6d96) {
      _0x4a6d96 = _0x4a6d96['replace'](/\r\n/g, '\x0a');
      for (var _0x18149b = '', _0x2d0966 = 0x0; _0x4a6d96['length'] > _0x2d0966; _0x2d0966++) {
        var _0x336e31 = _0x4a6d96['charCodeAt'](_0x2d0966);
        128 > _0x336e31 ? _0x18149b += String['fromCharCode'](_0x336e31) : _0x336e31 > 127 && 2048 > _0x336e31 ? (_0x18149b += String['fromCharCode'](_0x336e31 >> 6 | 192),
          _0x18149b += String['fromCharCode'](0x3f & _0x336e31 | 0x80)) : (_0x18149b += String['fromCharCode'](_0x336e31 >> 0xc | 0xe0),
            _0x18149b += String['fromCharCode'](_0x336e31 >> 0x6 & 0x3f | 0x80),
            _0x18149b += String['fromCharCode'](0x3f & _0x336e31 | 0x80));
      }
      return _0x18149b;
    }
    , _0xea071a = function (_0x2b7c7e) {
      var _0x23b181, _0x1873cd, _0x336e31, _0x574250, _0xea1d66, _0x4ff623, _0x1a4837, _0x9e5966 = '', _0x425d12 = 0x0;
      for (_0x2b7c7e = _0x204941(_0x2b7c7e); _0x2b7c7e['length'] > _0x425d12;)
        _0x574250 = (_0x23b181 = _0x2b7c7e['charCodeAt'](_0x425d12++)) >> 0x2,
          _0xea1d66 = (0x3 & _0x23b181) << 0x4 | (_0x1873cd = _0x2b7c7e['charCodeAt'](_0x425d12++)) >> 0x4,
          _0x4ff623 = (0xf & _0x1873cd) << 0x2 | (_0x336e31 = _0x2b7c7e['charCodeAt'](_0x425d12++)) >> 0x6,
          _0x1a4837 = 0x3f & _0x336e31,
          isNaN(_0x1873cd) ? _0x4ff623 = _0x1a4837 = 0x40 : isNaN(_0x336e31) && (_0x1a4837 = 0x40),
          _0x9e5966 = _0x9e5966 + _0x44acae['charAt'](_0x574250) + _0x44acae['charAt'](_0xea1d66) + _0x44acae['charAt'](_0x4ff623) + _0x44acae['charAt'](_0x1a4837);
      return _0x9e5966;
    }
    , _0x28b2a9 = function (_0x2f6654) {
      for (var _0x4c7332 = '', _0x13ab45 = 0x0, _0x336e31 = 0x0, _0x1ee257 = _0x336e31, _0x152191 = _0x336e31; _0x2f6654['length'] > _0x13ab45;)
        0x80 > (_0x336e31 = _0x2f6654['charCodeAt'](_0x13ab45)) ? (_0x4c7332 += String['fromCharCode'](_0x336e31),
          _0x13ab45++) : _0x336e31 > 0xbf && 0xe0 > _0x336e31 ? (_0x1ee257 = _0x2f6654['charCodeAt'](_0x13ab45 + 0x1),
            _0x4c7332 += String['fromCharCode']((0x1f & _0x336e31) << 0x6 | 0x3f & _0x1ee257),
            _0x13ab45 += 0x2) : (_0x1ee257 = _0x2f6654['charCodeAt'](_0x13ab45 + 0x1),
              _0x152191 = _0x2f6654['charCodeAt'](_0x13ab45 + 0x2),
              _0x4c7332 += String['fromCharCode']((0xf & _0x336e31) << 0xc | (0x3f & _0x1ee257) << 0x6 | 0x3f & _0x152191),
              _0x13ab45 += 0x3);
      return _0x4c7332;
    }
    , _0x1957e3 = function (_0x1b1e48) {
      var _0x23e734, _0x2208eb, _0x336e31, _0x34c04d, _0x17971b, _0x5995ae, _0x212ca4 = '', _0x26fe58 = 0x0;
      for (_0x1b1e48 = _0x1b1e48['replace'](/[^A-Za-z0-9+\/=]/g, ''); _0x1b1e48['length'] > _0x26fe58;)
        _0x336e31 = _0x44acae['indexOf'](_0x1b1e48['charAt'](_0x26fe58++)),
          _0x23e734 = (0xf & (_0x34c04d = _0x44acae['indexOf'](_0x1b1e48['charAt'](_0x26fe58++)))) << 0x4 | (_0x17971b = _0x44acae['indexOf'](_0x1b1e48['charAt'](_0x26fe58++))) >> 0x2,
          _0x2208eb = (0x3 & _0x17971b) << 0x6 | (_0x5995ae = _0x44acae['indexOf'](_0x1b1e48['charAt'](_0x26fe58++))),
          _0x212ca4 += String['fromCharCode'](_0x336e31 << 0x2 | _0x34c04d >> 0x4),
          0x40 !== _0x17971b && (_0x212ca4 += String['fromCharCode'](_0x23e734)),
          0x40 !== _0x5995ae && (_0x212ca4 += String['fromCharCode'](_0x2208eb));
      return _0x212ca4 = _0x28b2a9(_0x212ca4);
    }
  async function getProfile() {
    if (window.cloudProfile) {
      return;// 如果已缓存，则直接返回
    } else {
      try {
        const response = await fetch(`https://avg.163.com/avg-portal-api/game/${window.gameId}/user/profile?csrf_token=${window['Cookies']['get']('TOKEN')}&em=${window.typeGame}&timestamp=${Date.now()}`);
        if (!response.ok) {
          throw new Error(`请求失败，状态码：${response.status}`);
        }
        const profile = await response.json();
        window.cloudProfile = profile.data; // 缓存数据
      } catch (error) {
        return Promise.reject(error); // 发生错误时返回拒绝的 Promise
      }
    }
  }
  async function getOneClo(pro) {
    let url = pro.progress['replace'](/^(http:\/\/)|(https:\/\/)/, window['location']['protocol'] + '//').replace("&isavgzipqazx=1", '')
    const response = await fetch(url)
    let data = window.typeGame === '1' ? await response.arrayBuffer() : await response.text()
    const zip = new JSZip();
    if (window.typeGame === '2') {
      data = _0x1957e3(data)
    }
    const contents = await zip.loadAsync(data, { 'base64': !0x0 })
    const file = Object.values(contents.files)[0];
    const text = await file.async("string");
    return JSON.parse(text)
  }
  async function getFileToken() {
    const response = await fetch(`https://avg.163.com/avg-portal-api/avgfile/token?type=${window.typeGame === '1' ? 'ENGINE_ARCHIVE' : 'USER_PROFILE_PROGRESS'}&csrf_token=${window['Cookies']['get']('TOKEN')}&em=${window.typeGame}&timestamp=${Date.now()}`);
    const profile = await response.json();
    return profile.data.token;
  }
  async function upcloud(pro) {
    const zip = new JSZip();
    zip.file('zipfile.txt', JSON.stringify(pro.progressNew));
    const content = await zip.generateAsync({
      type: window.typeGame === '1' ? 'blob' : 'base64',
      compression: 'DEFLATE',
      compressionOptions: { level: 6 },
    });
    try {
      if (window.typeGame === '2') {
        const uploadResponse = await fetch('https://file.avg.163.com/avg-file-api/a13/file/fp/new', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/zip',
            'Authorization': window.upFileToken, // 如果需要认证
          },
          body: _0xea071a(content), // 发送更新的数据
        });
        if (!uploadResponse.ok) {
          throw new Error('请求失败，状态码：' + uploadResponse.status);
        }
        const uploadData = await uploadResponse.json();
        const updateResponse = await fetch(`https://avg.163.com/avg-portal-api/game/${window.gameId}/user/profile/${pro.id}?csrf_token=${window['Cookies']['get']('TOKEN')}&em=${window.typeGame}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            isAuto: pro.isAuto,
            position: pro.position,
            profileName: pro.profileName,
            progress: uploadData.data.url,
            screenshot: pro.screenshot,
            zip: 2,
          }),
        });
        if (!updateResponse.ok) {
          throw new Error('请求失败，状态码：' + updateResponse.status);
        }
        await updateResponse.json(); // 解析 JSON 响应
      } else {
        const arrayBufferContent = await new Promise((resolve, reject) => {
          const fr = new FileReader();
          fr.onload = function (e) {
            resolve(e.target.result);
          };
          fr.onerror = function (err) {
            reject(err);
          };
          fr.readAsArrayBuffer(content);
        })
        const uploadResponse = await fetch('https://file.avg.163.com/avg-file-api/a13/file/fp/new', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/zip',
            'Authorization': window.upFileToken, // 如果需要认证
          },
          body: arrayBufferContent,
        });
        if (!uploadResponse.ok) {
          throw new Error('请求失败，状态码：' + uploadResponse.status);
        }
        const uploadData = await uploadResponse.json();
        const updateResponse = await fetch(`https://avg.163.com/avg-portal-api/game/${window.gameId}/user/profile/${pro.id}?csrf_token=${window['Cookies']['get']('TOKEN')}&em=${window.typeGame}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            position: pro.position,
            profileName: pro.profileName,
            progress: uploadData.data.url + "&isavgzipqazx=1",
            screenshot: pro.screenshot,
          }),
        });
        if (!updateResponse.ok) {
          throw new Error('请求失败，状态码：' + updateResponse.status);
        }
        await updateResponse.json(); // 解析 JSON 响应
      }
    } catch (error) {
      console.error('上传或更新数据时发生错误:', error);
    }
  }
  window.addEventListener('message', async (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'modifyYcyValue' && window.typeGame) {
        const modifyYcyValue = message.value[0];
        const moClo = message.value[1];
        const vk = window.typeGame === '1' ? ["qetuo", "wryip", "adgjl"] : ["qetuo", "wryip", "adgjl", "sfhk;"];
        let clV = { value: {}, array: {} }
        // 遍历数组
        const regex = /^(.*?)(\[\d+\])$/;
        if (window.typeGame === '1') {
          modifyYcyValue.forEach(element => {
            let feeling = element.content;
            let number = -1;
            const match = element.content.match(regex)
            if (match) {
              feeling = match[1]; // 提取出 "好感"
              number = match[2].replace(/\[|\]/g, '');
            }
            if (moClo) {
              if (window.AVG_GLOBAL_CONFIG.values[element.content] && window.AVG_GLOBAL_CONFIG.values[element.content].persisType === 'normal') {
                clV.value[element.content] = element.value
              } else if (window.AVG_GLOBAL_CONFIG.arrays[feeling] && window.AVG_GLOBAL_CONFIG.arrays[feeling].persisType === 'normal') {
                if (!clV.array[feeling]) { clV.array[feeling] = {} }
                clV.array[feeling][number] = element.value
              }
            }
            if ((window.AVG_GLOBAL_CONFIG.values[element.content] && window.AVG_GLOBAL_CONFIG.values[element.content].valueType === 'number') || (window.AVG_GLOBAL_CONFIG.arrays[feeling] && window.AVG_GLOBAL_CONFIG.arrays[feeling].arrayValues[number].valueType === 'number')) {
              AVGCmdCalcUtils.calc(`@${element.content}=${element.value};`)
            } else {
              AVGCmdCalcUtils.calc(`@${element.content}=${JSON.stringify(element.value)};`)
            }
          });
          let sc = cc.Director._getInstance()
          if (sc._runningScene.uiLayerStack.length !== 0) {
            let a = sc._runningScene.uiLayerStack[sc._runningScene.uiLayerStack.length - 1]
            a.startParseALaunchCommands()
          }
          if (moClo) {
            if (!window.cloudProfile) {
              await getProfile()
              for (const v of window.cloudProfile) {
                v.progressNew = await getOneClo(v);
              }
            }
            window.upFileToken = await getFileToken()
            for (const v of window.cloudProfile) {
              let v1 = v.progressNew.scenes[0]
              Object.keys(clV.value).forEach(vn => {
                if (v1.profileValues[vn]) {
                  v1.profileValues[vn][3] === "0" ? v1.profileValues[vn][4] = parseInt(clV.value[vn]) : v1.profileValues[vn][4] = clV.value[vn]
                }
              })
              Object.keys(clV.array).forEach(vn => {
                if (v1.profileArrays[vn]) {
                  Object.keys(clV.array[vn]).forEach(vnm => {
                    if (v1.profileArrays[vn].arrayValues[vnm]) {
                      v1.profileArrays[vn].arrayValues[vnm][4] === "0" ? v1.profileArrays[vn].arrayValues[vnm][5] = parseInt(clV.array[vn][vnm]) :
                        v1.profileArrays[vn].arrayValues[vnm][5] = clV.array[vn][vnm]
                    }
                  })
                }
              })
              v.progressNew.scenes[0] = v1
              const vv = isNaN(v.progressNew.v) ? vk[v.progressNew.v] : vk[vk.length - 1];
              v.progressNew.s = CryptoJS['MD5'](v.userId + getSortedObjString(v.progressNew.scenes[0].profileValues) + getSortedObjString(v.progressNew.scenes[0].profileArrays) + vv).toString()
              await upcloud(v)
            }
            alert('云端修改成功，如若没进入存档或者读档界面，可直接读取；如果进入过，请刷新，因缓存存档原因读取的不是修改后的且会报错')
          }
        } else if (window.typeGame === '2') {
          if (!window.isSaveLocal && typeof types.acA === 'object' && types.getA) {
            modifyYcyValue.forEach(element => {
              let feeling = element.content;
              let number = -1;
              const match = element.content.match(regex);
              if (match) {
                feeling = match[1]; // 提取出 "好感"
                number = match[2].replace(/\[|\]/g, '');
              }
              if (moClo) {
                if (window.ycyValues[feeling] && window.ycyValues[feeling]['persisType'] === 'normal') {
                  clV.value[window.ycyValues[feeling].id] = element.value
                } else if (window.ycyArrays[feeling] && window.ycyArrays[feeling]['persisType'] === 'normal') {
                  if (!clV.array[feeling]) { clV.array[feeling] = {} }
                  clV.array[feeling][number] = element.value
                }
              }
              if (window.ycyValues[feeling] && window.ycyValues[feeling]['persisType'] === 'normal') {
                window.ycyValues[feeling]['valueType'] === 'number' ? types.acA.var[feeling] = parseInt(element.value, 10) : types.acA.var[feeling] = element.value
              } else if (window.ycyValues[feeling] && window.ycyValues[feeling]['persisType'] === 'const') {
                window.ycyValues[feeling]['valueType'] === 'number' ? types.acA.cVar[feeling] = parseInt(element.value, 10) : types.acA.cVar[feeling] = element.value
              } else if (window.ycyArrays[feeling] && window.ycyArrays[feeling]['persisType'] === 'normal') {
                window.ycyArrays[feeling]['arrayValues'][number]['valueType'] === 'number' ? types.acA.arr[feeling][number] = parseInt(element.value, 10) : types.acA.arr[feeling][number] = element.value
              } else if (window.ycyArrays[feeling] && window.ycyArrays[feeling]['persisType'] === 'const') {
                window.ycyArrays[feeling]['arrayValues'][number]['valueType'] === 'number' ? types.acA.cArr[feeling][number] = parseInt(element.value, 10) : types.acA.cArr[feeling][number] = element.value
              }
            });
            types.acP.updateNotification()
            if (moClo) {
              if (!window.cloudProfile) {
                await getProfile()
                for (const v of window.cloudProfile) {
                  v.progressNew = await getOneClo(v);
                }
              }
              window.upFileToken = await getFileToken()
              for (const v of window.cloudProfile) {
                let v1 = v.progressNew.scenes[0]
                Object.keys(clV.value).forEach(vn => {
                  if (v1.startNormalValue.vars[vn]) {
                    typeof v1.startNormalValue.vars[vn] === "number" ? v1.startNormalValue.vars[vn] = parseInt(clV.value[vn]) : v1.startNormalValue.vars[vn] = clV.value[vn]
                  }
                  if (v1.endNormalValue.vars[vn]) {
                    typeof v1.endNormalValue.vars[vn] === "number" ? v1.endNormalValue.vars[vn] = parseInt(clV.value[vn]) : v1.endNormalValue.vars[vn] = clV.value[vn]
                  }
                })
                Object.keys(clV.array).forEach(vn => {
                  Object.keys(clV.array[vn]).forEach(vnm => {
                    if (v1.startNormalValue.arr[vn] && v1.startNormalValue.arr[vn][vnm] !== void 0) {
                      typeof v1.startNormalValue.arr[vn][vnm] === "number" ? v1.startNormalValue.arr[vn][vnm] = parseInt(clV.array[vn][vnm]) :
                        v1.startNormalValue.arr[vn][vnm] = clV.array[vn][vnm]
                    }
                    if (v1.endNormalValue.arr[vn] && v1.endNormalValue.arr[vn][vnm] !== void 0) {
                      typeof v1.endNormalValue.arr[vn][vnm] === "number" ? v1.endNormalValue.arr[vn][vnm] = parseInt(clV.array[vn][vnm]) :
                        v1.endNormalValue.arr[vn][vnm] = clV.array[vn][vnm]
                    }
                  })
                })
                v.progressNew.scenes[0] = v1
                const vv = isNaN(v.progressNew.v) ? vk[v.progressNew.v] : vk[vk.length - 1];
                const vnv = v.progressNew.v !== void 0 && v.progressNew.v < 3 ? String(v.userId) : ''
                v.progressNew.s = CryptoJS['MD5'](vnv + getSortedObjString(v.progressNew.scenes[0].startNormalValue) + getSortedObjString(v.progressNew.scenes[0].endNormalValue) + getSortedObjString(v.progressNew.scenes[0].startSysValue) + getSortedObjString(v.progressNew.scenes[0].endSysValue) + vv).toString()
                await upcloud(v)
              }
              alert('云端修改成功，如若没进入存档或者读档界面，可直接读取；如果进入过，请刷新，因缓存存档原因读取的不是修改后的且会报错')
            }
          } else {
            let ycyCurrentUser = window['Cookies']['get']('AVG_LOGIN_USER_ID')
            const cVarList = { valueList: [] };
            const carrList = { arrayValues: [] }
            const csrf_token = window['Cookies']['get']('TOKEN')
            let request = indexedDB.open('avgJsEngine');
            // 处理数据库打开成功的回调
            request.onsuccess = function (event) {
              var db = event.target.result;
              // 创建事务并指定对象存储空间，使用 'readwrite' 模式
              var transaction = db.transaction(['profiles'], 'readwrite');
              // 获取对象存储空间
              var objectStore = transaction.objectStore('profiles');
              // 通过键（key）获取数据
              const indexedDBKey = [window.gameId, ycyCurrentUser];
              var getRequest = objectStore.get(indexedDBKey);
              getRequest.onsuccess = function (event) {
                var data = event.target.result;
                if (data) {
                  // 修改数据
                  const a = JSON.parse(data.profiles[0].progress);
                  const endNormalValue = a.scenes[0].endNormalValue
                  const normalValue = a.scenes[0].startNormalValue;
                  const constValue = a.scenes[0].startConstValue;
                  modifyYcyValue.forEach(element => {
                    let feeling = element.content;
                    let number = 1;
                    if (element.content.match(regex)) {
                      const match = element.content.match(regex);
                      feeling = match[1]; // 提取出 "好感"
                      number = match[2].replace(/\[|\]/g, '');
                    }
                    if (window.ycyValues[feeling] && window.ycyValues[feeling]['persisType'] === 'normal') {
                      typeof normalValue['vars'][window.ycyValues[feeling]['id']] !== 'undefined' ? window.ycyValues[feeling]['valueType'] === 'number' ?
                        normalValue['vars'][window.ycyValues[feeling]['id']] = parseInt(element.value, 10) :
                        normalValue['vars'][window.ycyValues[feeling]['id']] = element.value : '';
                      typeof endNormalValue['vars'][window.ycyValues[feeling]['id']] !== 'undefined' ? window.ycyValues[feeling]['valueType'] === 'number' ?
                        endNormalValue['vars'][window.ycyValues[feeling]['id']] = parseInt(element.value, 10) :
                        endNormalValue['vars'][window.ycyValues[feeling]['id']] = element.value : '';
                    } else if (window.ycyValues[feeling] && window.ycyValues[feeling]['persisType'] === 'const') {
                      typeof constValue['cVars'][window.ycyValues[feeling]['id']] !== 'undefined' ? window.ycyValues[feeling]['valueType'] === 'number' ?
                        (() => {
                          constValue['cVars'][window.ycyValues[feeling]['id']] = parseInt(element.value, 10);
                          cVarList.valueList.push({
                            valueId: window.ycyValues[feeling]['id'],
                            numValue: parseInt(element.value, 10)
                          });
                        })() :
                        (() => {
                          constValue['cVars'][window.ycyValues[feeling]['id']] = element.value;
                          cVarList.valueList.push({
                            valueId: window.ycyValues[feeling]['id'],
                            numValue: element.value
                          });
                        })() : '';
                    } else if (window.ycyArrays[feeling] && window.ycyArrays[feeling]['persisType'] === 'normal') {
                      normalValue['arr'][feeling] && typeof normalValue['arr'][feeling][number] !== 'undefined' ? window.ycyArrays[feeling]['arrayValues'][number]['valueType'] === 'number' ?
                        normalValue['arr'][feeling][number] = parseInt(element.value, 10) :
                        normalValue['arr'][feeling][number] = element.value : '';
                      endNormalValue['arr'][feeling] && typeof endNormalValue['arr'][feeling][number] !== 'undefined' ? window.ycyArrays[feeling]['arrayValues'][number]['valueType'] === 'number' ?
                        endNormalValue['arr'][feeling][number] = parseInt(element.value, 10) :
                        endNormalValue['arr'][feeling][number] = element.value : '';
                    } else if (window.ycyArrays[feeling] && window.ycyArrays[feeling]['persisType'] === 'const') {
                      constValue['cArr'][feeling] ? window.ycyArrays[feeling]['arrayValues'][number]['valueType'] === 'number' ?
                        (() => {
                          constValue['cArr'][feeling][number] = parseInt(element.value, 10);
                          carrList.arrayValues.push({
                            valueId: window.ycyArrays[feeling]['arrayValues'][number]['id'],
                            numValue: parseInt(element.value, 10)
                          });
                        })() :
                        (() => {
                          constValue['cArr'][feeling][number] = element.value;
                          carrList.arrayValues.push({
                            valueId: window.ycyArrays[feeling]['arrayValues'][number]['id'],
                            numValue: element.value
                          });
                        })() : '';
                    }
                  });
                  a.scenes[0].startNormalValue = normalValue;
                  a.scenes[0].startConstValue = constValue;
                  a.scenes[0].endNormalValue = endNormalValue;
                  data.profiles[0].profileName = data.profiles[0].profileName.replaceAll('修改数值：', '').replaceAll('跳转剧情：', '').replaceAll('初始化数值：', '')
                  data.profiles[0].profileName = `修改数值：${data.profiles[0].profileName}`;
                  const vv = isNaN(a.v) ? vk[a.v] : vk[vk.length - 1];
                  const vnv = a.v !== void 0 && a.v < 3 ? String(newId) : ''
                  a.s = CryptoJS['MD5'](vnv + getSortedObjString(a.scenes[0].startNormalValue) + getSortedObjString(a.scenes[0].endNormalValue) + getSortedObjString(a.scenes[0].startSysValue) + getSortedObjString(a.scenes[0].endSysValue) + vv).toString()
                  data.profiles[0].progress = JSON.stringify(a)
                  // 使用 put 方法将修改后的数据存回数据库
                  var updateRequest = objectStore.put(data);

                  updateRequest.onsuccess = function (event) {
                    console.log('Data updated successfully');
                  };

                  updateRequest.onerror = function (event) {
                    console.error('Error updating data:', event.target.error.message);
                    alert("修改失败请重新添加数值修改")
                  };
                  if (cVarList.valueList.length !== 0) {
                    var xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
                    // 设置请求的URL和方法
                    xhr.open("PUT", `https://avg.163.com/avg-portal-api/game/${window.gameId}/user/value/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
                    // 设置请求头，指明发送的数据类型为JSON
                    xhr.setRequestHeader("Content-Type", "application/json");
                    // 设置CSRF token，如果API需要的话。这个取决于API的安全要求
                    // 在这个例子中，CSRF token已经作为URL参数提供，但也可能需要在请求头中设置
                    // xhr.setRequestHeader("X-CSRF-Token", "你的CSRF token");
                    xhr.onreadystatechange = function () { // 设置回调函数
                      if (xhr.readyState === 4) { // 请求完成
                        if (xhr.status === 200) {
                          alert("全档数值成功修改，刷新重新获取吧！"); // 请求成功时处理返回的数据
                        } else {
                          alert("全档数值修改失败，请检查网络或者告知小宝解决！"); // 请求失败时处理错误
                        }
                      }
                    };
                    const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
                    let dataSend = JSON.stringify(cVarList);
                    let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
                    // 准备发送的数据
                    var data = JSON.stringify({
                      "v": 1,
                      "s": encryptData,
                      "data": dataSend
                    });
                    xhr.send(data); // 发送请求，带上数据
                  } else if (carrList.arrayValues.length !== 0) {
                    var xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
                    // 设置请求的URL和方法
                    xhr.open("PUT", `https://avg.163.com/avg-portal-api/game/${window.gameId}/user/array/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
                    // 设置请求头，指明发送的数据类型为JSON
                    xhr.setRequestHeader("Content-Type", "application/json");
                    // 设置CSRF token，如果API需要的话。这个取决于API的安全要求
                    // 在这个例子中，CSRF token已经作为URL参数提供，但也可能需要在请求头中设置
                    // xhr.setRequestHeader("X-CSRF-Token", "你的CSRF token");
                    xhr.onreadystatechange = function () { // 设置回调函数
                      if (xhr.readyState === 4) { // 请求完成
                        if (xhr.status === 200) {
                          alert("全档数组数值成功修改，刷新重新获取吧！"); // 请求成功时处理返回的数据
                        } else {
                          alert("全档数组数值修改失败，请检查网络或者告知小宝解决！"); // 请求失败时处理错误
                        }
                      }
                    };
                    const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
                    let dataSend = JSON.stringify(carrList);
                    let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
                    // 准备发送的数据
                    var data = JSON.stringify({
                      "v": 1,
                      "s": encryptData,
                      "data": dataSend
                    });
                    xhr.send(data); // 发送请求，带上数据
                  }
                } else {
                  alert("请在本地第一个档位存档")
                }
              };

              getRequest.onerror = function (event) {
                console.error('Error reading data:', event.target.error);
              };
            };

            // 处理数据库打开失败的回调
            request.onerror = function (event) {
              console.error('Error opening database:', event.target.error);
            };
          }
        }
      }
    }
  });

  //易次元存档迁移
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'replace' && window.typeGame) {
        const switchOn = message.switchOn
        const oldId = switchOn.oldId;
        const newId = switchOn.newId;
        const gameId = window.gameId;
        const cVarList = { valueList: [] };
        const carrList = { arrayValues: [] };
        const csrf_token = window['Cookies']['get']('TOKEN')
        const vk = window.typeGame === '1' ? ["qetuo", "wryip", "adgjl"] : ["qetuo", "wryip", "adgjl", "sfhk;"];
        if (switchOn && window.typeGame && window.typeGame === '1') {
          let request = indexedDB.open('avgEngine');
          // 处理数据库打开成功的回调
          request.onsuccess = function (event) {
            var db = event.target.result;
            // 创建事务并指定对象存储空间，使用 'readwrite' 模式
            var transaction = db.transaction(['profiles'], 'readwrite');
            // 获取对象存储空间
            var objectStore = transaction.objectStore('profiles');
            // 通过键（key）获取数据
            var getRequest = objectStore.get([String(gameId), oldId]);
            getRequest.onsuccess = function (event) {
              var data = event.target.result;
              if (data) {
                data.userId = newId;
                Object.values(data.profiles).forEach(value => {
                  const a = JSON.parse(value.progress);
                  a.ui = encryptString(newId);
                  const v = isNaN(a.v) ? vk[a.v] : vk[vk.length - 1];
                  a.s = CryptoJS['MD5'](newId + getSortedObjString(a.scenes[0].profileValues) + getSortedObjString(a.scenes[0].profileArrays) + v).toString()
                  value.progress = JSON.stringify(a);
                })
                // 使用 put 方法将修改后的数据存回数据库
                var updateRequest = objectStore.put(data);
                updateRequest.onsuccess = function (event) {
                  console.log('Data updated successfully');
                  alert("存档迁移成功，快去愉快的玩耍吧！");
                };
                updateRequest.onerror = function (event) {
                  console.error('Error updating data:', event.target.error);
                  alert("存档迁移失败，请检查uid或者检查本地第一个档位！");
                };
              } else {
                console.log('Data not found');
                alert("存档所在的账号id还没有在本地存档，请存档后在迁移或者检查源uid是否填写正确！")
              }
            };
            getRequest.onerror = function (event) {
              console.error('Error reading data:', event.target.error);
            };
          };
          // 处理数据库打开失败的回调
          request.onerror = function (event) {
            console.error('Error opening database:', event.target.error);
          };
          let avg_game_data = JSON.parse(localStorage.avg_game_data);
          avg_game_data[gameId].profiles[newId] = avg_game_data[gameId].profiles[oldId];
          localStorage.removeItem('avg_game_data');
          localStorage.setItem('avg_game_data', JSON.stringify(avg_game_data));
          if (Object.values(avg_game_data[gameId].constVariables).length !== 0) {
            let data = { valueIds: '' };
            const ids = Object.values(avg_game_data[gameId].constVariables).map(item => item.id);
            data.valueIds = ids.join(',');
            let xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
            // 设置请求的URL和方法
            xhr.open("POST", `https://avg.163.com/avg-portal-api/game/${gameId}/user/value/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
            // 设置请求头，指明发送的数据类型为JSON
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () { // 设置回调函数
              if (xhr.readyState === 4) { // 请求完成
                if (xhr.status === 200) {
                  const cValues = JSON.parse(JSON.parse(xhr.responseText).data.data)// 请求成功时处理返回的数据
                  Object.keys(cValues).forEach(value => {
                    cVarList.valueList.push({
                      valueId: Number(value),
                      numValue: cValues[value]['numValue']
                    });
                  })
                  localStorage.setItem('constV', JSON.stringify(cVarList))
                } else {
                  console.error("Error:", xhr.status, xhr.statusText); // 请求失败时处理错误
                }
              }
            };
            xhr.send(JSON.stringify(data));
          }
          if (Object.values(avg_game_data[gameId].constArrays).length !== 0) {
            let xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
            // 设置请求的URL和方法
            xhr.open("POST", `https://avg.163.com/avg-portal-api/game/${gameId}/user/array/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
            // 设置请求头，指明发送的数据类型为JSON
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () { // 设置回调函数
              if (xhr.readyState === 4) { // 请求完成
                if (xhr.status === 200) {
                  const cArray = JSON.parse(JSON.parse(xhr.responseText).data.data)// 请求成功时处理返回的数据
                  Object.values(cArray).forEach(value => {
                    value.arrayValues.forEach(v => {
                      carrList.arrayValues.push({
                        valueId: v.valueId,
                        numValue: v.numValue
                      });
                    })
                  })
                  localStorage.setItem('constArr', JSON.stringify(carrList))
                } else {
                  console.error("Error:", xhr.status, xhr.statusText); // 请求失败时处理错误
                }
              }
            };
            const data = { "codeErrHandle": true };
            xhr.send(JSON.stringify(data));
          }
        } else if (switchOn && window.typeGame && window.typeGame === '2') {
          let request = indexedDB.open('avgJsEngine');
          // 处理数据库打开成功的回调
          request.onsuccess = function (event) {
            var db = event.target.result;
            // 创建事务并指定对象存储空间，使用 'readwrite' 模式
            var transaction = db.transaction(['profiles'], 'readwrite');
            // 获取对象存储空间
            var objectStore = transaction.objectStore('profiles');
            // 通过键（key）获取数据
            var getRequest = objectStore.get([gameId, oldId]);
            getRequest.onsuccess = function (event) {
              var data = event.target.result;
              if (data) {
                const cVarList = { valueList: [] };
                const carrList = { arrayValues: [] };
                data.userId = newId;
                data.profiles.forEach(value => {
                  const a = JSON.parse(value.progress);
                  a.ui = encryptString(newId);
                  const vv = isNaN(a.v) ? vk[a.v] : vk[vk.length - 1];
                  const vnv = a.v !== void 0 && a.v < 3 ? String(newId) : ''
                  a.s = CryptoJS['MD5'](vnv + getSortedObjString(a.scenes[0].startNormalValue) + getSortedObjString(a.scenes[0].endNormalValue) + getSortedObjString(a.scenes[0].startSysValue) + getSortedObjString(a.scenes[0].endSysValue) + vv).toString()
                  value.progress = JSON.stringify(a);
                })
                // 使用 put 方法将修改后的数据存回数据库
                var updateRequest = objectStore.put(data);
                const provalue = JSON.parse(data.profiles[0].progress);
                if (Object.values(provalue['cVarProperMap']).length !== 0) {
                  let data = { valueIds: '' };
                  const ids = Object.keys(provalue['cVarProperMap']).map(item => item);
                  data.valueIds = ids.join(',');
                  let xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
                  // 设置请求的URL和方法
                  xhr.open("POST", `https://avg.163.com/avg-portal-api/game/${gameId}/user/value/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
                  // 设置请求头，指明发送的数据类型为JSON
                  xhr.setRequestHeader("Content-Type", "application/json");
                  xhr.onreadystatechange = function () { // 设置回调函数
                    if (xhr.readyState === 4) { // 请求完成
                      if (xhr.status === 200) {
                        const cValues = JSON.parse(JSON.parse(xhr.responseText).data.data)// 请求成功时处理返回的数据
                        Object.keys(cValues).forEach(value => {
                          cVarList.valueList.push({
                            valueId: Number(value),
                            numValue: cValues[value]['numValue']
                          });
                        })
                        localStorage.setItem('constV', JSON.stringify(cVarList))
                      } else {
                        console.error("Error:", xhr.status, xhr.statusText); // 请求失败时处理错误
                      }
                    }
                  };
                  xhr.send(JSON.stringify(data));
                }
                if (Object.values(provalue['cArrProperMap']).length !== 0) {
                  let xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
                  // 设置请求的URL和方法
                  xhr.open("POST", `https://avg.163.com/avg-portal-api/game/${gameId}/user/array/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
                  // 设置请求头，指明发送的数据类型为JSON
                  xhr.setRequestHeader("Content-Type", "application/json");
                  xhr.onreadystatechange = function () { // 设置回调函数
                    if (xhr.readyState === 4) { // 请求完成
                      if (xhr.status === 200) {
                        const cArray = JSON.parse(JSON.parse(xhr.responseText).data.data)// 请求成功时处理返回的数据
                        Object.values(cArray).forEach(value => {
                          value.arrayValues.forEach(v => {
                            carrList.arrayValues.push({
                              valueId: v.valueId,
                              numValue: v.numValue
                            });
                          })
                        })
                        localStorage.setItem('constArr', JSON.stringify(carrList))
                      } else {
                        console.error("Error:", xhr.status, xhr.statusText); // 请求失败时处理错误
                      }
                    }
                  };
                  const data = { "codeErrHandle": true };
                  xhr.send(JSON.stringify(data));
                }
                updateRequest.onsuccess = function (event) {
                  console.log('Data updated successfully');
                  alert("存档迁移成功，快去愉快的玩耍吧！");
                };
                updateRequest.onerror = function (event) {
                  console.error('Error updating data:', event.target.error);
                  alert("存档迁移失败，请检查uid或者检查本地第一个档位！");
                };
              } else {
                console.log('Data not found');
                alert("存档所在的账号id还没有在本地存档，请存档后在迁移或者检查源uid是否填写正确！")
              }
            };
            getRequest.onerror = function (event) {
              console.error('Error reading data:', event.target.error);
            };
          };
          // 处理数据库打开失败的回调
          request.onerror = function (event) {
            console.error('Error opening database:', event.target.error);
          };
        }
      } else if (message.type === 'replaceConst' && window.typeGame) {
        const switchOn = message.switchOn;
        const csrf_token = window['Cookies']['get']('TOKEN')
        if (switchOn && window.typeGame) {
          const cVarList = localStorage.getItem('constV') ? JSON.parse(localStorage.getItem('constV')) : localStorage.getItem('constV');
          const carrList = localStorage.getItem('constArr') ? JSON.parse(localStorage.getItem('constArr')) : localStorage.getItem('constArr');
          if (cVarList && cVarList.valueList.length !== 0) {
            var xhr1 = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
            // 设置请求的URL和方法
            xhr1.open("PUT", `https://avg.163.com/avg-portal-api/game/${gameId}/user/value/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
            // 设置请求头，指明发送的数据类型为JSON
            xhr1.setRequestHeader("Content-Type", "application/json");
            // 设置CSRF token，如果API需要的话。这个取决于API的安全要求
            // 在这个例子中，CSRF token已经作为URL参数提供，但也可能需要在请求头中设置
            // xhr.setRequestHeader("X-CSRF-Token", "你的CSRF token");
            xhr1.onreadystatechange = function () { // 设置回调函数
              if (xhr1.readyState === 4) { // 请求完成
                if (xhr1.status === 200) {
                  console.log("Success:", xhr1.responseText); // 请求成功时处理返回的数据
                } else {
                  console.error("Error:", xhr1.status, xhr1.statusText); // 请求失败时处理错误
                }
              }
            };
            const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
            let dataSend = JSON.stringify(cVarList);
            let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
            // 准备发送的数据
            var sendData = JSON.stringify({
              "v": 1,
              "s": encryptData,
              "data": dataSend
            });
            xhr1.send(sendData); // 发送请求，带上数据
            window.successUp = true
          }
          if (carrList && carrList.arrayValues.length !== 0) {
            var xhr1 = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
            // 设置请求的URL和方法
            xhr1.open("PUT", `https://avg.163.com/avg-portal-api/game/${gameId}/user/array/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
            // 设置请求头，指明发送的数据类型为JSON
            xhr1.setRequestHeader("Content-Type", "application/json");
            // 设置CSRF token，如果API需要的话。这个取决于API的安全要求
            // 在这个例子中，CSRF token已经作为URL参数提供，但也可能需要在请求头中设置
            // xhr.setRequestHeader("X-CSRF-Token", "你的CSRF token");
            xhr1.onreadystatechange = function () { // 设置回调函数
              if (xhr1.readyState === 4) { // 请求完成
                if (xhr1.status === 200) {
                  console.log("Success:", xhr1.responseText); // 请求成功时处理返回的数据
                } else {
                  console.error("Error:", xhr1.status, xhr1.statusText); // 请求失败时处理错误
                }
              }
            };
            const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
            let dataSend = JSON.stringify(carrList);
            let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
            // 准备发送的数据
            var sendData = JSON.stringify({
              "v": 1,
              "s": encryptData,
              "data": dataSend
            });
            xhr1.send(sendData); // 发送请求，带上数据
            window.successUp = true
          }
          if (window.successUp) {
            localStorage.removeItem('constV');
            localStorage.removeItem('constArr');
            alert("迁移全档数值成功，请等待一会后刷新获取全档数值即可！")
          } else {
            alert("暂时不存在全档数值，原因如下是未先迁移存档或者该作品不存在全档数值！")
          }
        }
      }
    }
  });
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'ycyCodeModify' && window.typeGame) {
        const regex = /^(.*?)(\[\d+\])$/;
        const ycyCodeModify = message.value.code;
        const ycyCodeModifyType = message.value.type
        //const code = ycyCodeModify.split(/;\n|;|\n/);
        if (window.typeGame === '1') {
          try {
            const executeCommands = new Function(ycyCodeModify);
            executeCommands();
          } catch (e) {
            alert("请检查输入的代码是否有误！一般是符号或者格式问题！具体错误：" + e)
          }
          let sc = cc.Director._getInstance()
          if (sc._runningScene.uiLayerStack.length !== 0) {
            let a = sc._runningScene.uiLayerStack[sc._runningScene.uiLayerStack.length - 1]
            a.startParseALaunchCommands()
          }
        } else if (window.typeGame === '2') {
          /*仙门第一纨绔  encryptM函数*/
          function encryptM(_0x250496) { var _0x5003f4 = function _0x5003f4(_0x541e01, _0x41a0bc, _0xf68477) { return _0x541e01 ? _0x41a0bc() : _0xf68477() }, _0xb7b1bc = function _0xb7b1bc(_0x43d3d9) { return _0x43d3d9.split("").map(function (_0x1e0410, _0x577371, _0x3c549d) { return encodeURIComponent(_0x1e0410) }).map(function (_0x4f6447, _0x541761, _0x1db253) { return _0x5003f4(_0x4f6447.length === (611313 ^ 611312), function () { return [_0x4f6447.charCodeAt(133384 ^ 133384)] }, function () { return _0x4f6447.split("%").filter(function (_0x593016, _0x1f9f04, _0x4a401c) { return _0x593016.length > (665368 ^ 665368) }).map(function (_0x431811, _0xd90cb1, _0x34a2dd) { return parseInt(_0x431811, 747339 ^ 747355) }) }) }).reduce(function (_0x37921c, _0x334b2d, _0x457b6b, _0x4d9b6b) { return _0x37921c.concat(_0x334b2d) }, []) }, _0x436337 = function _0x436337(_0x319717) { var _0x554241 = _0xb7b1bc(_0x319717).concat([432555 ^ 432427]).reduce(function (_0x4e12be, _0x5ed38b, _0x4fb194, _0x12f4fe) { return _0x5003f4(_0x4e12be.length === (699788 ^ 699788) || _0x4e12be[_0x4e12be.length - (624012 ^ 624013)].length === (395162 ^ 395166), function () { return _0x4e12be.concat([[_0x5ed38b]]) }, function () { return _0x4e12be.slice(596427 ^ 596427, _0x4e12be.length - (618808 ^ 618809)).concat([_0x4e12be[_0x4e12be.length - 1].concat([_0x5ed38b])]) }) }, []).map(function (_0x593270, _0x2a6633, _0x5e6c78) { var _0x4313a4 = _0x593270.concat([111090 ^ 111090, 0, 0, 901508 ^ 901508]); return _0x4313a4[0] + (_0x4313a4[1] << (488283 ^ 488275)) + (_0x4313a4[2] << 16) + (_0x4313a4[3] << (517520 ^ 517512)) }), _0x1be095 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 761730 ^ 761730, 0, 0, 0, 0], _0x2ea48c = 16 - (_0x554241.length + (509806 ^ 509804)) % (247929 ^ 247913); return _0x554241.concat(_0x1be095).slice(792072 ^ 792072, _0x554241.length + _0x2ea48c) }, _0x121b74 = function _0x121b74(_0x55e831) { return _0x436337(_0x55e831).concat([_0xb7b1bc(_0x55e831).length << 3, 0]) }, _0x39e9fc = function _0x39e9fc(_0x7b4a7a) { return [1732584193, 4023233417, 2562383102, 271733878] }, _0x1f1e66 = function _0x1f1e66(_0x43a043) { var _0x486fe2 = function _0x486fe2(_0x2cbf7f) { return _0x5003f4(2 === _0x2cbf7f.length, function () { var _0x469e11 = (_0x2cbf7f[0] & (313972 ^ 275851)) + (65535 & _0x2cbf7f[1]), _0x20dd29 = (_0x2cbf7f[113326 ^ 113326] >> 16) + (_0x2cbf7f[419410 ^ 419411] >> 16) + (_0x469e11 >> (965834 ^ 965850)); return (_0x20dd29 << (645576 ^ 645592)) + (_0x469e11 & (119537 ^ 77070)) }, function () { return _0x486fe2([_0x2cbf7f[499695 ^ 499695], _0x486fe2(_0x2cbf7f.slice(1))]) }) }, _0x1fea8e = function _0x1fea8e(_0x30dd65, _0x87fd41) { return _0x30dd65 << _0x87fd41 | _0x30dd65 >>> (718784 ^ 718816) - _0x87fd41 }, _0x1c5204 = function _0x1c5204(_0xa455ab, _0x3fdcb5, _0xd3d847) { return _0xa455ab & _0x3fdcb5 | ~_0xa455ab & _0xd3d847 }, _0x3bce25 = function _0x3bce25(_0x470fda, _0x2592e6, _0x541107) { return _0x470fda & _0x541107 | _0x2592e6 & ~_0x541107 }, _0x1572bd = function _0x1572bd(_0x4e9980, _0x5ddf25, _0x29e7ee) { return _0x4e9980 ^ _0x5ddf25 ^ _0x29e7ee }, _0x59b5ad = function _0x59b5ad(_0x12e93f, _0x46a8b6, _0x3b4fda) { return _0x46a8b6 ^ (_0x12e93f | ~_0x3b4fda) }, _0x502642 = function _0x502642(_0x183aca) { return Math.floor(4294967296 * Math.abs(Math.sin(_0x183aca))) }, _0x2e2609 = function _0x2e2609(_0x3ea97e, _0x621e8b, _0x34ed79) { return _0x5003f4(_0x3ea97e.length === 16 * _0x34ed79, function () { return _0x621e8b }, function () { var _0x54eae5 = _0x3ea97e.slice(16 * _0x34ed79, 16 * (_0x34ed79 + (430777 ^ 430776))), _0x49f80a = function _0x49f80a(_0x49f836, _0x28ed0e, _0x38e654, _0x661db2) { return _0x486fe2([_0x49f836[1], _0x1fea8e(_0x486fe2([_0x49f836[892232 ^ 892232], _0x1c5204(_0x49f836[1], _0x49f836[178154 ^ 178152], _0x49f836[829099 ^ 829096]), _0x54eae5[_0x28ed0e], _0x502642(_0x661db2)]), _0x38e654)]) }, _0x10688c = function _0x10688c(_0x43249d, _0x419ce0, _0x28a3e7, _0x39a3cb) { return _0x486fe2([_0x43249d[520023 ^ 520022], _0x1fea8e(_0x486fe2([_0x43249d[0], _0x3bce25(_0x43249d[1], _0x43249d[467732 ^ 467734], _0x43249d[3]), _0x54eae5[_0x419ce0], _0x502642(_0x39a3cb)]), _0x28a3e7)]) }, _0x332442 = function _0x332442(_0x1c5e09, _0x60a85b, _0x514286, _0x3e398f) { return _0x486fe2([_0x1c5e09[1], _0x1fea8e(_0x486fe2([_0x1c5e09[0], _0x1572bd(_0x1c5e09[1], _0x1c5e09[2], _0x1c5e09[3]), _0x54eae5[_0x60a85b], _0x502642(_0x3e398f)]), _0x514286)]) }, _0x332b52 = function _0x332b52(_0x56d28f, _0x3fd1a0, _0xeb8771, _0x2c7c3c) { return _0x486fe2([_0x56d28f[1], _0x1fea8e(_0x486fe2([_0x56d28f[108875 ^ 108875], _0x59b5ad(_0x56d28f[636679 ^ 636678], _0x56d28f[120850 ^ 120848], _0x56d28f[3]), _0x54eae5[_0x3fd1a0], _0x502642(_0x2c7c3c)]), _0xeb8771)]) }, _0x14c03e = function _0x14c03e(_0x48d211, _0x3bd3e6) { return _0x5003f4(16 > _0x3bd3e6, function () { var _0x5b26f0 = _0x3bd3e6, _0x54bf51 = [317047 ^ 317040, 901066 ^ 901062, 233777 ^ 233760, 22][_0x3bd3e6 % 4]; return _0x14c03e([_0x48d211[789973 ^ 789974], _0x49f80a(_0x48d211, _0x5b26f0, _0x54bf51, _0x3bd3e6 + 1), _0x48d211[1], _0x48d211[598562 ^ 598560]], _0x3bd3e6 + 1) }, function () { return _0x5003f4(32 > _0x3bd3e6, function () { var _0x380a59 = ((889332 ^ 889329) * _0x3bd3e6 + (567492 ^ 567493)) % (718786 ^ 718802), _0x11cd52 = [5, 343731 ^ 343738, 14, 20][_0x3bd3e6 % (517924 ^ 517920)]; return _0x14c03e([_0x48d211[3], _0x10688c(_0x48d211, _0x380a59, _0x11cd52, _0x3bd3e6 + (629006 ^ 629007)), _0x48d211[860129 ^ 860128], _0x48d211[2]], _0x3bd3e6 + (790927 ^ 790926)) }, function () { return _0x5003f4(_0x3bd3e6 < (784179 ^ 784131), function () { var _0x2525f3 = (3 * _0x3bd3e6 + 5) % 16, _0x9eedfd = [4, 156943 ^ 156932, 16, 23][_0x3bd3e6 % 4]; return _0x14c03e([_0x48d211[3], _0x332442(_0x48d211, _0x2525f3, _0x9eedfd, _0x3bd3e6 + 1), _0x48d211[1], _0x48d211[2]], _0x3bd3e6 + 1) }, function () { return _0x5003f4(64 > _0x3bd3e6, function () { var _0x9b1dc9 = 7 * _0x3bd3e6 % (141155 ^ 141171), _0x3dbc81 = [6, 809587 ^ 809593, 15, 339997 ^ 339976][_0x3bd3e6 % 4]; return _0x14c03e([_0x48d211[3], _0x332b52(_0x48d211, _0x9b1dc9, _0x3dbc81, _0x3bd3e6 + 1), _0x48d211[1], _0x48d211[837702 ^ 837700]], _0x3bd3e6 + 1) }, function () { return _0x48d211 }) }) }) }) }; return _0x2e2609(_0x3ea97e, _0x14c03e(_0x621e8b, 0).map(function (_0x3d2cfd, _0x194dc9, _0x1646a6) { return _0x486fe2([_0x621e8b[_0x194dc9], _0x3d2cfd]) }), _0x34ed79 + (927141 ^ 927140)) }) }; return _0x2e2609(_0x121b74(_0x43a043), _0x39e9fc(_0x43a043), 0) }, _0x37e573 = function _0x37e573(_0x321cd1) { return _0x321cd1 += "49957".toString(), _0x1f1e66(_0x321cd1).map(function (_0x446a37, _0x3cb3a2, _0x771144) { return [255 & _0x446a37 >> 0, 255 & _0x446a37 >> 8, _0x446a37 >> 16 & (180224 ^ 180479), 255 & _0x446a37 >> 24].map(function (_0x19139b, _0x507227, _0x51b538) { return _0x5003f4(16 > _0x19139b, function () { return "0" + _0x19139b.toString(16) }, function () { return _0x19139b.toString(16) }) }).join("") }).join("") }; return _0x37e573(_0x250496) };
          if (!window.isSaveLocal && typeof types.acA === 'object' && types.getA) {
            const ac = types.acA
            if (ycyCodeModifyType === 1) {
              try {
                const executeCommands = new Function('ac', 'encryptM', ycyCodeModify);
                executeCommands(ac, encryptM);
              } catch (e) {
                alert("请检查输入的代码是否有误！一般是符号或者格式问题！具体错误：" + e + "。如果查不出来，来找小宝！")
              }
            } else if (ycyCodeModifyType === 2) {
              let a = [];
              window.ycyMacros.forEach(v => { a.push(v.cmdLines) });
              const cFun = a.join('\n') + `\n${ycyCodeModify}`
              try {
                const executeCommands = new Function('ac', cFun);
                executeCommands(ac);
              } catch (e) {
                alert("请检查输入的代码是否有误！一般是符号或者格式问题！具体错误：" + e + "。如果查不出来，来找小宝！")
              }
            }
            types.acP.updateNotification()
          } else {
            let modifyYcyValue = [];
            const vk = ["qetuo", "wryip", "adgjl", "sfhk;"];
            const csrf_token = window['Cookies']['get']('TOKEN')
            const ac = {
              var: new Proxy({}, {
                set: (target, property, value) => {
                  modifyYcyValue.push({ content: property, value: value })
                },
                get: (target, property) => {
                  return window['_var'][property];
                }
              }),
              cVar: new Proxy({}, {
                set: (target, property, value) => {
                  modifyYcyValue.push({ content: property, value: value })
                },
                get: (target, property) => {
                  return window['_cVar'][property]
                }
              }),
              arr: new Proxy({}, {
                set: (target, property, value) => {
                  alert(`不可以直接对数组赋值，请检查代码！错误代码：ac.arr.${property}=${value}，格式应为ac.cArr.${property}[0]=${value}`)
                },
                get: (target, property) => {
                  if (window['_arr'][property]) {
                    return new Proxy(window['_arr'][property], {
                      set: (arrTarget, arrProperty, arrValue) => {
                        modifyYcyValue.push({ content: `${property}[${arrProperty}]`, value: arrValue });
                        return true; // 表示成功设置了属性
                      }
                    });
                  } else {
                    return undefined;
                  }
                }
              }),
              cArr: new Proxy({}, {
                set: (target, property, value) => {
                  alert(`不可以直接对数组赋值，请检查代码！错误代码：ac.arr.${property}=${value}，格式应为ac.cArr.${property}[0]=${value}`)
                },
                get: (target, property) => {
                  if (window['_cArr'][property]) {
                    return new Proxy(window['_cArr'][property], {
                      set: (arrTarget, arrProperty, arrValue) => {
                        modifyYcyValue.push({ content: `${property}[${arrProperty}]`, value: arrValue });
                        return true; // 表示成功设置了属性
                      }
                    });
                  } else {
                    return undefined;
                  }
                }
              }),
              saveVarToServer: (send) => {
                //'[{"name":"temgugugunum","val":"100"}]'
                let seng = [];
                Object.keys(send).forEach(v => {
                  seng.push({ "name": v, "val": String(send[v]) })
                })
                var xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
                // 设置请求的URL和方法
                xhr.open("PUT", `https://avg.163.com/avg-portal-api/game/${window.gameId}/user/value/js/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
                // 设置请求头，指明发送的数据类型为JSON
                xhr.setRequestHeader("Content-Type", "application/json");
                // 设置CSRF token，如果API需要的话。这个取决于API的安全要求
                // 在这个例子中，CSRF token已经作为URL参数提供，但也可能需要在请求头中设置
                // xhr.setRequestHeader("X-CSRF-Token", "你的CSRF token");
                xhr.onreadystatechange = function () { // 设置回调函数
                  if (xhr.readyState === 4) { // 请求完成
                    if (xhr.status === 200) {
                      alert("服务端数值修改成功！刷新重新获取吧"); // 请求成功时处理返回的数据
                    } else {
                      alert("服务端数值修改失败，请检查网络或者告知小宝解决！"); // 请求失败时处理错误
                    }
                  }
                };
                const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
                let dataSend = JSON.stringify(seng);
                let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
                // 准备发送的数据
                var data = JSON.stringify({
                  "v": 1,
                  "s": encryptData,
                  "data": dataSend
                });
                xhr.send(data); // 发送请求，带上数据
              }
            };
            try {
              if (ycyCodeModifyType === 1) {
                const executeCommands = new Function('ac', 'encryptM', ycyCodeModify);
                executeCommands(ac, encryptM);
              } else if (ycyCodeModifyType === 2) {
                let a = [];
                window.ycyMacros.forEach(v => { a.push(v.cmdLines) });
                const cFun = a.join('\n') + `\n${ycyCodeModify}`
                const executeCommands = new Function('ac', cFun);
                executeCommands(ac);
              }
              if (modifyYcyValue.length !== 0) {
                let ycyCurrentUser = window['Cookies']['get']('AVG_LOGIN_USER_ID')
                const cVarList = { valueList: [] };
                const carrList = { arrayValues: [] };
                let request = indexedDB.open('avgJsEngine');
                // 处理数据库打开成功的回调
                request.onsuccess = function (event) {
                  var db = event.target.result;
                  // 创建事务并指定对象存储空间，使用 'readwrite' 模式
                  var transaction = db.transaction(['profiles'], 'readwrite');
                  // 获取对象存储空间
                  var objectStore = transaction.objectStore('profiles');
                  // 通过键（key）获取数据
                  const indexedDBKey = [window.gameId, ycyCurrentUser];
                  var getRequest = objectStore.get(indexedDBKey);
                  getRequest.onsuccess = function (event) {
                    var data = event.target.result;
                    if (data) {
                      // 修改数据
                      const a = JSON.parse(data.profiles[0].progress);
                      const endNormalValue = a.scenes[0].endNormalValue
                      const normalValue = a.scenes[0].startNormalValue;
                      const constValue = a.scenes[0].startConstValue;
                      modifyYcyValue.forEach(element => {
                        let feeling = element.content;
                        let number = 1;
                        if (element.content.match(regex)) {
                          const match = element.content.match(regex);
                          feeling = match[1]; // 提取出 "好感"
                          number = match[2].replace(/\[|\]/g, '');
                        }
                        if (window.ycyValues[feeling] && window.ycyValues[feeling]['persisType'] === 'normal') {
                          typeof normalValue['vars'][window.ycyValues[feeling]['id']] !== 'undefined' ? window.ycyValues[feeling]['valueType'] === 'number' ?
                            normalValue['vars'][window.ycyValues[feeling]['id']] = parseInt(element.value, 10) :
                            normalValue['vars'][window.ycyValues[feeling]['id']] = element.value : '';
                          typeof endNormalValue['vars'][window.ycyValues[feeling]['id']] !== 'undefined' ? window.ycyValues[feeling]['valueType'] === 'number' ?
                            endNormalValue['vars'][window.ycyValues[feeling]['id']] = parseInt(element.value, 10) :
                            endNormalValue['vars'][window.ycyValues[feeling]['id']] = element.value : '';
                        } else if (window.ycyValues[feeling] && window.ycyValues[feeling]['persisType'] === 'const') {
                          typeof constValue['cVars'][window.ycyValues[feeling]['id']] !== 'undefined' ? window.ycyValues[feeling]['valueType'] === 'number' ?
                            (() => {
                              constValue['cVars'][window.ycyValues[feeling]['id']] = parseInt(element.value, 10);
                              cVarList.valueList.push({
                                valueId: window.ycyValues[feeling]['id'],
                                numValue: parseInt(element.value, 10)
                              });
                            })() :
                            (() => {
                              constValue['cVars'][window.ycyValues[feeling]['id']] = element.value;
                              cVarList.valueList.push({
                                valueId: window.ycyValues[feeling]['id'],
                                numValue: element.value
                              });
                            })() : '';
                        } else if (window.ycyArrays[feeling] && window.ycyArrays[feeling]['persisType'] === 'normal') {
                          normalValue['arr'][feeling] && typeof normalValue['arr'][feeling][number] !== 'undefined' ? window.ycyArrays[feeling]['arrayValues'][number]['valueType'] === 'number' ?
                            normalValue['arr'][feeling][number] = parseInt(element.value, 10) :
                            normalValue['arr'][feeling][number] = element.value : '';
                          endNormalValue['arr'][feeling] && typeof endNormalValue['arr'][feeling][number] !== 'undefined' ? window.ycyArrays[feeling]['arrayValues'][number]['valueType'] === 'number' ?
                            endNormalValue['arr'][feeling][number] = parseInt(element.value, 10) :
                            endNormalValue['arr'][feeling][number] = element.value : '';
                        } else if (window.ycyArrays[feeling] && window.ycyArrays[feeling]['persisType'] === 'const') {
                          constValue['cArr'][feeling] ? window.ycyArrays[feeling]['arrayValues'][number]['valueType'] === 'number' ?
                            (() => {
                              constValue['cArr'][feeling][number] = parseInt(element.value, 10);
                              carrList.arrayValues.push({
                                valueId: window.ycyArrays[feeling]['arrayValues'][number]['id'],
                                numValue: parseInt(element.value, 10)
                              });
                            })() :
                            (() => {
                              constValue['cArr'][feeling][number] = element.value;
                              carrList.arrayValues.push({
                                valueId: window.ycyArrays[feeling]['arrayValues'][number]['id'],
                                numValue: element.value
                              });
                            })() : '';
                        }
                      });
                      a.scenes[0].startNormalValue = normalValue;
                      a.scenes[0].startConstValue = constValue;
                      a.scenes[0].endNormalValue = endNormalValue;
                      data.profiles[0].profileName = data.profiles[0].profileName.replaceAll('修改数值：', '').replaceAll('跳转剧情：', '').replaceAll('初始化数值：', '')
                      data.profiles[0].profileName = `修改数值：${data.profiles[0].profileName}`;
                      const vv = isNaN(a.v) ? vk[a.v] : vk[vk.length - 1];
                      const vnv = a.v !== void 0 && a.v < 3 ? String(newId) : ''
                      a.s = CryptoJS['MD5'](vnv + getSortedObjString(a.scenes[0].startNormalValue) + getSortedObjString(a.scenes[0].endNormalValue) + getSortedObjString(a.scenes[0].startSysValue) + getSortedObjString(a.scenes[0].endSysValue) + vv).toString()
                      data.profiles[0].progress = JSON.stringify(a)
                      // 使用 put 方法将修改后的数据存回数据库
                      var updateRequest = objectStore.put(data);

                      updateRequest.onsuccess = function (event) {
                        console.log('Data updated successfully');
                      };

                      updateRequest.onerror = function (event) {
                        console.error('Error updating data:', event.target.error.message);
                        alert("修改失败请重新添加数值修改")
                      };
                      if (cVarList.valueList.length !== 0) {
                        var xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
                        // 设置请求的URL和方法
                        xhr.open("PUT", `https://avg.163.com/avg-portal-api/game/${window.gameId}/user/value/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
                        // 设置请求头，指明发送的数据类型为JSON
                        xhr.setRequestHeader("Content-Type", "application/json");
                        // 设置CSRF token，如果API需要的话。这个取决于API的安全要求
                        // 在这个例子中，CSRF token已经作为URL参数提供，但也可能需要在请求头中设置
                        // xhr.setRequestHeader("X-CSRF-Token", "你的CSRF token");
                        xhr.onreadystatechange = function () { // 设置回调函数
                          if (xhr.readyState === 4) { // 请求完成
                            if (xhr.status === 200) {
                              alert("全档数值成功修改，刷新重新获取吧！"); // 请求成功时处理返回的数据
                            } else {
                              alert("全档数值修改失败，请检查网络或者告知小宝解决！"); // 请求失败时处理错误
                            }
                          }
                        };
                        const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
                        let dataSend = JSON.stringify(cVarList);
                        let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
                        // 准备发送的数据
                        var data = JSON.stringify({
                          "v": 1,
                          "s": encryptData,
                          "data": dataSend
                        });
                        xhr.send(data); // 发送请求，带上数据
                      } else if (carrList.arrayValues.length !== 0) {
                        var xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
                        // 设置请求的URL和方法
                        xhr.open("PUT", `https://avg.163.com/avg-portal-api/game/${window.gameId}/user/array/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
                        // 设置请求头，指明发送的数据类型为JSON
                        xhr.setRequestHeader("Content-Type", "application/json");
                        // 设置CSRF token，如果API需要的话。这个取决于API的安全要求
                        // 在这个例子中，CSRF token已经作为URL参数提供，但也可能需要在请求头中设置
                        // xhr.setRequestHeader("X-CSRF-Token", "你的CSRF token");
                        xhr.onreadystatechange = function () { // 设置回调函数
                          if (xhr.readyState === 4) { // 请求完成
                            if (xhr.status === 200) {
                              alert("全档数组数值成功修改，刷新重新获取吧！"); // 请求成功时处理返回的数据
                            } else {
                              alert("全档数组数值修改失败，请检查网络或者告知小宝解决！"); // 请求失败时处理错误
                            }
                          }
                        };
                        const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
                        let dataSend = JSON.stringify(carrList);
                        let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
                        // 准备发送的数据
                        var data = JSON.stringify({
                          "v": 1,
                          "s": encryptData,
                          "data": dataSend
                        });
                        xhr.send(data); // 发送请求，带上数据
                      }
                    } else {
                      alert("请在本地第一个档位存档")
                    }
                  };

                  getRequest.onerror = function (event) {
                    console.error('Error reading data:', event.target.error);
                  };
                };

                // 处理数据库打开失败的回调
                request.onerror = function (event) {
                  console.error('Error opening database:', event.target.error);
                };
              }
            } catch (e) {
              alert("请检查输入的代码是否有误！一般是符号或者格式问题！具体错误：" + e)
            }
          }
        }
      }
    }
  })
  //ycy下载代码文件
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'downloadYcyGameCode' && window.typeGame) {
        const isValidJson = (str) => {
          if (typeof str !== 'string' || !str.trim()) {
            return false;
          }
          if (!Number.isNaN(Number(str)) && str.trim() === String(Number(str))) {
            return false;
          }
          try {
            const jsonData = JSON.parse(str);
            // 排除空数组和空对象
            return (
              (Array.isArray(jsonData) && jsonData.length > 0) ||
              (typeof jsonData === 'object' && jsonData !== null && Object.keys(jsonData).length > 0)
            );
          } catch {
            return false;
          }
        };
        const generateCodeString = (jsonStr, strName) => {
          const parsedObj = JSON.parse(jsonStr);
          let counter = 1; // 用于生成唯一的变量名
          // 递归生成赋值语句的函数
          const generateAssignments = (obj, prefix, indentLevel) => {
            const indent = '\t'.repeat(indentLevel); // 当前缩进级别
            if (obj === null) {
              return
            }
            if (Object.keys(obj).length === 0) {
              return `${indent}${prefix} = {};`;
            }
            return Object.entries(obj).map(([key, value]) => {
              // 处理键
              const formattedKey = isNaN(key) ? `.${key}` : `[${key}]`;
              const currentPrefix = `${prefix}${formattedKey}`;

              if (typeof value === 'string' && isValidJson(value)) {
                // 处理嵌套 JSON 字符串
                const parsedValue = JSON.parse(value);
                const localVar = `jstr${counter++}`;
                const nestedAssignments = Array.isArray(parsedValue)
                  ? generateArrayAssignments(parsedValue, localVar, indentLevel + 1)
                  : generateAssignments(parsedValue, localVar, indentLevel + 1);
                return `${indent}let ${localVar} = JSON.parse(${currentPrefix});\n${nestedAssignments}\n${indent}${currentPrefix} = JSON.stringify(${localVar});`.trim();
              } else if (typeof value === 'object' && !Array.isArray(value) && value !== null) {
                // 对象类型
                return generateAssignments(value, currentPrefix, indentLevel);
              } else if (Array.isArray(value)) {
                // 数组类型
                return generateArrayAssignments(value, currentPrefix, indentLevel);
              } else if (value !== null) {
                // 基本数据类型
                return `${indent}${currentPrefix} = ${JSON.stringify(value)};`;
              }
            }).flat().filter(line => line !== '').join('\n').trim(); // 使用 join('\n') 以确保每一行有适当的缩进
          };

          // 生成数组赋值语句的函数
          const generateArrayAssignments = (arr, prefix, indentLevel) => {
            const indent = '\t'.repeat(indentLevel); // 当前缩进级别
            if (arr.length === 0) {
              // 如果数组为空
              return `${indent}${prefix} = [];`;
            }
            const allNumbers = arr.every(item => typeof item === 'number');
            const allStrings = arr.every(item => typeof item === 'string');

            if (allNumbers) {
              // 如果数组所有元素都是数字
              const length = arr.length;
              if (length > 10) {
                // 如果数组长度大于 5，使用循环赋值
                return `${indent}for (let i = 0; i < ${length}; i++) {\n${indent}\t${prefix}[i] = ${JSON.stringify(arr[0])};\n${indent}}`.trim();
              } else {
                // 如果数组长度小于或等于 5，直接赋值
                return `${indent}${prefix} = ${JSON.stringify(arr)};`;
              }
            } else if (allStrings) {
              // 如果数组所有元素都是字符串
              return arr.map((item, index) => {
                const currentPrefix = `${prefix}[${index}]`;
                if (isValidJson(item)) {
                  const localVar = `jstr${counter++}`;
                  const nestedAssignments = generateAssignments(JSON.parse(item), localVar, indentLevel + 1);
                  return `${indent}let ${localVar} = JSON.parse(${currentPrefix});\n${nestedAssignments}\n${indent}${currentPrefix} = JSON.stringify(${localVar});`.trim();
                } else {
                  return `${indent}${currentPrefix} = ${JSON.stringify(item)};`;
                }
              }).flat().filter(line => line !== '').join('\n');
            } else {
              // 数组中有混合类型，递归处理每个元素
              return arr.map((item, index) => {
                const currentPrefix = `${prefix}[${index}]`;
                if (typeof item === 'string' && isValidJson(item)) {
                  // 处理数组中 JSON 字符串
                  const parsedItem = JSON.parse(item);
                  const localVar = `jstr${counter++}`;
                  const nestedAssignments = Array.isArray(parsedItem)
                    ? generateArrayAssignments(parsedItem, localVar, indentLevel + 1)
                    : generateAssignments(parsedItem, localVar, indentLevel + 1);
                  return `${indent}let ${localVar} = JSON.parse(${currentPrefix});\n${nestedAssignments}\n${indent}${currentPrefix} = JSON.stringify(${localVar});`.trim();
                }
                if (typeof item === 'object' && !Array.isArray(item) && item !== null) {
                  return generateAssignments(item, currentPrefix, indentLevel);
                } else if (Array.isArray(item)) {
                  return generateArrayAssignments(item, currentPrefix, indentLevel);
                } else if (item !== null) {
                  return `${indent}${currentPrefix} = ${JSON.stringify(item)};`;
                }
              }).flat().filter(line => line !== '').join('\n').trim();
            }
          };

          const assignments = Array.isArray(parsedObj)
            ? generateArrayAssignments(parsedObj, 'jstr', 0)
            : generateAssignments(parsedObj, 'jstr', 0);
          const codeString = `let jstr = JSON.parse(${strName});\n${assignments}\n${strName} = JSON.stringify(jstr);`.trim(); // 仅去掉前后的多余空行
          return codeString;
        };
        const needDownAllS = window.confirm('需要生成所有字符数值吗(除开空值)？')
        const needDownEveryA = window.confirm('需要数组数值生成每个的代码(不建议，需要再用，因为太多了)？')
        const downloadYcyGameCode = message.value;
        let spaces = ' '.repeat(60);/* 20个空格 */
        let downStringArray = [`${spaces}<${window.gameName}>的检测数值`];
        let downStringArrayV = [];
        let downStringArrayJV = [`\n\n${spaces}<${window.gameName}>的json字符串数值`];
        let downStringStrVal = [];
        let firstConstV = 1;
        let firstNormalV = 1;
        let firstSv = 1;
        let firstConstA = 1;
        let firstNormalA = 1;
        let firstSa = 1;
        let firstConstStrVal = 1
        let firstNormalStrVal = 1
        if (window.cts && Object.values(window.jc).length !== 0) {
          Object.values(window.jc).forEach(v => {
            v.forEach((k, v1) => {
              if (v1 !== v.length - 1 && k.valueNum !== 'Ajax插件的提示') {
                const spaces = ' '.repeat(30 - `检测数值：${k.valueName}`.length);
                downStringArray.push(`检测数值：${k.valueName}${spaces}当前大小：${k.valueNum}`)
              }
            })
          })
        } else {
          downStringArray.push(`${spaces}没有检测呀，放心玩吧₍ᐢ.ˬ.⑅ᐢ₎`)
        }
        if (window.typeGame === '1') {
          window.ycySortedV.forEach(v => {
            if (v.valueType === 'number') {
              if (v.persisType === 'const') {
                if (firstConstV === 1) {
                  downStringArray.push(`\n\n${spaces}<${window.gameName}>的全档普通数值`)
                  firstConstV++
                }
                const value = v.value !== undefined ? BaseUtils.decryptoNumber(v.value) : 0
                downStringArray.push(`AVGCmdCalcUtils.calc('@${v.name}=${value}')`)
              } else if (v.persisType === 'normal') {
                if (firstNormalV === 1) {
                  downStringArray.push(`\n\n${spaces}<${window.gameName}>的单档普通数值`)
                  firstNormalV++
                }
                const value = v.value !== undefined ? BaseUtils.decryptoNumber(v.value) : 0
                downStringArray.push(`AVGCmdCalcUtils.calc('@${v.name}=${value}')`)
              }
            } else if (v.valueType === 'string' && needDownAllS) {
              if (firstSv === 1) {
                downStringArrayV.push(`\n\n${spaces}<${window.gameName}>的字符数值`)
                firstSv++
              }
              if (v.value) {
                downStringArrayV.push(`AVGCmdCalcUtils.calc('@${v.name}=${JSON.stringify(v.value)}')`)
              }
            }
          })
          window.ycySortedA.forEach(v => {
            if (v.size !== 0 && v.arrayValues[v.size].valueType === 'number') {
              const allNumbers = Object.values(v.arrayValues).every(item => item.valueType === 'number');
              if (allNumbers) {
                if (firstConstA === 1 && v.persisType === 'const') {
                  downStringArray.push(`\n\n${spaces}<${window.gameName}>的全档数组数值`)
                  firstConstA++
                } else if (firstNormalA === 1 && v.persisType === 'normal') {
                  downStringArray.push(`\n\n${spaces}<${window.gameName}>的单档数组数值`)
                  firstNormalA++
                }
                downStringArray.push(`for(const i in AVG_GLOBAL_CONFIG.arrays['${v.name}'].arrayValues){AVGCmdCalcUtils.calc(\`@${v.name}[\${i}]=0\`)}`)
                if (needDownEveryA) {
                  Object.values(v.arrayValues).forEach((v1, k) => {
                    const value = BaseUtils.decryptoNumber(v1.value) || 0
                    if (k === Object.values(v.arrayValues).length - 1) {
                      downStringArray.push(`AVGCmdCalcUtils.calc('@${v.name}[${v1.indexId}]=${value}')\n`)
                    } else {
                      downStringArray.push(`AVGCmdCalcUtils.calc('@${v.name}[${v1.indexId}]=${value}')`)
                    }
                  })
                }
              } else {
                if (firstConstStrVal === 1 && v.persisType === 'const') {
                  downStringStrVal.push(`\n\n${spaces}<${window.gameName}>的全档数组数值(既有字符也有数字)`)
                  firstConstStrVal++
                } else if (firstNormalStrVal === 1 && v.persisType === 'normal') {
                  downStringStrVal.push(`\n\n${spaces}<${window.gameName}>的单档数组数值(既有字符也有数字)`)
                  firstNormalStrVal++
                }
                if (!downStringStrVal.at(-1).includes('\n')) {
                  downStringStrVal[downStringStrVal.length - 1] = `${downStringStrVal.at(-1)}\n`
                }
                const nonNumberItems = Object.values(v.arrayValues).filter(item => item.valueType !== 'number');
                const indices = nonNumberItems.map(item => item.indexId);
                downStringStrVal.push(`const ni=[${indices}];for(const i in AVG_GLOBAL_CONFIG.arrays['${v.name}'].arrayValues){if(!ni.includes(Number(i))){AVGCmdCalcUtils.calc(\`@${v.name}[\${i}]=0\`)}}`)
                if (needDownEveryA) {
                  Object.values(v.arrayValues).forEach((v1, k) => {
                    if (!indices.includes(v1.indexId)) {
                      const value = BaseUtils.decryptoNumber(v1.value) || 0
                      downStringArray.push(`AVGCmdCalcUtils.calc('@${v.name}[${v1.indexId}]=${value}')`)
                    }
                  })
                }
                nonNumberItems.forEach((v1, k) => {
                  if (v1.value) {
                    if (k === nonNumberItems.length - 1) {
                      downStringStrVal.push(`AVGCmdCalcUtils.calc('@${v.name}[${v1.indexId}]=${JSON.stringify(v1.value)}')\n`)
                    } else {
                      downStringStrVal.push(`AVGCmdCalcUtils.calc('@${v.name}[${v1.indexId}]=${JSON.stringify(v1.value)}')`)
                    }
                  }
                })
              }
            } else if (v.size !== 0 && v.arrayValues[v.size].valueType === 'string' && needDownAllS) {
              const allString = Object.values(v.arrayValues).every(item => item.valueType === 'string');
              const value = Object.values(v.arrayValues).find(v1 => typeof v1.value === 'string' && v1.value)
              if (allString) {
                if (firstSa === 1) {
                  downStringArrayV.push(`\n\n${spaces}<${window.gameName}>的数组字符数值`)
                  firstSa++
                }
                if (!downStringArrayV.at(-1).includes('\n')) {
                  downStringArrayV[downStringArrayV.length - 1] = `${downStringArrayV.at(-1)}\n`
                }
                if (needDownEveryA) {
                  Object.values(v.arrayValues).forEach((v1, k) => {
                    if (v1.value) {
                      if (k === Object.values(v.arrayValues).length - 1) {
                        downStringArrayV.push(`AVGCmdCalcUtils.calc('@${v.name}[${v1.indexId}]=${JSON.stringify(v1.value)}')\n`)
                      } else {
                        downStringArrayV.push(`AVGCmdCalcUtils.calc('@${v.name}[${v1.indexId}]=${JSON.stringify(v1.value)}')`)
                      }
                    }
                  })
                } else {
                  if (value) {
                    downStringArrayV.push(`AVGCmdCalcUtils.calc('@${v.name}[1]=${JSON.stringify(value.value)}')    /*1-${v.size}*/`)
                  } else {
                    downStringArrayV.push(`AVGCmdCalcUtils.calc('@${v.name}[1]=${JSON.stringify('')}')    /*1-${v.size}*/`)
                  }
                }
              } else {
                if (firstConstStrVal === 1 && v.persisType === 'const') {
                  downStringStrVal.push(`\n\n${spaces}<${window.gameName}>的全档数组数值(既有字符也有数字)`)
                  firstConstStrVal++
                } else if (firstNormalStrVal === 1 && v.persisType === 'normal') {
                  downStringStrVal.push(`\n\n${spaces}<${window.gameName}>的单档数组数值(既有字符也有数字)`)
                  firstNormalStrVal++
                }
                if (!downStringStrVal.at(-1).includes('\n')) {
                  downStringStrVal[downStringStrVal.length - 1] = `${downStringStrVal.at(-1)}\n`
                }
                const nonNumberItems = Object.values(v.arrayValues).filter(item => item.valueType !== 'string');
                const indices = nonNumberItems.map(item => item.indexId);
                if (needDownEveryA) {
                  Object.values(v.arrayValues).forEach((v1, k) => {
                    if (v1.value && !indices.includes(k)) {
                      downStringStrVal.push(`AVGCmdCalcUtils.calc('@${v.name}[${v1.indexId}]=${JSON.stringify(v1.value)}')`)
                    }
                  })
                } else {
                  if (value) {
                    downStringStrVal.push(`AVGCmdCalcUtils.calc('@${v.name}[1]=${JSON.stringify(value.value)}')    /*1-${v.size}，其中${indices.join('、')}为普通数值*/`)
                  } else {
                    downStringStrVal.push(`AVGCmdCalcUtils.calc('@${v.name}[1]=${JSON.stringify('')}')    /*1-${v.size}，其中${indices.join('、')}为普通数值*/`)
                  }
                }
                nonNumberItems.forEach((v1, k) => {
                  const numValue = BaseUtils.decryptoNumber(v1.value) || 0
                  if (k === nonNumberItems.length - 1) {
                    downStringStrVal.push(`AVGCmdCalcUtils.calc('@${v.name}[${v1.indexId}]=${numValue}')\n`)
                  } else {
                    downStringStrVal.push(`AVGCmdCalcUtils.calc('@${v.name}[${v1.indexId}]=${numValue}')`)
                  }
                })
              }
            }
          })
        } else if (window.typeGame === '2') {
          window.ycySortedV.forEach(v => {
            if (v.valueType === 'number') {
              if (v.persisType === 'const') {
                if (firstConstV === 1) {
                  downStringArray.push(`\n\n${spaces}<${window.gameName}>的全档普通数值`)
                  firstConstV++
                }
                const value = window._cVar[v.name]
                downStringArray.push(`ac.cVar.${v.name}=${value}`)
              } else if (v.persisType === 'normal') {
                if (firstNormalV === 1) {
                  downStringArray.push(`\n\n${spaces}<${window.gameName}>的单档普通数值`)
                  firstNormalV++
                }
                const value = window._var[v.name]
                downStringArray.push(`ac.var.${v.name}=${value}`)
              }
            } else if (v.valueType === 'string') {
              if (firstSv === 1) {
                downStringArrayV.push(`\n\n${spaces}<${window.gameName}>的字符数值`)
                firstSv++
              }
              if (v.persisType === 'const') {
                const strValue = window._cVar[v.name]
                if (isValidJson(strValue)) {
                  if (downloadYcyGameCode) {
                    const generatedCode = generateCodeString(strValue, `ac.cVar.${v.name}`);
                    downStringArrayJV.push(`${generatedCode}\n`)
                  } else {
                    downStringArrayJV.push(`ac.cVar.${v.name}=${JSON.stringify(strValue)}\n`)
                  }
                } else if (needDownAllS && strValue) {
                  downStringArrayV.push(`ac.cVar.${v.name}=${JSON.stringify(strValue)}`)
                }
              } else if (v.persisType === 'normal') {
                const strValue = window._var[v.name]
                if (isValidJson(strValue)) {
                  if (downloadYcyGameCode) {
                    const generatedCode = generateCodeString(strValue, `ac.var.${v.name}`);
                    downStringArrayJV.push(`${generatedCode}\n`)
                  } else {
                    downStringArrayJV.push(`ac.var.${v.name}=${JSON.stringify(strValue)}\n`)
                  }
                } else if (needDownAllS && strValue) {
                  downStringArrayV.push(`ac.var.${v.name}=${JSON.stringify(strValue)}`)
                }
              }
            }
          })
          window.ycySortedA.forEach(v => {
            if (v.size !== 0 && v.arrayValues[v.size - 1].valueType === 'number') {
              if (v.persisType === 'const') {
                const allNumbers = v.arrayValues.every(item => item.valueType === 'number');
                if (allNumbers) {
                  if (firstConstA === 1) {
                    downStringArray.push(`\n\n${spaces}<${window.gameName}>的全档数组数值`)
                    firstConstA++
                  }
                  downStringArray.push(`for(const i in ac.cArr.${v.name}){ac.cArr.${v.name}[i]=0}`)
                  if (needDownEveryA) {
                    v.arrayValues.forEach((v1, k) => {
                      const value = window._cArr[v.name][v1.indexId - 1]
                      if (k === v.arrayValues.length - 1) {
                        downStringArray.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${value}\n`)
                      } else {
                        downStringArray.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${value}`)
                      }
                    })
                  }
                } else {
                  if (firstConstStrVal === 1) {
                    downStringStrVal.push(`\n\n${spaces}<${window.gameName}>的全档数组数值(既有字符也有数字)`)
                    firstConstStrVal++
                  }
                  if (!downStringStrVal.at(-1).includes('\n')) {
                    downStringStrVal[downStringStrVal.length - 1] = `${downStringStrVal.at(-1)}\n`
                  }
                  const nonNumberItems = v.arrayValues.filter(item => item.valueType !== 'number');
                  const indices = nonNumberItems.map(item => item.indexId);
                  downStringStrVal.push(`const ni=[${indices}];for(const i in ac.cArr.${v.name}){if(!ni.includes(Number(i))){ac.cArr.${v.name}[i]=0}}`)
                  if (needDownEveryA) {
                    v.arrayValues.forEach((v1, k) => {
                      if (!indices.includes(k)) {
                        const value = window._cArr[v.name][v1.indexId - 1]
                        downStringStrVal.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${value}`)
                      }
                    })
                  }
                  nonNumberItems.forEach((v1, k) => {
                    const value = window._cArr[v.name][v1.indexId - 1]
                    if (isValidJson(value)) {
                      if (downloadYcyGameCode) {
                        const generatedCode = generateCodeString(value, `ac.cArr.${v.name}[${v1.indexId - 1}]`);
                        downStringArrayJV.push(`${generatedCode}\n`)
                      } else {
                        downStringArrayJV.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}\n`)
                      }
                    } else if (needDownAllS && value) {
                      if (k === nonNumberItems.length - 1) {
                        downStringStrVal.push(`ac.cVar.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}\n`)
                      } else {
                        downStringStrVal.push(`ac.cVar.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}`)
                      }
                    }
                  })
                }
              } else if (v.persisType === 'normal') {
                const allNumbers = v.arrayValues.every(item => item.valueType === 'number');
                if (allNumbers) {
                  if (firstNormalA === 1) {
                    downStringArray.push(`\n\n${spaces}<${window.gameName}>的单档数组数值`)
                    firstNormalA++
                  }
                  downStringArray.push(`for(const i in ac.arr.${v.name}){ac.arr.${v.name}[i]=0}`)
                  if (needDownEveryA) {
                    v.arrayValues.forEach((v1, k) => {
                      const value = window._arr[v.name][v1.indexId - 1]
                      if (k === v.arrayValues.length - 1) {
                        downStringArray.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${value}\n`)
                      } else {
                        downStringArray.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${value}`)
                      }
                    })
                  }
                } else {
                  if (firstNormalStrVal === 1) {
                    downStringStrVal.push(`\n\n${spaces}<${window.gameName}>的单档数组数值(既有字符也有数字)`)
                    firstNormalStrVal++
                  }
                  if (!downStringStrVal.at(-1).includes('\n')) {
                    downStringStrVal[downStringStrVal.length - 1] = `${downStringStrVal.at(-1)}\n`
                  }
                  const nonNumberItems = v.arrayValues.filter(item => item.valueType !== 'number');
                  const indices = nonNumberItems.map(item => item.indexId - 1);
                  downStringStrVal.push(`const ni=[${indices}];for(const i in ac.arr.${v.name}){if(!ni.includes(Number(i))){ac.arr.${v.name}[i]=0}}`)
                  if (needDownEveryA) {
                    v.arrayValues.forEach((v1, k) => {
                      if (!indices.includes(k)) {
                        const value = window._arr[v.name][v1.indexId - 1]
                        downStringStrVal.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${value}`)
                      }
                    })
                  }
                  nonNumberItems.forEach((v1, k) => {
                    const value = window._arr[v.name][v1.indexId - 1]
                    if (isValidJson(value)) {
                      if (downloadYcyGameCode) {
                        const generatedCode = generateCodeString(value, `ac.arr.${v.name}[${v1.indexId - 1}]`);
                        downStringArrayJV.push(`${generatedCode}\n`)
                      } else {
                        downStringArrayJV.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}\n`)
                      }
                    } else if (needDownAllS && value) {
                      if (k === nonNumberItems.length - 1) {
                        downStringStrVal.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}\n`)
                      } else {
                        downStringStrVal.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}`)
                      }
                    }
                  })
                }
              }
            } else if (v.size !== 0 && v.arrayValues[v.size - 1].valueType === 'string') {
              if (v.persisType === 'const') {
                const allString = v.arrayValues.every(item => item.valueType === 'string');
                if (allString) {
                  if (firstSa === 1) {
                    downStringArrayV.push(`\n\n${spaces}<${window.gameName}>的数组字符数值`)
                    firstSa++
                  }
                  if (!downStringArrayV.at(-1).includes('\n')) {
                    downStringArrayV[downStringArrayV.length - 1] = `${downStringArrayV.at(-1)}\n`
                  }
                  if (needDownAllS && !needDownEveryA) {
                    const jsonStringItems = v.arrayValues.filter(item => isValidJson(window._cArr[v.name][item.indexId - 1]))
                      .map(item => item.indexId - 1);
                    const nonJsonStringItems = v.arrayValues.filter(item => !isValidJson(window._cArr[v.name][item.indexId - 1]));
                    const indices = nonJsonStringItems.map(item => item.indexId - 1);
                    const indexN = indices.find(indexId => window._cArr[v.name][indexId])
                    if (indexN) {
                      const value = window._cArr[v.name][indexN]
                      if (jsonStringItems.length !== 0) {
                        downStringArrayV.push(`ac.cArr.${v.name}[${indexN}]=${JSON.stringify(value)}    /*0-${v.size - 1}，其中${jsonStringItems.join('、')}为json字符*/`)
                      } else {
                        downStringArrayV.push(`ac.cArr.${v.name}[${indexN}]=${JSON.stringify(value)}    /*0-${v.size - 1}*/`)
                      }
                    } else if (indices.length !== 0) {
                      if (jsonStringItems.length !== 0) {
                        downStringArrayV.push(`ac.cArr.${v.name}[${indices[0]}]=${JSON.stringify('')}    /*0-${v.size - 1}，其中${jsonStringItems.join('、')}为json字符*/`)
                      } else {
                        downStringArrayV.push(`ac.cArr.${v.name}[${indices[0]}]=${JSON.stringify('')}    /*0-${v.size - 1}*/`)
                      }
                    }
                  }
                  v.arrayValues.forEach((v1, k) => {
                    const value = window._cArr[`${v.name}`][v1.indexId - 1]
                    if (isValidJson(value)) {
                      if (downloadYcyGameCode) {
                        const generatedCode = generateCodeString(value, `ac.cArr.${v.name}[${v1.indexId - 1}]`);
                        downStringArrayJV.push(`${generatedCode}\n`)
                      } else {
                        downStringArrayJV.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}\n`)
                      }
                    } else if (needDownAllS && needDownEveryA && value) {
                      if (k === v.arrayValues.length - 1) {
                        downStringArrayV.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}\n`)
                      } else {
                        downStringArrayV.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}`)
                      }
                    }
                  })
                } else {
                  if (firstConstStrVal === 1) {
                    downStringStrVal.push(`\n\n${spaces}<${window.gameName}>的全档数组数值(既有字符也有数字)`)
                    firstConstStrVal++
                  }
                  if (!downStringStrVal.at(-1).includes('\n')) {
                    downStringStrVal[downStringStrVal.length - 1] = `${downStringStrVal.at(-1)}\n`
                  }
                  if (needDownAllS && !needDownEveryA) {
                    const nonJsonStringItems = v.arrayValues.filter(item => !isValidJson(window._cArr[v.name][item.indexId - 1]));
                    const indicesStr = nonJsonStringItems.filter(item => item.valueType === 'string')
                      .map(item => item.indexId - 1);
                    const indexN = indicesStr.find(indexId => window._cArr[v.name][indexId])
                    if (indexN) {
                      const value = window._cArr[v.name][indexN]
                      downStringStrVal.push(`ac.cArr.${v.name}[${indexN}]=${JSON.stringify(value)}    /*${indicesStr.join('、')}为字符数值*/`)
                    } else if (indicesStr.length !== 0) {
                      downStringStrVal.push(`ac.cArr.${v.name}[${indicesStr[0]}]=${JSON.stringify('')}    /*${indicesStr.join('、')}为字符数值*/`)
                    }
                  }
                  v.arrayValues.forEach(v1 => {
                    const value = window._cArr[v.name][v1.indexId - 1]
                    if (isValidJson(value)) {
                      if (downloadYcyGameCode) {
                        const generatedCode = generateCodeString(value, `ac.cArr.${v.name}[${v1.indexId - 1}]`);
                        downStringArrayJV.push(`${generatedCode}\n`)
                      } else {
                        downStringArrayJV.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}\n`)
                      }
                    } else if (needDownAllS && needDownEveryA && typeof value === 'string' && value) {
                      downStringStrVal.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}`)
                    }
                  })
                  const nonStringItems = v.arrayValues.filter(item => item.valueType !== 'string');
                  const indices = nonStringItems.map(item => item.indexId - 1);
                  if (!needDownEveryA) {
                    downStringStrVal.push(`ac.cArr.${v.name}[0]=0    /*${indices.join('、')}为普通数值*/`)
                  } else {
                    nonStringItems.forEach((v1, k) => {
                      const value = window._cArr[v.name][v1.indexId - 1]
                      if (k === nonStringItems.length - 1) {
                        downStringStrVal.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${value}\n`)
                      } else {
                        downStringStrVal.push(`ac.cArr.${v.name}[${v1.indexId - 1}]=${value}`)
                      }
                    })
                  }
                }
              } else if (v.persisType === 'normal') {
                const allString = v.arrayValues.every(item => item.valueType === 'string');
                if (allString) {
                  if (firstSa === 1) {
                    downStringArrayV.push(`\n\n${spaces}<${window.gameName}>的数组字符数值`)
                    firstSa++
                  }
                  if (!downStringArrayV.at(-1).includes('\n')) {
                    downStringArrayV[downStringArrayV.length - 1] = `${downStringArrayV.at(-1)}\n`
                  }
                  if (needDownAllS && !needDownEveryA) {
                    const jsonStringItems = v.arrayValues.filter(item => isValidJson(window._arr[v.name][item.indexId - 1]))
                      .map(item => item.indexId - 1);
                    const nonJsonStringItems = v.arrayValues.filter(item => !isValidJson(window._arr[v.name][item.indexId - 1]));
                    const indices = nonJsonStringItems.map(item => item.indexId - 1);
                    const indexN = indices.find(indexId => window._arr[v.name][indexId])
                    if (indexN) {
                      const value = window._arr[v.name][indexN]
                      if (jsonStringItems.length !== 0) {
                        downStringArrayV.push(`ac.arr.${v.name}[${indexN}]=${JSON.stringify(value)}    /*0-${v.size - 1}，其中${jsonStringItems.join('、')}为json字符*/`)
                      } else {
                        downStringArrayV.push(`ac.arr.${v.name}[${indexN}]=${JSON.stringify(value)}    /*0-${v.size - 1}*/`)
                      }
                    } else if (indices.length !== 0) {
                      if (jsonStringItems.length !== 0) {
                        downStringArrayV.push(`ac.arr.${v.name}[${indices[0]}]=${JSON.stringify('')}    /*0-${v.size - 1}，其中${jsonStringItems.join('、')}为json字符*/`)
                      } else {
                        downStringArrayV.push(`ac.arr.${v.name}[${indices[0]}]=${JSON.stringify('')}    /*0-${v.size - 1}*/`)
                      }
                    }
                  }
                  v.arrayValues.forEach((v1, k) => {
                    const value = window._arr[v.name][v1.indexId - 1]
                    if (isValidJson(value)) {
                      if (downloadYcyGameCode) {
                        const generatedCode = generateCodeString(value, `ac.arr.${v.name}[${v1.indexId - 1}]`);
                        downStringArrayJV.push(`${generatedCode}\n`)
                      } else {
                        downStringArrayJV.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}\n`)
                      }
                    } else if (needDownAllS && needDownEveryA && value) {
                      if (k === v.arrayValues.length - 1) {
                        downStringArrayV.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}\n`)
                      } else {
                        downStringArrayV.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}`)
                      }
                    }
                  })
                } else {
                  if (firstNormalStrVal === 1) {
                    downStringStrVal.push(`\n\n${spaces}<${window.gameName}>的单档数组数值(既有字符也有数字)`)
                    firstNormalStrVal++
                  }
                  if (!downStringStrVal.at(-1).includes('\n')) {
                    downStringStrVal[downStringStrVal.length - 1] = `${downStringStrVal.at(-1)}\n`
                  }
                  if (needDownAllS && !needDownEveryA) {
                    const nonJsonStringItems = v.arrayValues.filter(item => !isValidJson(window._arr[v.name][item.indexId - 1]));
                    const indicesStr = nonJsonStringItems.filter(item => item.valueType === 'string')
                      .map(item => item.indexId - 1);
                    const indexN = indicesStr.find(indexId => window._arr[v.name][indexId])
                    if (indexN) {
                      const value = window._arr[v.name][indexN]
                      downStringStrVal.push(`ac.arr.${v.name}[${indexN}]=${JSON.stringify(value)}    /*${indicesStr.join('、')}为字符数值*/`)
                    } else if (indicesStr.length !== 0) {
                      downStringArrayV.push(`ac.arr.${v.name}[${indicesStr[0]}]=${JSON.stringify('')}    /*${indicesStr.join('、')}为字符数值*/`)
                    }
                  }
                  v.arrayValues.forEach(v1 => {
                    const value = window._arr[v.name][v1.indexId - 1]
                    if (isValidJson(value)) {
                      if (downloadYcyGameCode) {
                        const generatedCode = generateCodeString(value, `ac.arr.${v.name}[${v1.indexId - 1}]`);
                        downStringArrayJV.push(`${generatedCode}\n`)
                      } else {
                        downStringArrayJV.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}\n`)
                      }
                    } else if (needDownAllS && needDownEveryA && typeof value === 'string' && value) {
                      downStringStrVal.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${JSON.stringify(value)}`)
                    }
                  })
                  const nonStringItems = v.arrayValues.filter(item => item.valueType !== 'string');
                  const indices = nonStringItems.map(item => item.indexId);
                  if (!needDownEveryA) {
                    downStringStrVal.push(`ac.arr.${v.name}[0]=0    /*${indices.join('、')}为普通数值*/`)
                  } else {
                    nonStringItems.forEach((v1, k) => {
                      const value = window._arr[v.name][v1.indexId - 1]
                      if (k === nonStringItems.length - 1) {
                        downStringStrVal.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${value}\n`)
                      } else {
                        downStringStrVal.push(`ac.arr.${v.name}[${v1.indexId - 1}]=${value}`)
                      }
                    })
                  }
                }
              }
            }
          })
        }
        if (downStringArrayJV.length === 1) {
          downStringArrayJV = []
        }
        let a = downStringArray.concat(downStringArrayV).concat(downStringStrVal).concat(downStringArrayJV)
        const blob = new Blob([a.join('\n')], { type: 'text/plain' });
        /*a标签模拟下载文件*/
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = window.gameName + '.txt';
        link.click();
        URL.revokeObjectURL(link.href);
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'ycyPlotJump' && window.typeGame) {
        const plotId = message.value;
        if (window.typeGame === '1') {
          SceneController.startRunScene(plotId, true, 'normal', undefined)
        } else if (window.typeGame === '2') {
          if (!window.isSaveLocal && typeof types.acA === 'object' && types.acP) {
            types.acP.jump({
              plotID: plotId,
              transition: types.acA.SCENE_TRANSITION_TYPES.pageForward,
              duration: 1e3
            });
          } else {
            let request = indexedDB.open('avgJsEngine');
            // 处理数据库打开成功的回调
            request.onsuccess = function (event) {
              var db = event.target.result;
              // 创建事务并指定对象存储空间，使用 'readwrite' 模式
              var transaction = db.transaction(['profiles'], 'readwrite');
              // 获取对象存储空间
              var objectStore = transaction.objectStore('profiles');
              // 通过键（key）获取数据
              const indexedDBKey = [window.gameId, window['Cookies']['get']('AVG_LOGIN_USER_ID')];
              var getRequest = objectStore.get(indexedDBKey);
              getRequest.onsuccess = function (event) {
                var data = event.target.result;
                if (data) {
                  let indx;
                  if (data.profiles.length === 1) {
                    indx = 0
                  } else if (data.profiles.length > 1) {
                    indx = (data.profiles.length - 1)
                  }
                  let a = JSON.parse(data.profiles[indx].progress);
                  const plotName = window.scenesSend.find(v => v.id === plotId);
                  a.scenes[0].config.id = plotId;
                  data.profiles[indx].profileName = `跳转剧情：${plotName.name}`;
                  data.profiles[indx].progress = JSON.stringify(a);
                  // 使用 put 方法将修改后的数据存回数据库
                  var updateRequest = objectStore.put(data);

                  updateRequest.onsuccess = function (event) {
                    //console.log('Data updated successfully');
                    alert(`覆盖成功，请前去本地读档，档位名为<跳转剧情：${plotName.name}>`)
                  };

                  updateRequest.onerror = function (event) {
                    console.error('Error updating data:', event.target.error.message);
                    alert("章节id修改失败，请重新选择跳转！")
                  };
                } else {
                  alert('本地还没存档哦！如若已经存档，请清除缓存！')
                }
              };

              getRequest.onerror = function (event) {
                console.error('Error reading data:', event.target.error);
                alert('获取存档内容失败，请清除缓存或者重新存本地档位！')
              };
            };

            // 处理数据库打开失败的回调
            request.onerror = function (event) {
              console.error('Error opening database:', event.target.error);
              alert('获取失败，请清除缓存或者重新存本地档位！')
            };
          }
        }
      } else if (message.type === 'ycyPlotDisplay' && window.typeGame) {
        const plotId = message.value;
        types.acP.display({
          plotID: plotId,
          transition: types.acA.SCENE_TRANSITION_TYPES.pageForward,
          duration: 1e3
        });
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'ycyClearValues' && window.typeGame) {
        const resetJson = message.value[0]
        const resetStr = message.value[1]
        if (window.typeGame === '1') {
          Object.values(window.ycyValues).forEach(v => {
            if (v.valueType === "number" && v.numberType === "fixed" && v.initValue !== undefined) {
              AVGCmdCalcUtils.calc(`@${v.name}=${v.initValue}`)
            } else if (v.valueType === 'string' && resetJson && v.initValue !== undefined) {
              AVGCmdCalcUtils.calc(`@${v.name}='${v.initValue}'`)
            } else if (v.valueType === "number" && v.numberType === "rand") {
              const initNum = Math.floor(Math.random() * (v.randMax - v.randMin + 1)) + v.randMin;
              AVGCmdCalcUtils.calc(`@${v.name}=${initNum}`)
            }
          })
          Object.values(window.ycyArrays).forEach(v => {
            v.arrayValues.forEach(v1 => {
              if (v1.valueType === 'string' && resetStr && v1.initValue !== undefined) {
                AVGCmdCalcUtils.calc(`@${v.name}[${v1.indexId}]='${v1.initValue}'`)
              } else if (v1.valueType === 'number' && v1.numberType === "fixed" && v1.initValue !== undefined) {
                AVGCmdCalcUtils.calc(`@${v.name}[${v1.indexId}]=${v1.initValue}`)
              } else if (v1.valueType === 'number' && v1.numberType === "rand") {
                const initNum = Math.floor(Math.random() * (v1.randMax - v1.randMin + 1)) + v1.randMin;
                AVGCmdCalcUtils.calc(`@${v.name}[${v1.indexId}]=${initNum}`)
              }
            })
          })
        } else if (window.typeGame === '2') {
          if (!window.isSaveLocal && typeof types.acA === 'object' && types.getA) {
            Object.values(window.ycyValues).forEach(v => {
              if (v.valueType === "number" && v.numberType === "fixed" && v.initValue !== undefined) {
                if (v.persisType === 'normal') {
                  types.acA.var[v.name] = v.initValue
                } else if (v.persisType === 'const') {
                  types.acA.cVar[v.name] = v.initValue
                }
              } else if (v.valueType === 'string' && v.initValue !== undefined) {
                if (v.persisType === 'normal') {
                  const value = types.acA.var[v.name]
                  if (isValidNonEmptyJson(value)) {
                    resetJson ? types.acA.var[v.name] = types.replaceNumbersWithZero(value) : ''
                  } else {
                    resetStr ? types.acA.var[v.name] = v.initValue : ''
                  }
                } else if (v.persisType === 'const') {
                  const value = types.acA.cVar[v.name]
                  if (isValidNonEmptyJson(value)) {
                    resetJson ? types.acA.cVar[v.name] = types.replaceNumbersWithZero(value) : ''
                  } else {
                    resetStr ? types.acA.cVar[v.name] = v.initValue : ''
                  }
                }
              } else if (v.valueType === "number" && v.numberType === "rand") {
                const initNum = Math.floor(Math.random() * (v.randMax - v.randMin + 1)) + v.randMin;
                if (v.persisType === 'normal') {
                  types.acA.var[v.name] = initNum
                } else if (v.persisType === 'const') {
                  types.acA.cVar[v.name] = initNum
                }
              }
            })
            Object.values(window.ycyArrays).forEach(v => {
              v.arrayValues.forEach((v1, k) => {
                if (v1.valueType === 'string' && v1.initValue !== undefined) {
                  if (v.persisType === 'normal') {
                    const value = types.acA.arr[v.name][k]
                    if (isValidNonEmptyJson(value)) {
                      resetJson ? types.acA.arr[v.name][k] = types.replaceNumbersWithZero(value) : ''
                    } else {
                      resetStr ? types.acA.arr[v.name][k] = v1.initValue : ''
                    }
                  } else if (v.persisType === 'const') {
                    const value = types.acA.cArr[v.name][k]
                    if (isValidNonEmptyJson(value)) {
                      resetJson ? types.acA.cArr[v.name][k] = types.replaceNumbersWithZero(value) : ''
                    } else {
                      resetStr ? types.acA.cArr[v.name][k] = v1.initValue : ''
                    }
                  }
                } else if (v1.valueType === 'number' && v1.numberType === "fixed" && v1.initValue !== undefined) {
                  if (v.persisType === 'normal') {
                    types.acA.arr[v.name][k] = v1.initValue
                  } else if (v.persisType === 'const') {
                    types.acA.cArr[v.name][k] = v1.initValue
                  }
                } else if (v1.valueType === 'number' && v1.numberType === "rand") {
                  const initNum = Math.floor(Math.random() * (v1.randMax - v1.randMin + 1)) + v1.randMin;
                  if (v.persisType === 'normal') {
                    types.acA.arr[v.name][k] = initNum
                  } else if (v.persisType === 'const') {
                    types.acA.cArr[v.name][k] = initNum
                  }
                }
              })
            })
          } else {
            const cVarList = { valueList: [] };
            const carrList = { arrayValues: [] };
            const vk = ["qetuo", "wryip", "adgjl", "sfhk;"];
            const csrf_token = window['Cookies']['get']('TOKEN')
            let request = indexedDB.open('avgJsEngine');
            // 处理数据库打开成功的回调
            request.onsuccess = function (event) {
              var db = event.target.result;
              // 创建事务并指定对象存储空间，使用 'readwrite' 模式
              var transaction = db.transaction(['profiles'], 'readwrite');
              // 获取对象存储空间
              var objectStore = transaction.objectStore('profiles');
              // 通过键（key）获取数据
              const indexedDBKey = [window.gameId, window['Cookies']['get']('AVG_LOGIN_USER_ID')];
              var getRequest = objectStore.get(indexedDBKey);
              getRequest.onsuccess = function (event) {
                var data = event.target.result;
                if (data) {
                  // 修改数据
                  let indx;
                  if (data.profiles.length === 1) {
                    indx = 0
                  } else if (data.profiles.length > 1) {
                    indx = (data.profiles.length - 1)
                  }
                  const a = JSON.parse(data.profiles[indx].progress);
                  const endNormalValue = a.scenes[0].endNormalValue
                  const normalValue = a.scenes[0].startNormalValue;
                  const constValue = a.scenes[0].startConstValue;
                  Object.values(window.ycyValues).forEach(v => {
                    if (v.valueType === "number" && v.numberType === "fixed" && v.initValue !== undefined) {
                      if (v.persisType === 'normal') {
                        typeof normalValue['vars'][v.id] !== 'undefined' ? normalValue['vars'][v.id] = v.initValue : '';
                        typeof endNormalValue['vars'][v.id] !== 'undefined' ? endNormalValue['vars'][v.id] = v.initValue : '';
                      } else if (v.persisType === 'const') {
                        typeof constValue['cVars'][v.id] !== 'undefined' ?
                          (() => {
                            constValue['cVars'][v.id] = v.initValue;
                            cVarList.valueList.push({
                              valueId: v.id,
                              numValue: v.initValue
                            });
                          })() : '';
                      }
                    } else if (v.valueType === 'string' && v.initValue !== undefined) {
                      if (v.persisType === 'normal') {
                        typeof normalValue['vars'][v.id] !== 'undefined' ? isValidNonEmptyJson(normalValue['vars'][v.id]) ?
                          resetJson ? normalValue['vars'][v.id] = v.initValue : '' : normalValue['vars'][v.id] = v.initValue : '';
                        typeof endNormalValue['vars'][v.id] !== 'undefined' ? isValidNonEmptyJson(endNormalValue['vars'][v.id]) ?
                          resetJson ? endNormalValue['vars'][v.id] = v.initValue : '' : endNormalValue['vars'][v.id] = v.initValue : '';
                      } else if (v.persisType === 'const') {
                        typeof constValue['cVars'][v.id] !== 'undefined' ? isValidNonEmptyJson(constValue['vars'][v.id]) ? resetJson ?
                          (() => {
                            constValue['cVars'][v.id] = v.initValue;
                            cVarList.valueList.push({
                              valueId: v.id,
                              numValue: v.initValue
                            });
                          })() : '' : (() => {
                            constValue['cVars'][v.id] = v.initValue;
                            cVarList.valueList.push({
                              valueId: v.id,
                              numValue: v.initValue
                            });
                          })() : '';
                      }
                    } else if (v.valueType === "number" && v.numberType === "rand") {
                      const initNum = Math.floor(Math.random() * (v.randMax - v.randMin + 1)) + v.randMin;
                      if (v.persisType === 'normal') {
                        typeof normalValue['vars'][v.id] !== 'undefined' ? normalValue['vars'][v.id] = initNum : '';
                        typeof endNormalValue['vars'][v.id] !== 'undefined' ? endNormalValue['vars'][v.id] = initNum : '';
                      } else if (v.persisType === 'const') {
                        typeof constValue['cVars'][v.id] !== 'undefined' ?
                          (() => {
                            constValue['cVars'][v.id] = initNum;
                            cVarList.valueList.push({
                              valueId: v.id,
                              numValue: initNum
                            });
                          })() : '';
                      }
                    }
                  })
                  Object.values(window.ycyArrays).forEach(v => {
                    v.arrayValues.forEach((v1, k) => {
                      if (v1.valueType === 'string' && v1.initValue !== undefined) {
                        if (v.persisType === 'normal') {
                          normalValue['arr'][v.name] && typeof normalValue['arr'][v.name][k] !== 'undefined' ? isValidNonEmptyJson(normalValue['arr'][v.name][k]) ? resetJson ?
                            normalValue['arr'][v.name][k] = v1.initValue : '' : normalValue['arr'][v.name][k] = v1.initValue : '';
                          endNormalValue['arr'][v.name] && typeof endNormalValue['arr'][v.name][k] !== 'undefined' ? isValidNonEmptyJson(endNormalValue['arr'][v.name][k]) ? resetJson ?
                            endNormalValue['arr'][v.name][k] = v1.initValue : '' : endNormalValue['arr'][v.name][k] = v1.initValue : '';
                        } else if (v.persisType === 'const') {
                          constValue['cArr'][v.name] ? isValidNonEmptyJson(constValue['cArr'][v.name][k]) ? resetJson ?
                            (() => {
                              constValue['cArr'][v.name][k] = v1.initValue;
                              carrList.arrayValues.push({
                                valueId: v1.id,
                                numValue: v1.initValue
                              });
                            })() : '' : (() => {
                              constValue['cArr'][v.name][k] = v1.initValue;
                              carrList.arrayValues.push({
                                valueId: v1.id,
                                numValue: v1.initValue
                              });
                            })() : '';
                        }
                      } else if (v1.valueType === 'number' && v1.numberType === "fixed" && v1.initValue !== undefined) {
                        if (v.persisType === 'normal') {
                          normalValue['arr'][v.name] && typeof normalValue['arr'][v.name][k] !== 'undefined' ?
                            normalValue['arr'][v.name][k] = v1.initValue : '';
                          endNormalValue['arr'][v.name] && typeof endNormalValue['arr'][v.name][k] !== 'undefined' ?
                            endNormalValue['arr'][v.name][k] = v1.initValue : '';
                        } else if (v.persisType === 'const') {
                          constValue['cArr'][v.name] ?
                            (() => {
                              constValue['cArr'][v.name][k] = v1.initValue;
                              carrList.arrayValues.push({
                                valueId: v1.id,
                                numValue: v1.initValue
                              });
                            })() : '';
                        }
                      } else if (v1.valueType === 'number' && v1.numberType === "rand") {
                        const initNum = Math.floor(Math.random() * (v1.randMax - v1.randMin + 1)) + v1.randMin;
                        if (v.persisType === 'normal') {
                          normalValue['arr'][v.name] && typeof normalValue['arr'][v.name][k] !== 'undefined' ?
                            normalValue['arr'][v.name][k] = initNum : '';
                          endNormalValue['arr'][v.name] && typeof endNormalValue['arr'][v.name][k] !== 'undefined' ?
                            endNormalValue['arr'][v.name][k] = initNum : '';
                        } else if (v.persisType === 'const') {
                          constValue['cArr'][v.name] ?
                            (() => {
                              constValue['cArr'][v.name][k] = initNum;
                              carrList.arrayValues.push({
                                valueId: v1.id,
                                numValue: initNum
                              });
                            })() : '';
                        }
                      }
                    })
                  })
                  a.scenes[0].startNormalValue = normalValue;
                  a.scenes[0].startConstValue = constValue;
                  a.scenes[0].endNormalValue = endNormalValue;
                  data.profiles[indx].profileName = data.profiles[indx].profileName.replaceAll('修改数值：', '').replaceAll('跳转剧情：', '').replaceAll('初始化数值：', '')
                  data.profiles[indx].profileName = `初始化数值：${data.profiles[indx].profileName}`;
                  const vv = isNaN(a.v) ? vk[a.v] : vk[vk.length - 1];
                  const vnv = a.v !== void 0 && a.v < 3 ? String(newId) : ''
                  a.s = CryptoJS['MD5'](vnv + getSortedObjString(a.scenes[0].startNormalValue) + getSortedObjString(a.scenes[0].endNormalValue) + getSortedObjString(a.scenes[0].startSysValue) + getSortedObjString(a.scenes[0].endSysValue) + vv).toString()
                  data.profiles[indx].progress = JSON.stringify(a)
                  // 使用 put 方法将修改后的数据存回数据库
                  var updateRequest = objectStore.put(data);

                  updateRequest.onsuccess = function (event) {
                    console.log('Data updated successfully');
                  };

                  updateRequest.onerror = function (event) {
                    console.error('Error updating data:', event.target.error.message);
                    alert("初始化失败，请重新点击按钮！")
                  };
                  if (cVarList.valueList.length !== 0) {
                    var xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
                    // 设置请求的URL和方法
                    xhr.open("PUT", `https://avg.163.com/avg-portal-api/game/${window.gameId}/user/value/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
                    // 设置请求头，指明发送的数据类型为JSON
                    xhr.setRequestHeader("Content-Type", "application/json");
                    // 设置CSRF token，如果API需要的话。这个取决于API的安全要求
                    // 在这个例子中，CSRF token已经作为URL参数提供，但也可能需要在请求头中设置
                    // xhr.setRequestHeader("X-CSRF-Token", "你的CSRF token");
                    xhr.onreadystatechange = function () { // 设置回调函数
                      if (xhr.readyState === 4) { // 请求完成
                        if (xhr.status === 200) {
                          alert("全档数值初始成功，刷新重新获取吧！"); // 请求成功时处理返回的数据
                        } else {
                          alert("全档数值初始失败，请检查网络、清除缓存或者告知小宝解决！"); // 请求失败时处理错误
                        }
                      }
                    };
                    const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
                    let dataSend = JSON.stringify(cVarList);
                    let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
                    // 准备发送的数据
                    var data = JSON.stringify({
                      "v": 1,
                      "s": encryptData,
                      "data": dataSend
                    });
                    xhr.send(data); // 发送请求，带上数据
                  } else if (carrList.arrayValues.length !== 0) {
                    var xhr = new XMLHttpRequest(); // 创建 XMLHttpRequest 对象
                    // 设置请求的URL和方法
                    xhr.open("PUT", `https://avg.163.com/avg-portal-api/game/${window.gameId}/user/array/v1?csrf_token=${csrf_token}&em=${window.typeGame}`, true);
                    // 设置请求头，指明发送的数据类型为JSON
                    xhr.setRequestHeader("Content-Type", "application/json");
                    // 设置CSRF token，如果API需要的话。这个取决于API的安全要求
                    // 在这个例子中，CSRF token已经作为URL参数提供，但也可能需要在请求头中设置
                    // xhr.setRequestHeader("X-CSRF-Token", "你的CSRF token");
                    xhr.onreadystatechange = function () { // 设置回调函数
                      if (xhr.readyState === 4) { // 请求完成
                        if (xhr.status === 200) {
                          alert("全档数组数值初始化成功，刷新重新获取吧！"); // 请求成功时处理返回的数据
                        } else {
                          alert("全档数组数值初始化失败，请检查网络、清除缓存或者告知小宝解决！"); // 请求失败时处理错误
                        }
                      }
                    };
                    const mckopdkso = ["d7b3a8f103c14c0aa8657654963d099a", "6d311821efac4260a0f305cfc8b56db1"];
                    let dataSend = JSON.stringify(carrList);
                    let encryptData = window.CryptoJS['MD5'](dataSend + mckopdkso[1]).toString()
                    // 准备发送的数据
                    var data = JSON.stringify({
                      "v": 1,
                      "s": encryptData,
                      "data": dataSend
                    });
                    xhr.send(data); // 发送请求，带上数据
                  }
                } else {
                  alert("本地还没存档哦！如若已经存档，请清除缓存！")
                }
              };

              getRequest.onerror = function (event) {
                console.error('Error reading data:', event.target.error);
                alert('获取失败，请清除缓存或者重新存本地档位！')
              };
            };

            // 处理数据库打开失败的回调
            request.onerror = function (event) {
              console.error('Error opening database:', event.target.error);
              alert('获取失败，请清除缓存或者重新存本地档位！')
            };
          }
          window.typeGame ? alert('当前档位的数值（含有初始化的数值）已全部初始化，随机数值同时初始化到范围之内，某些没有初始化的值（json类型字符串）需要大家自己去清除！') : ''
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'ycyModifyValueWay' && window.typeGame) {
        if (window.typeGame === '2') {
          window.isSaveLocal = message.value
        }
      } else if (message.type === 'replaceYcyJg' && window.typeGame) {
        localStorage.setItem('isYcyChange', message.value)
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'ycyPlotV' && window.typeGame) {
        types.isLOgic = message.value
        types.isSelfT = false
        types.isGetUIV = false
        types.incVal = new Set()
        types.incValST = new Set()
        types.incStr = new Set()
        types.uiv = new Set()
        types.assignment = new Set()
        if (window.typeGame === '2') {
          window.conditions = new Set();
          window.ifConditions = new Set();
          if (message.value) {
            regeneratorRuntime.wrap = window.orWrapN
          } else {
            regeneratorRuntime.wrap = window.orWrap
          }
        }
        if (window.typeGame === '1') {
          window.conditions = [];
          window.eventName = ''
          window.isEndIF = false
          if (message.value) {
            AVGCmdParserUtils.getValueByStr = window.originAVGCN
            AVGCmdCalcUtils.calc = window.originAVGCmdN
          } else {
            AVGCmdParserUtils.getValueByStr = window.originAVGC
            AVGCmdCalcUtils.calc = window.originAVGCmd
          }
        }
      } else if (message.type === 'ycySelfT' && window.typeGame) {
        types.isLOgic = false
        types.isSelfT = message.value
        types.isGetUIV = false
        types.incVal = new Set()
        types.incValST = new Set()
        types.incStr = new Set()
        types.uiv = new Set()
        types.assignment = new Set()
        if (window.typeGame === '2') {
          window.conditions = new Set();
          window.ifConditions = new Set();
          if (message.value) {
            regeneratorRuntime.wrap = window.orWrapN
          } else {
            regeneratorRuntime.wrap = window.orWrap
          }
        } else if (window.typeGame === '1') {
          window.conditions = [];
          window.eventName = ''
          window.isEndIF = false
          if (message.value) {
            AVGCmdParserUtils.getValueByStr = window.originAVGCN
            AVGCmdCalcUtils.calc = window.originAVGCmdN
          } else {
            AVGCmdParserUtils.getValueByStr = window.originAVGC
            AVGCmdCalcUtils.calc = window.originAVGCmd
          }
        }
      } else if (message.type === 'ycyUIV' && window.typeGame) {
        types.isLOgic = false
        types.isSelfT = false
        types.isGetUIV = true
        types.incVal = new Set()
        types.incValST = new Set()
        //types.uiv = new Set()
        types.incStr = new Set()
        if (window.typeGame === '1') {
          window.isEndIF = false
          let isUIG = message.value[1] && cc.director._runningScene.uiLayerStack.length > 0
          let uiCahe = []
          SceneController.currentLayer.config.commands.forEach(v => {
            if (isUIG) {
              let ct = AVGCmdConverter['convertCmdStrToJSON'](v)
              if (ct.type === 'callUI' || ct.type === 'replaceUI') {
                if (window.ycyUIS[ct.config.id]) {
                  uiCahe.push(window.ycyUIS[ct.config.id])
                } else if (SceneController.currentScene.config.uis && SceneController.currentScene.config.uis[ct.config.id]) {
                  uiCahe.push(SceneController.currentScene.config.uis[ct.config.id])
                }
              }
            }
            if (v.includes("varGroupDisplay")) {
              let ct = AVGCmdConverter['convertCmdStrToJSON'](v)
              if (ct.config && ct.config.varGroup) {
                ct.config.varGroup.forEach(vv => {
                  types.uiv.add(`@${vv}`)
                })
              }
            }
            const matStr = v.match(/@[\w\u4e00-\u9fff]+(?:\[(?:\d+|@[\w\u4e00-\u9fff]+)\])?/g);
            if (matStr) {
              matStr.forEach(v1 => {
                if (/\[@[\w\u4e00-\u9fff]+\]/.test(v1)) {
                  const newV = window.originAVGC(v1)
                  if (newV) {
                    types.uiv.add(`@${newV.arrayName}[${newV.indexId}]`)
                    let arrayV = AVGCmdParserUtils['parseArrayValue'](v1)
                    types.uiv.add(`@${arrayV.indexId.valueName}`)
                  }
                } else {
                  types.uiv.add(v1)
                }
              })
            } else if (v.includes('varDisplay')) {
              let ct = AVGCmdConverter['convertCmdStrToJSON'](v)
              if (ct.config && ct.config.bindVar) {
                types.uiv.add(`@${ct.config.bindVar}`)
              }
            }
            if (!window.isEndIF && (v.includes('[if') || v.includes('[while'))) {
              window.isEndIF = true
            }
            if (window.isEndIF && (v.includes('[endif]') || v.includes('[endwhile]'))) {
              window.conditions.push(v)
              window.isEndIF = false
            }
            if (window.isEndIF && !(v.includes('picDisplay') || v.includes('image'))) {
              window.conditions.push(v)
            }
          });
          if (SceneController.currentLayer.config.macros && Object.values(SceneController.currentLayer.config.macros).length !== 0) {
            Object.values(SceneController.currentLayer.config.macros).forEach(v2 => {
              v2.cmdLines.forEach(v => {
                if (v.includes("varGroupDisplay")) {
                  let ct = AVGCmdConverter['convertCmdStrToJSON'](v)
                  if (ct.config && ct.config.varGroup) {
                    ct.config.varGroup.forEach(vv => {
                      types.uiv.add(`@${vv}`)
                    })
                  }
                }
                const matStr = v.match(/@[\w\u4e00-\u9fff]+(?:\[(?:\d+|@[\w\u4e00-\u9fff]+)\])?/g);
                if (matStr) {
                  matStr.forEach(v1 => {
                    if (/\[@[\w\u4e00-\u9fff]+\]/.test(v1)) {
                      const newV = window.originAVGC(v1)
                      if (newV) {
                        types.uiv.add(`@${newV.arrayName}[${newV.indexId}]`)
                        let arrayV = AVGCmdParserUtils['parseArrayValue'](v1)
                        types.uiv.add(`@${arrayV.indexId.valueName}`)
                      }
                    } else {
                      types.uiv.add(v1)
                    }
                  })
                } else if (v.includes('varDisplay')) {
                  let ct = AVGCmdConverter['convertCmdStrToJSON'](v)
                  if (ct.config && ct.config.bindVar) {
                    types.uiv.add(`@${ct.config.bindVar}`)
                  }
                }
                if (!window.isEndIF && (v.includes('[if') || v.includes('[while'))) {
                  window.isEndIF = true
                }
                if (window.isEndIF && (v.includes('[endif]') || v.includes('[endwhile]'))) {
                  window.conditions.push(v)
                  window.isEndIF = false
                }
                if (window.isEndIF && !(v.includes('picDisplay') || v.includes('image'))) {
                  window.conditions.push(v)
                }
              });
            })
          }
          if (SceneController.currentLayer.config.uis && Object.values(SceneController.currentLayer.config.uis).length !== 0) {
            Object.values(SceneController.currentLayer.config.uis).forEach(v2 => {
              v2.commands.forEach(v => {
                if (v.includes("varGroupDisplay")) {
                  let ct = AVGCmdConverter['convertCmdStrToJSON'](v)
                  if (ct.config && ct.config.varGroup) {
                    ct.config.varGroup.forEach(vv => {
                      types.uiv.add(`@${vv}`)
                    })
                  }
                }
                const matStr = v.match(/@[\w\u4e00-\u9fff]+(?:\[(?:\d+|@[\w\u4e00-\u9fff]+)\])?/g);
                if (matStr) {
                  matStr.forEach(v1 => {
                    if (/\[@[\w\u4e00-\u9fff]+\]/.test(v1)) {
                      const newV = window.originAVGC(v1)
                      if (newV) {
                        types.uiv.add(`@${newV.arrayName}[${newV.indexId}]`)
                        let arrayV = AVGCmdParserUtils['parseArrayValue'](v1)
                        types.uiv.add(`@${arrayV.indexId.valueName}`)
                      }
                    } else {
                      types.uiv.add(v1)
                    }
                  })
                } else if (v.includes('varDisplay')) {
                  let ct = AVGCmdConverter['convertCmdStrToJSON'](v)
                  if (ct.config && ct.config.bindVar) {
                    types.uiv.add(`@${ct.config.bindVar}`)
                  }
                }
              });
            })
          }
          Object.values(SceneController.currentLayer.controls).forEach(v => {
            if (v.config && v.config.config && v.config.config.bindVar) {
              types.uiv.add(`@${v.config.config.bindVar}`)
            }
          })
          if (isUIG) {
            uiCahe.forEach(v => {
              v.commands.forEach(com => {
                const matStr = com.match(/@[\w\u4e00-\u9fff]+(?:\[(?:\d+|@[\w\u4e00-\u9fff]+)\])?/g);
                if (com.includes("varGroupDisplay")) {
                  let ct = AVGCmdConverter['convertCmdStrToJSON'](com)
                  if (ct.config && ct.config.varGroup) {
                    ct.config.varGroup.forEach(vv => {
                      types.uiv.add(`@${vv}`)
                    })
                  }
                }
                if (matStr) {
                  matStr.forEach(v1 => {
                    if (/\[@[\w\u4e00-\u9fff]+\]/.test(v1)) {
                      const newV = window.originAVGC(v1)
                      if (newV) {
                        types.uiv.add(`@${newV.arrayName}[${newV.indexId}]`)
                        let arrayV = AVGCmdParserUtils['parseArrayValue'](v1)
                        types.uiv.add(`@${arrayV.indexId.valueName}`)
                      }
                    } else {
                      types.uiv.add(v1)
                    }
                  })
                } else if (com.includes('varDisplay')) {
                  let ct = AVGCmdConverter['convertCmdStrToJSON'](com)
                  if (ct.config && ct.config.bindVar) {
                    types.uiv.add(`@${ct.config.bindVar}`)
                  }
                }
              })
            })
          }
          alert('获取界面数值成功，点击获取数值按钮')
        } else if (window.typeGame === '2') {
          types.uiv = new Set()
          window.conditions = new Set();
          window.ifConditions = new Set();
          regeneratorRuntime.wrap = window.orWrapN
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'ycyGetPlSTV' && window.typeGame) {
        if (Array.isArray(message.value)) {
          if (message.value[2] === 0) {
            const customEvent1 = new CustomEvent("ycyPlSTV", {
              detail: { value: [[], [], [], [], 'command', window.ycyMacros1[message.value[1]].cmdLines] }
            });
            window.dispatchEvent(customEvent1);
          } else {
            const customEvent1 = new CustomEvent("ycyPlSTV", {
              detail: { value: [[], [], [], [], 'command', window.ycyUIS[message.value[1]].commands] }
            });
            window.dispatchEvent(customEvent1);
          }
        } else {
          if (message.value === 1) {
            types.isGetUIV = false
            let pv = [], sv = [], strV = [], consA = [], ifConsA = [], uv = [];
            if (types.incVal.size !== 0) {
              let plv = [...types.incVal]
              plv.forEach(v => {
                let value, vType, vString;
                if (typeGame === '2') {
                  const matA = v.match(/\[(\d+)\]/)
                  if (matA) {
                    const arrName = v.replace(matA[0], '')
                    if (!ycyArrays[arrName]) {
                      return
                    }
                    if (ycyArrays[arrName].persisType === 'normal') {
                      value = types.acA.arr[arrName][matA[1]];
                      vType = 'normal';
                      vString = `ac.arr.${v}=${value}`
                    } else {
                      value = types.acA.cArr[arrName][matA[1]];
                      vType = 'const';
                      vString = `ac.cArr.${v}=${value}`
                    }
                  } else {
                    if (!window.ycyValues[v]) {
                      return
                    }
                    if (window.ycyValues[v].persisType === 'const') {
                      value = types.acA.cVar[v];
                      vType = 'const';
                      vString = `ac.cVar.${v}=${value}`
                    } else {
                      value = types.acA.var[v];
                      vType = 'normal';
                      vString = `ac.var.${v}=${value}`
                    }
                  }
                } else {
                  const valueN = window.originAVGC(v);
                  if (valueN) {
                    value = valueN.value
                    vType = '';
                    vString = ''
                  } else {
                    return
                  }
                }
                pv.push({ content: v.replace(/^@/, ''), value: value, vType: vType, vString: vString });
              })
            }
            if (types.incValST.size !== 0) {
              let stv = [...types.incValST]
              stv.forEach(v => {
                let value, vType, vString;
                if (typeGame === '2') {
                  const matA = v.match(/\[(\d+)\]/)
                  if (matA) {
                    const arrName = v.replace(matA[0], '')
                    if (!ycyArrays[arrName]) {
                      return
                    }
                    if (ycyArrays[arrName].persisType === 'normal') {
                      value = types.acA.arr[arrName][matA[1]];
                      vType = 'normal';
                      vString = `ac.arr.${v}=${value}`
                    } else {
                      value = types.acA.cArr[arrName][matA[1]];
                      vType = 'const';
                      vString = `ac.cArr.${v}=${value}`
                    }
                  } else {
                    if (!window.ycyValues[v]) {
                      return
                    }
                    if (window.ycyValues[v].persisType === 'const') {
                      value = types.acA.cVar[v];
                      vType = 'const';
                      vString = `ac.cVar.${v}=${value}`
                    } else {
                      value = types.acA.var[v];
                      vType = 'normal';
                      vString = `ac.var.${v}=${value}`
                    }
                  }
                } else {
                  const valueN = window.originAVGC(v);
                  if (valueN) {
                    value = valueN.value
                    vType = '';
                    vString = ''
                  } else {
                    return
                  }
                }
                sv.push({ content: v.replace(/^@/, ''), value: value, vType: vType, vString: vString });
              })
            }
            if (types.uiv.size !== 0) {
              let uiv = [...types.uiv]
              uiv.forEach(v => {
                let value, vType, vString;
                if (typeGame === '2') {
                  const matA = v.match(/\[(\d+)\]/)
                  if (matA) {
                    const arrName = v.replace(matA[0], '')
                    if (!ycyArrays[arrName]) {
                      return
                    }
                    if (ycyArrays[arrName].persisType === 'normal') {
                      value = types.acA.arr[arrName][matA[1]];
                      vType = 'normal';
                      vString = `ac.arr.${v}=${value}`
                    } else {
                      value = types.acA.cArr[arrName][matA[1]];
                      vType = 'const';
                      vString = `ac.cArr.${v}=${value}`
                    }
                  } else {
                    if (!window.ycyValues[v]) {
                      return
                    }
                    if (window.ycyValues[v].persisType === 'const') {
                      value = types.acA.cVar[v];
                      vType = 'const';
                      vString = `ac.cVar.${v}=${value}`
                    } else {
                      value = types.acA.var[v];
                      vType = 'normal';
                      vString = `ac.var.${v}=${value}`
                    }
                  }
                } else {
                  const valueN = window.originAVGC(v);
                  if (valueN) {
                    value = valueN.value
                    vType = '';
                    vString = ''
                  } else {
                    return
                  }
                }
                uv.push({ content: v.replace(/^@/, ''), value: value, vType: vType, vString: vString });
              })
            }
            if (types.incStr.size !== 0) {
              let stV = [...types.incStr]
              stV.forEach(v => {
                const matA = v.match(/\[(\d+)\]/)
                if (matA) {
                  const arrName = v.replace(matA[0], '')
                  if (!ycyArrays[arrName]) {
                    return
                  }
                  if (ycyArrays[arrName].persisType === 'normal') {
                    const value = types.acA.arr[arrName][matA[1]]
                    strV.push({ valueName: `ac.arr.${v}`, value: value, valueString: v })
                  } else {
                    const value = types.acA.cArr[arrName][matA[1]]
                    strV.push({ valueName: `ac.cArr.${v}`, value: value, valueString: v })
                  }
                } else {
                  if (!window.ycyValues[v]) {
                    return
                  }
                  if (window.ycyValues[v].persisType === 'const') {
                    const value = types.acA.cVar[v]
                    strV.push({ valueName: `ac.cVar.${v}`, value: value, valueString: v })
                  } else {
                    const value = types.acA.var[v]
                    strV.push({ valueName: `ac.var.${v}`, value: value, valueString: v })
                  }
                }
              })
            }
            if (types.assignment.size !== 0) {
              const customEvent1 = new CustomEvent("ycyAssignment", {
                detail: { value: [...types.assignment] }
              });
              window.dispatchEvent(customEvent1);
              types.assignment = new Set()
            }
            if (window.typeGame === '1') {
              const customEvent1 = new CustomEvent("ycyCondition", {
                detail: { value: window.conditions }
              });
              window.dispatchEvent(customEvent1);
            } else if (window.typeGame === '2') {
              if (window.conditions.size !== 0) {
                consA = ['****单判断，有的可能跟if重合****'].concat([...window.conditions])
              }
              if (window.ifConditions.size !== 0) {
                ifConsA = window.conditions.size === 0 ? [...window.ifConditions] :
                  ['****if完整的判断内容****'].concat([...window.ifConditions])
              }
              const customEvent1 = new CustomEvent("ycyCondition", {
                detail: { value: ifConsA.concat(consA) }
              });
              window.dispatchEvent(customEvent1);
            }
            const customEvent1 = new CustomEvent("ycyPlSTV", {
              detail: { value: [pv, sv, strV, uv] }
            });
            window.dispatchEvent(customEvent1);
            if (window.typeGame === '2') {
              window.conditions = new Set();
              window.ifConditions = new Set();
              regeneratorRuntime.wrap = window.orWrap
            } else if (window.typeGame === '1') {
              types.uiv = new Set()
              window.conditions = [];
            }
          } else if (message.value === 2) {
            window.conditions = new Set();
            window.ifConditions = new Set();
            let a
            if (cc.director._runningScene.uiLayerStack.length === 0) {
              a = cc.director._runningScene.gameLayer
            } else {
              a = cc.director._runningScene.uiLayerStack[cc.director._runningScene.uiLayerStack.length - 1]
            }
            let extractConditions = function (node) {
              if (node.type === 'IfStatement' || node.type === 'ConditionalExpression') {
                conditions.push(node.test);
                return
              } else if ((node.type === 'BinaryExpression' && comparisonOperators.has(node.operator)) ||
                (node.type === 'LogicalExpression' && (node.operator === '&&' || node.operator === '||')) ||
                (node.type === 'UnaryExpression' && !node.argument.type === 'Literal' && (node.operator === '!' || node.operator === '-'))
              ) {
                conditions.push(node);
                return
              }

              for (const key in node) {
                if (node[key] && typeof node[key] === 'object') {
                  extractConditions(node[key]);
                }
              }
            };
            let expressionToString = function (node) {
              switch (node.type) {
                case 'BinaryExpression':
                  return `${expressionToString(node.left)} ${node.operator} ${expressionToString(node.right)}`;
                case 'LogicalExpression':
                  return `${expressionToString(node.left)} ${node.operator} ${expressionToString(node.right)}`;
                case 'UnaryExpression':
                  return `${node.operator} (${expressionToString(node.argument)})`;
                case 'Identifier':
                  return node.name;
                case 'Literal':
                  return node.value;
                case 'MemberExpression':
                  const property = node.computed ?
                    `[${expressionToString(node.property)}]` :
                    `.${node.property.name}`;
                  return `${expressionToString(node.object)}${property}`;
                case 'CallExpression':
                  return `${expressionToString(node.callee)}(${node.arguments.map(expressionToString).join(', ')})`;
                case 'ArrayExpression':
                  return `[${node.elements.map(expressionToString).join(', ')}]`;
                case 'ObjectExpression':
                  return `{ ${node.properties.map(prop => `${expressionToString(prop.key)}: ${expressionToString(prop.value)}`).join(', ')} }`;
                case 'ConditionalExpression':
                  return `${expressionToString(node.test)} ? ${expressionToString(node.consequent)} : ${expressionToString(node.alternate)}`;
                case 'SequenceExpression':
                  const validExpressions = node.expressions.filter(expr => {
                    return (
                      expr.type === 'BinaryExpression' ||
                      expr.type === 'LogicalExpression' ||
                      (expr.type === 'UnaryExpression' && !(expr.argument.type === 'Literal' /*&& (expr.argument.value === 0 || expr.argument.value === 1)*/))
                    );
                  });
                  return validExpressions.length > 0 ? validExpressions.map(expressionToString).join(', ') : '';
                default:
                  return '';
              }
            }
            const ast = acorn.parse(a.config.commands, { ecmaVersion: 2020 });
            let conditions = [], conditions1 = [], inV = new Set();
            const comparisonOperators = new Set(['===', '!==', '==', '!=', '>', '<', '>=', '<=', '&&', '||']);
            extractConditions(ast);
            conditions.map(expressionToString).filter(condition => condition.trim() !== '').forEach(condition => {
              window.ifConditions.add(condition);
            });
            conditions1 = a.config.commands.match(/ac\.(arr|cArr)\.([\w\u4e00-\u9fa5]+)\[(\d+)\]|ac\.(var|cVar)\.([\w\u4e00-\u9fa5]+)/g)
            conditions1.forEach(condition => {
              inV.add(condition.replace(/ac(\.var|\.cVar|\.arr|\.cArr)\./g, ''))
            })
            let uv = [], strV = [], uiv = [...inV]
            uiv.forEach(v => {
              let value, vType, vString;
              const matA = v.match(/\[(\d+)\]/)
              if (matA) {
                const arrName = v.replace(matA[0], '')
                if (!ycyArrays[arrName]) {
                  return
                }
                if (ycyArrays[arrName].persisType === 'normal') {
                  value = types.acA.arr[arrName][matA[1]];
                  if (typeof value === 'string') {
                    strV.push({ valueName: `ac.arr.${v}`, value: value, valueString: v })
                    return
                  }
                  vType = 'normal';
                  vString = `ac.arr.${v}=${value}`
                } else {
                  value = types.acA.cArr[arrName][matA[1]];
                  if (typeof value === 'string') {
                    strV.push({ valueName: `ac.cArr.${v}`, value: value, valueString: v })
                    return
                  }
                  vType = 'const';
                  vString = `ac.cArr.${v}=${value}`
                }
              } else {
                if (!window.ycyValues[v]) {
                  return
                }
                if (window.ycyValues[v].persisType === 'const') {
                  value = types.acA.cVar[v];
                  if (typeof value === 'string') {
                    strV.push({ valueName: `ac.cVar.${v}`, value: value, valueString: v })
                    return
                  }
                  vType = 'const';
                  vString = `ac.cVar.${v}=${value}`
                } else {
                  value = types.acA.var[v];
                  if (typeof value === 'string') {
                    strV.push({ valueName: `ac.var.${v}`, value: value, valueString: v })
                    return
                  }
                  vType = 'normal';
                  vString = `ac.var.${v}=${value}`
                }
              }
              uv.push({ content: v, value: value, vType: vType, vString: vString });
            })
            const customEvent2 = new CustomEvent("ycyCondition", {
              detail: { value: [...window.ifConditions] }
            });
            window.dispatchEvent(customEvent2);
            const customEvent1 = new CustomEvent("ycyPlSTV", {
              detail: { value: [[], [], strV, uv] }
            });
            window.dispatchEvent(customEvent1);
          } else {
            let a
            if (window.typeGame === '2') {
              if (cc.director._runningScene.uiLayerStack.length === 0) {
                a = cc.director._runningScene.gameLayer
              } else {
                a = cc.director._runningScene.uiLayerStack[cc.director._runningScene.uiLayerStack.length - 1]
              }
            } else {
              if (cc.director._runningScene.uiLayerStack.length === 0) {
                a = cc.director._runningScene.mainLayer
              } else {
                a = cc.director._runningScene.uiLayerStack[cc.director._runningScene.uiLayerStack.length - 1]
              }
            }
            if (a.config.uis) {
              window.ycyUIS = { ...window.ycyUIS, ...a.config.uis }
            }
            if (a.config.macros) {
              if (window.typeGame === '2') {
                Object.values(a.config.macros).forEach(macro => {
                  let v = macro.cmdLines.match(/var ([\w\u4e00-\u9fa5]+)=/)
                  if (v) {
                    ycyMacros1[v[1]] = macro
                  } else {
                    ycyMacros1[macro.name] = macro
                  }
                })
              } else {
                window.ycyMacros1 = { ...window.ycyMacros1, ...a.config.macros }
              }
            }
            const customEvent1 = new CustomEvent("ycyPlSTV", {
              detail: {
                value: [[], [], [], [], 'commandAll', a.config.commands, [Object.keys(window.ycyMacros1),
                Object.keys(window.ycyUIS)]]
              }
            });
            window.dispatchEvent(customEvent1);
          }
        }
      } else if (message.type === 'ycyNotRestart' && window.typeGame) {
        types.isNotRes = !message.value
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'getYcyBgPi' && window.typeGame) {
        window.bgpic = { pi: new Set(), bg: new Set(), pix: new Set() }
        window.bgpicS = { pi: [], bg: [] }
        let bb = {}, ff = {}, dd = []
        const getAAA = function (data) {
          data.resource.image && Object.values(data.resource.image).forEach(img => {
            if (!bgpic.pi.has(img.id)) {
              bgpic.pi.add(img.id)
              let a = { fileType: img.fileType, url: img.url, name: img.name, id: img.id }
              a.newName = img.name.includes('_') ? img.name.slice(0, img.name.lastIndexOf('_')) : img.name
              bgpicS.pi.push(a)
              bb[`$${img.id}`] = a
            }
          })
          data.resource.audio && Object.values(data.resource.audio).forEach(audio => {
            if (!bgpic.bg.has(audio.id) || !bgpicSA.bg[`${audio.id}`]) {
              bgpic.bg.add(audio.id)
              let a = { fileType: audio.fileType || 'mp3', name: audio.name, id: audio.id }
              a.url = audio.url.indexOf(`.${a.fileType}`) >= 0 ? audio.url : audio.url + `.${a.fileType}`
              a.newName = audio.name.includes('_') ? audio.name.slice(0, audio.name.lastIndexOf('_')) : audio.name
              bgpicS.bg.push(a)
            }
          })
          data.resource.pixelImage && Object.keys(data.resource.pixelImage).forEach(pixelImage => {
            if (!bgpic.pix.has(pixelImage)) {
              bgpic.pix.add(pixelImage)
              ff[pixelImage] = data.resource.pixelImage[pixelImage]
            }
          })

          if (data.macros && (data.macros.length !== 0 || Object.values(data.macros).length !== 0)) {
            Object.values(data.macros).forEach(macro => {
              macro.resource.image && Object.values(macro.resource.image).forEach(img => {
                if (!bgpic.pi.has(img.id)) {
                  bgpic.pi.add(img.id)
                  let a = { fileType: img.fileType, url: img.url, name: img.name, id: img.id }
                  a.newName = img.name.includes('_') ? img.name.slice(0, img.name.lastIndexOf('_')) : img.name
                  bgpicS.pi.push(a)
                  bb[`$${img.id}`] = a
                }
              })
              macro.resource.audio && Object.values(macro.resource.audio).forEach(audio => {
                if (!bgpic.bg.has(audio.id) || !bgpicSA.bg[`${audio.id}`]) {
                  bgpic.bg.add(audio.id)
                  let a = { fileType: audio.fileType || 'mp3', name: audio.name, id: audio.id }
                  a.url = audio.url.indexOf(`.${a.fileType}`) >= 0 ? audio.url : audio.url + `.${a.fileType}`
                  a.newName = audio.name.includes('_') ? audio.name.slice(0, audio.name.lastIndexOf('_')) : audio.name
                  bgpicS.bg.push(a)
                }
              })
              macro.resource.pixelImage && Object.keys(macro.resource.pixelImage).forEach(pixelImage => {
                if (!bgpic.pix.has(pixelImage)) {
                  bgpic.pix.add(pixelImage)
                  ff[pixelImage] = macro.resource.pixelImage[pixelImage]
                }
              })
            })
          }
          if (data.uis && (data.uis.length !== 0 || Object.values(data.uis).length !== 0)) {
            Object.values(data.uis).forEach(macro => {
              macro.resource.image && Object.values(macro.resource.image).forEach(img => {
                if (!bgpic.pi.has(img.id)) {
                  bgpic.pi.add(img.id)
                  let a = { fileType: img.fileType, url: img.url, name: img.name, id: img.id }
                  a.newName = img.name.includes('_') ? img.name.slice(0, img.name.lastIndexOf('_')) : img.name
                  bgpicS.pi.push(a)
                  bb[`$${img.id}`] = a
                }
              })
              macro.resource.audio && Object.values(macro.resource.audio).forEach(audio => {
                if (!bgpic.bg.has(audio.id) || !bgpicSA.bg[`${audio.id}`]) {
                  bgpic.bg.add(audio.id)
                  let a = { fileType: audio.fileType || 'mp3', name: audio.name, id: audio.id }
                  a.url = audio.url.indexOf(`.${a.fileType}`) >= 0 ? audio.url : audio.url + `.${a.fileType}`
                  a.newName = audio.name.includes('_') ? audio.name.slice(0, audio.name.lastIndexOf('_')) : audio.name
                  bgpicS.bg.push(a)
                }
              })
              macro.resource.pixelImage && Object.keys(macro.resource.pixelImage).forEach(pixelImage => {
                if (!bgpic.pix.has(pixelImage)) {
                  bgpic.pix.add(pixelImage)
                  ff[pixelImage] = macro.resource.pixelImage[pixelImage]
                }
              })
            })
          }
        }
        let sc = cc.Director._getInstance()
        if (message.value[0] !== 5) {
          if (sc._runningScene.uiLayerStack.length !== 0) {
            const aa = sc._runningScene.uiLayerStack[sc._runningScene.uiLayerStack.length - 1]
            getAAA(aa.config)
            if (message.value[0] === 3) { bgpicS.pi = [], bgpic.pi = new Set() }
            if (window.typeGame === '2') {
              Object.values(aa.controls).forEach(control => {
                if (control.config && (control.config.resId || (control.config.picGroup && control.currentIndex > -1))) {
                  let a = control.config.resId || control.config.picGroup[control.currentIndex].resId
                  if (window.bgpicSA.pi[a]) {
                    let img = window.bgpicSA.pi[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  } else if (bb[a]) {
                    let img = bb[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  }
                } else if (message.value[0] === 4 && control.config && control.config.pixId) {
                  if (window.bgpicSA.pix[control.config.pixId]) {
                    control.config.resGroup.forEach(v => {
                      let img = v.resId.split('_')
                      let aaaa = window.bgpicSA.pix[control.config.pixId].animation[img[1]].frames[img[2]]
                      dd.push({ ...aaaa, name: aaaa.id, newName: aaaa.id })
                    })
                  } else if (ff[control.config.pixId]) {
                    control.config.resGroup.forEach(v => {
                      let img = v.resId.split('_')
                      let aaaa = ff[control.config.pixId].animation[img[1]].frames[img[2]]
                      dd.push({ ...aaaa, name: aaaa.id, newName: aaaa.id })
                    })
                  }
                }
              })
            } else {
              Object.values(aa.controls).forEach(control => {
                if (control.config.type === 'image' || (control.config.type === 'picDisplay' && control.currentIndex > -1)) {
                  let a = control.config.type === 'image' ? control.imageConfig.src : control.config.config.picGroup[control.currentIndex]
                  if (window.bgpicSA.pi[a]) {
                    let img = window.bgpicSA.pi[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  } else if (bb[a]) {
                    let img = bb[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  }
                } else if (message.value[0] === 4 && control.config.type === 'sequence') {
                  control.config.resList.forEach(v => {
                    let img = v.split('_')
                    if (window.bgpicSA.pix[img[0]]) {
                      let aaaa = window.bgpicSA.pix[img[0]].animation[img[1]].frames[img[2]]
                      dd.push({ ...aaaa, name: aaaa.id, newName: aaaa.id })
                    } else if (ff[img[0]]) {
                      let aaaa = ff[img[0]].animation[img[1]].frames[img[2]]
                      dd.push({ ...aaaa, name: aaaa.id, newName: aaaa.id })
                    } else if (bgpicS.pi[`$${img[0]}`] || bgpicSA.pi[`$${img[0]}`]) {
                      let aaaa = bgpicS.pi[`$${img[0]}`] || bgpicSA.pi[`$${img[0]}`]
                      dd.push(aaaa)
                    }
                  })
                }
              })
            }
          } else {
            const aa = sc._runningScene
            getAAA(aa.config)
            if (message.value[0] === 3) { bgpicS.pi = [], bgpic.pi = new Set() }
            if (window.typeGame === '1') {
              Object.values(aa.mainLayer.controls).forEach(control => {
                if (control.config.type === 'image' || (control.config.type === 'picDisplay' && control.currentIndex > -1)) {
                  let a = control.config.type === 'image' ? control.imageConfig.src : control.config.config.picGroup[control.currentIndex]
                  if (window.bgpicSA.pi[a]) {
                    let img = window.bgpicSA.pi[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  } else if (bb[a]) {
                    let img = bb[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  }
                } else if (message.value[0] === 4 && control.config.type === 'sequence') {
                  control.config.resList.forEach(v => {
                    let img = v.split('_')
                    if (window.bgpicSA.pix[img[0]]) {
                      let aaaa = window.bgpicSA.pix[img[0]].animation[img[1]].frames[img[2]]
                      dd.push({ ...aaaa, name: aaaa.id, newName: aaaa.id })
                    } else if (ff[img[0]]) {
                      let aaaa = ff[img[0]].animation[img[1]].frames[img[2]]
                      dd.push({ ...aaaa, name: aaaa.id, newName: aaaa.id })
                    } else if (bgpicS.pi[`$${img[0]}`] || bgpicSA.pi[`$${img[0]}`]) {
                      let aaaa = bgpicS.pi[`$${img[0]}`] || bgpicSA.pi[`$${img[0]}`]
                      dd.push(aaaa)
                    }
                  })
                }
              })
              aa.mainLayer.dialogLayer._children.forEach(v => {
                let bn = v.getChildByName("avatar")
                if (bn) {
                  let a = `$${bn.info.id}`
                  if (window.bgpicSA.pi[a]) {
                    let img = window.bgpicSA.pi[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  } else if (bb[a]) {
                    let img = bb[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  }
                }
              })
            } else {
              Object.values(aa.gameLayer.controls).forEach(control => {
                if (control.config && (control.config.resId || (control.config.picGroup && control.currentIndex > -1))) {
                  let a = control.config.resId || control.config.picGroup[control.currentIndex].resId
                  if (window.bgpicSA.pi[a]) {
                    let img = window.bgpicSA.pi[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  } else if (bb[a]) {
                    let img = bb[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  }
                } else if (message.value[0] === 4 && control.config && control.config.pixId) {
                  if (window.bgpicSA.pix[control.config.pixId]) {
                    control.config.resGroup.forEach(v => {
                      let img = v.resId.split('_')
                      let aaaa = window.bgpicSA.pix[control.config.pixId].animation[img[1]].frames[img[2]]
                      dd.push({ ...aaaa, name: aaaa.id, newName: aaaa.id })
                    })
                  } else if (ff[control.config.pixId]) {
                    control.config.resGroup.forEach(v => {
                      let img = v.resId.split('_')
                      let aaaa = ff[control.config.pixId].animation[img[1]].frames[img[2]]
                      dd.push({ ...aaaa, name: aaaa.id, newName: aaaa.id })
                    })
                  }
                }
              })
              aa.gameLayer.dialogLayer._children.forEach(v => {
                if (v.avatarConfig && v.avatarConfig.show && v.avatarConfig.resId) {
                  let a = v.avatarConfig.resId
                  if (window.bgpicSA.pi[a]) {
                    let img = window.bgpicSA.pi[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  } else if (bb[a]) {
                    let img = bb[a]
                    if (!bgpic.pi.has(img.id)) {
                      bgpic.pi.add(img.id)
                      bgpicS.pi.push(img)
                    }
                  }
                }
              })
            }
          }
          if (message.value[0] === 4) { bgpicS.pi = dd }
        } else {
          if (sc._runningScene.uiLayerStack.length !== 0) {
            const aa = sc._runningScene.uiLayerStack[sc._runningScene.uiLayerStack.length - 1]
            getAAA(aa.config)
          } else {
            getAAA(sc._runningScene.config)
          }
          bgpicS.pi = [], bgpic.pi = new Set()
          const picId = message.value[1].replace(/，/g, ',').split(',')
          picId.forEach(v => {
            if (v) {
              if (window.bgpicSA.pi[v]) {
                let img = window.bgpicSA.pi[v]
                if (!bgpic.pi.has(img.id)) {
                  bgpic.pi.add(img.id)
                  bgpicS.pi.push(img)
                }
              } else if (bb[v]) {
                let img = bb[v]
                if (!bgpic.pi.has(img.id)) {
                  bgpic.pi.add(img.id)
                  bgpicS.pi.push(img)
                }
              }
            }
          })
        }
        let playingAudio = [];
        Object.values(cc.audioEngine._audioPool).forEach(v => { v.forEach(v1 => { if (v1._element.isUsing) { if (v1.getPlaying()) { playingAudio.push(v1) } } }) });
        playingAudio.forEach(v => {
          const i1 = bgpicS.bg.find(ad => ad.url === v.src)
          if (!i1) {
            const i2 = Object.values(window.bgpicSA.bg).find(ad => ad.url === v.src)
            if (i2) {
              bgpicS.bg.push(i2)
            }
          }
        })
        const customEvent1 = new CustomEvent("ycyBgPi", {
          detail: { value: [bgpicS, 'now'] }
        });
        window.dispatchEvent(customEvent1);
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'getYcyBgmBlob' && window.typeGame) {
        if (message.value[1] === 'ycyRole') {
          types.roleNameR = message.value[0]
          if (Object.values(types.roleNameR).length === 0) {
            types.gjkdjf = false
          } else {
            types.gjkdjf = true
          }
          types.roleNameS = new RegExp(Object.keys(types.roleNameR).join('|'), 'g')
        } else if (message.value[1] === 'ycyPicAll') {
          const jszipUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
          const fileSaverUrl = 'https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js';
          let loadScript = function (src) {
            return new Promise((resolve, reject) => {
              const script = document.createElement('script');
              script.src = src;
              script.onload = resolve;
              script.onerror = reject;
              document.head.appendChild(script);
            });
          }
          let importLibraries = async function () {
            if (typeof JSZip === 'undefined') {
              await loadScript(jszipUrl);
            }
            if (typeof saveAs === 'undefined') {
              await loadScript(fileSaverUrl);
            }
          };
          let downloadImagesAsZip = async function (imageUrls) {
            const zip = new JSZip();
            for (const url of imageUrls) {
              if (url.url.includes('https://')) {
                const response = await fetch(url.url);
                const blob = await response.blob();
                const mimeType = blob.type;
                let extension = '';
                switch (mimeType) {
                  case 'image/jpeg':
                    extension = '.jpg';
                    break;
                  case 'image/jfif':
                    extension = '.jfif';
                    break;
                  case 'image/png':
                    extension = '.png';
                    break;
                  case 'image/gif':
                    extension = '.gif';
                    break;
                  case 'image/webp':
                    extension = '.webp';
                    break;
                  case 'image/bmp':
                    extension = '.bmp';
                    break;
                  case 'image/tiff':
                    extension = '.tiff';
                    break;
                  case 'image/svg+xml':
                    extension = '.svg';
                    break;
                  default:
                    extension = '.png';
                    break;
                }
                const filename = `${url.newName}【${url.url.match(/\/file\/([^\/]+)$/)[1]}】${extension}`;
                zip.file(filename, blob);
              }
            }
            zip.generateAsync({ type: 'blob' })
              .then(function (content) {
                saveAs(content, `${gameName}(图片).zip`);
              });
          }
          if (message.value[2] === '1') {
            importLibraries().then(() => {
              downloadImagesAsZip(message.value[0]);
            }).catch(error => {
              alert('下载出错，请重试:', error);
            });
          } else {
            let aa = window.chaptersCommands || []
            downloadImagesAsZip = async function (imageUrls) {
              const zip = new JSZip();
              const tasks = imageUrls.map(url => async () => {
                if (url.url.includes('https://')) {
                  const response = await fetch(url.url);
                  const blob = await response.blob();
                  const mimeType = blob.type;
                  let extension = '';
                  switch (mimeType) {
                    case 'image/jpeg':
                      extension = '.jpg';
                      break;
                    case 'image/jfif':
                      extension = '.jfif';
                      break;
                    case 'image/png':
                      extension = '.png';
                      break;
                    case 'image/gif':
                      extension = '.gif';
                      break;
                    case 'image/webp':
                      extension = '.webp';
                      break;
                    case 'image/bmp':
                      extension = '.bmp';
                      break;
                    case 'image/tiff':
                      extension = '.tiff';
                      break;
                    case 'image/svg+xml':
                      extension = '.svg';
                      break;
                    default:
                      extension = '.png';
                      break;
                  }
                  const nn = url.name.includes('_') ? url.name.slice(0, url.name.lastIndexOf('_')) : url.name
                  const filename = `${nn}【${url.url.match(/\/file\/([^\/]+)$/)[1]}】${extension}`;
                  zip.file(filename, blob);
                }
              });
              // 设置并发限制，每 300 个请求后暂停 2 秒
              const limit = 5;        // 最大并发数
              const chunkSize = 300;  // 每处理 300 个请求暂停
              const delayMs = 2000;   // 暂停时间 2 秒
              // 使用 limitConcurrency 来控制并发和延迟
              await limitConcurrency(tasks, limit, chunkSize, delayMs);
              const content = await zip.generateAsync({
                type: 'blob',
                streamFiles: true,
                compression: "DEFLATE",
                compressionOptions: { level: 5 }
              });
              saveAs(content, `${gameName}(图片).zip`);
            }
            async function fetchScenes() {
              if (window.chaptersCommands) {
                return Promise.resolve();
              }
              const totalRequests = window.scenesSend.length;
              const tasks = [];
              // 创建请求任务
              for (let i = 0; i < totalRequests; i++) {
                const v = window.scenesSend[i];
                const task = async () => {
                  return new Promise((resolve, reject) => {
                    const xhr = new XMLHttpRequest();
                    xhr.open("GET", `https://avg.163.com/avg-portal-api/game/${window.gameId}/config/scene/${v.id}?em=${window.typeGame}`, true);
                    xhr.onreadystatechange = function () {
                      if (xhr.readyState === 4) {
                        if (xhr.status === 200) {
                          const data = JSON.parse(JSON.parse(xhr.response).data.data);
                          if (data.resource.image) {
                            Object.values(data.resource.image).forEach(im => {
                              if (!window.bgpicSA.pi[`$${im.id}`]) {
                                window.bgpicSA.pi[`$${im.id}`] = im
                              }
                            })
                          }
                          if (data.macros && (data.macros.length !== 0 || Object.values(data.macros).length !== 0)) {
                            Object.values(data.macros).forEach(macro => {
                              if (macro.resource.image) {
                                Object.values(macro.resource.image).forEach(im => {
                                  if (!window.bgpicSA.pi[`$${im.id}`]) {
                                    window.bgpicSA.pi[`$${im.id}`] = im
                                  }
                                })
                              }
                            });
                          }
                          if (data.uis && (data.uis.length !== 0 || Object.values(data.uis).length !== 0)) {
                            Object.values(data.uis).forEach(macro => {
                              if (macro.resource.image) {
                                Object.values(macro.resource.image).forEach(im => {
                                  if (!window.bgpicSA.pi[`$${im.id}`]) {
                                    window.bgpicSA.pi[`$${im.id}`] = im
                                  }
                                })
                              }
                            });
                          }
                          let a1 = '';
                          let pt = window.scenesById[data.id];
                          if (pt) {
                            a1 = pt.nameNew;
                          } else {
                            a1 = data.name;
                          }
                          aa.push({ name: a1, config: data });
                          resolve();  // 请求成功，解决 Promise
                        } else {
                          reject(`Error: ${xhr.status}`);  // 请求失败，拒绝 Promise
                        }
                      }
                    };
                    xhr.send();
                  });
                };
                tasks.push(task);
              }
              const limit = 5;        // 最大并发数
              const chunkSize = 300;  // 每处理 300 个请求暂停
              const delayMs = 1000;   // 暂停时间 2 秒
              await limitConcurrency(tasks, limit, chunkSize, delayMs);
            }
            async function batchDownloadImages(imageUrls) {
              const totalImages = imageUrls.length;
              const batchSize = 1000;
              for (let i = 0; i < totalImages; i += batchSize) {
                const currentBatch = imageUrls.slice(i, i + batchSize);
                // 调用 downloadImagesAsZip 处理当前批次
                await downloadImagesAsZip(currentBatch);
                if (i + batchSize < totalImages) {
                  await new Promise(resolve => setTimeout(resolve, 1000));  // 延迟1秒
                }
              }
              alert('下载完成');
            }
            fetchScenes().then(() => {
              window.chaptersCommands = aa
              importLibraries().then(() => {
                batchDownloadImages(Object.values(window.bgpicSA.pi));
              }).catch(error => {
                alert('下载出错，请重试:', error);
              });
            })
          }
        } else {
          if (message.value[1] === 'ycyBgm') {
            let a = message.value[0] + '.mp3'
            let bgm
            if (message.value[2]) {
              bgm = Object.values(bgpicSA.bg).find(bg => bg.url === message.value[0]).fileType || ''
            } else {
              bgm = bgpicS.bg.find(bg => bg.url === message.value[0]).fileType || ''
            }
            let b = message.value[0] + bgm
            let c = cc.loader.cache[message.value[0]] || cc.loader.cache[a] || cc.loader.cache[b]
            if (c) {
              const url = URL.createObjectURL(c.urlBuffer);
              const customEvent1 = new CustomEvent("ycyBgmBlob", {
                detail: { value: [url, message.value[1]] }
              });
              window.dispatchEvent(customEvent1);
              return
            }
          }
          fetch(message.value[0])
            .then(response => response.blob())
            .then(blob => {
              const url = URL.createObjectURL(blob);
              const customEvent1 = new CustomEvent("ycyBgmBlob", {
                detail: { value: [url, message.value[1]] }
              });
              window.dispatchEvent(customEvent1);
              //URL.revokeObjectURL(url);
            })
            .catch(error => console.error('Error downloading the file:', error));
        }
      }
    }
  })
  window.addEventListener('message', async (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'ycyReplacePic' && window.typeGame) {
        function replacePi(w, h, posX, posY, scaX, scaY) {
          let sc = cc.Director._getInstance()
          if (sc._runningScene.uiLayerStack.length !== 0) {
            let a = sc._runningScene.uiLayerStack[sc._runningScene.uiLayerStack.length - 1]
            if (window.typeGame === '2') {
              let ind = Object.values(a.controls).find(v => v.config && v.config.resId && v.config.resId === `$${message.value[0].id}`)
              if (ind) {
                if (message.value[2] === 'ycyPicWH') {
                  if (posX) { ind.setPositionX(posX) }
                  if (posY) { ind.setPositionY(posY) }
                  if (scaX) { ind.setScaleX(scaX) }
                  if (scaY) { ind.setScaleY(scaY) }
                  let urlP = `$${message.value[0].id}`
                  if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
                  if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
                  if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
                  if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
                  if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
                  if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
                  if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
                }
                if (w || h || message.value[2] !== 'ycyPicWH') {
                  delete cc.textureCache._textures[message.value[0].url]
                  cc.textureCache.addImage(message.value[0].url)
                  ind.node.innerSp.setTexture(cc.textureCache._textures[message.value[0].url])
                }
              }
              let pid = Object.values(a.controls).find(v => v.config && v.config.picGroup && v.currentIndex > -1 && v.config.picGroup[v.currentIndex].resId === `$${message.value[0].id}`)
              if (pid) {
                if (message.value[2] === 'ycyPicWH') {
                  if (posX) { pid.setPositionX(posX) }
                  if (posY) { pid.setPositionY(posY) }
                  if (scaX) { pid.setScaleX(scaX) }
                  if (scaY) { pid.setScaleY(scaY) }
                  let urlP = `$${message.value[0].id}`
                  if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
                  if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
                  if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
                  if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
                  if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
                  if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
                  if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
                }
                if (w || h || message.value[2] !== 'ycyPicWH') {
                  delete cc.textureCache._textures[message.value[0].url]
                  cc.textureCache.addImage(message.value[0].url)
                  pid.node._children[0].innerSp.setTexture(cc.textureCache._textures[message.value[0].url])
                }
              }
            } else {
              //a.startParseALaunchCommands()
              let ind = Object.values(a.controls).find(v => v.config && v.config.type === 'image' && v.imageConfig && v.imageConfig.src === `$${message.value[0].id}`)
              if (ind) {
                if (message.value[2] === 'ycyPicWH') {
                  if (posX) { ind.setPositionX(posX) }
                  if (posY) { ind.setPositionY(posY) }
                  if (scaX) { ind.setScaleX(scaX) }
                  if (scaY) { ind.setScaleY(scaY) }
                  let urlP = `$${message.value[0].id}`
                  if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
                  if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
                  if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
                  if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
                  if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
                  if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
                  if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
                }
                if (w || h || message.value[2] !== 'ycyPicWH') {
                  delete cc.textureCache._textures[message.value[0].url]
                  cc.textureCache.addImage(message.value[0].url)
                  ind.bgImg.innerSp.setTexture(cc.textureCache._textures[message.value[0].url])
                }
              }
              let pid = Object.values(a.controls).find(v => v.config && v.config.type === 'picDisplay' && v.currentIndex >= 0 && v.config.config.picGroup[v.currentIndex] === `$${message.value[0].id}`)
              if (pid) {
                if (message.value[2] === 'ycyPicWH') {
                  if (posX) { pid.setPositionX(posX) }
                  if (posY) { pid.setPositionY(posY) }
                  if (scaX) { pid.setScaleX(scaX) }
                  if (scaY) { pid.setScaleY(scaY) }
                  let urlP = `$${message.value[0].id}`
                  if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
                  if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
                  if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
                  if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
                  if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
                  if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
                  if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
                }
                if (w || h || message.value[2] !== 'ycyPicWH') {
                  delete cc.textureCache._textures[message.value[0].url]
                  cc.textureCache.addImage(message.value[0].url)
                  pid.node._children[0].innerSp.setTexture(cc.textureCache._textures[message.value[0].url])
                }
              }
            }
          } else {
            let a = sc._runningScene
            if (window.typeGame === '2') {
              let ind = Object.values(a.gameLayer.controls).find(v => v.config && v.config.resId && v.config.resId === `$${message.value[0].id}`)
              if (ind) {
                if (message.value[2] === 'ycyPicWH') {
                  if (posX) { ind.setPositionX(posX) }
                  if (posY) { ind.setPositionY(posY) }
                  if (scaX) { ind.setScaleX(scaX) }
                  if (scaY) { ind.setScaleY(scaY) }
                  let urlP = `$${message.value[0].id}`
                  if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
                  if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
                  if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
                  if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
                  if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
                  if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
                  if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
                }
                if (w || h || message.value[2] !== 'ycyPicWH') {
                  delete cc.textureCache._textures[message.value[0].url]
                  cc.textureCache.addImage(message.value[0].url)
                  ind.node.innerSp.setTexture(cc.textureCache._textures[message.value[0].url])
                }
              }
              let pid = Object.values(a.gameLayer.controls).find(v => v.config && v.config.picGroup && v.currentIndex > -1 && v.config.picGroup[v.currentIndex].resId === `$${message.value[0].id}`)
              if (pid) {
                if (message.value[2] === 'ycyPicWH') {
                  if (posX) { pid.setPositionX(posX) }
                  if (posY) { pid.setPositionY(posY) }
                  if (scaX) { pid.setScaleX(scaX) }
                  if (scaY) { pid.setScaleY(scaY) }
                  let urlP = `$${message.value[0].id}`
                  if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
                  if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
                  if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
                  if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
                  if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
                  if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
                  if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
                }
                if (w || h || message.value[2] !== 'ycyPicWH') {
                  delete cc.textureCache._textures[message.value[0].url]
                  cc.textureCache.addImage(message.value[0].url)
                  pid.node._children[0].innerSp.setTexture(cc.textureCache._textures[message.value[0].url])
                }
              }
              let dia = a.gameLayer.dialogLayer._children.find(v => v.avatarConfig && v.avatarConfig.show && v.avatarConfig.resId === `$${message.value[0].id}`)
              if (dia) {
                let ava = dia._children.find(v => v._name === "avatar")
                if (ava) {
                  if (message.value[2] === 'ycyPicWH') {
                    if (w) { ava._setWidth(w) }
                    if (h) { ava._setHeight(h) }
                    if (posX) { ava.setPositionX(posX) }
                    if (posY) { ava.setPositionY(posY) }
                    if (scaX) { ava.setScaleX(scaX) }
                    if (scaY) { ava.setScaleY(scaY) }
                    if (w || h) { dia.updateAvatar() }
                    let urlP = `$${message.value[0].id}ava`
                    if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
                    if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
                    if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
                    if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
                    if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
                    if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
                    if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
                  } else {
                    delete cc.textureCache._textures[message.value[0].url]
                    cc.textureCache.addImage(message.value[0].url)
                    ava.innerSp.setTexture(cc.textureCache._textures[message.value[0].url])
                    //ava.innerSp.setTexture(cc.textureCache.addImage(message.value[2] === 'ycy' ? message.value[1] + '?fop=imageView/0/w/99999/f/webp' : message.value[1]))
                  }
                }
              }
            } else if (window.typeGame === '1') {
              //a.mainLayer.startParseALaunchCommands()
              let ind = Object.values(a.mainLayer.controls).find(v => v.config && v.config.type === 'image' && v.imageConfig && v.imageConfig.src === `$${message.value[0].id}`)
              if (ind) {
                if (message.value[2] === 'ycyPicWH') {
                  if (posX) { ind.setPositionX(posX) }
                  if (posY) { ind.setPositionY(posY) }
                  if (scaX) { ind.setScaleX(scaX) }
                  if (scaY) { ind.setScaleY(scaY) }
                  let urlP = `$${message.value[0].id}`
                  if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
                  if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
                  if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
                  if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
                  if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
                  if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
                  if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
                }
                if (w || h || message.value[2] !== 'ycyPicWH') {
                  delete cc.textureCache._textures[message.value[0].url]
                  cc.textureCache.addImage(message.value[0].url)
                  ind.bgImg.innerSp.setTexture(cc.textureCache._textures[message.value[0].url])
                }
              }
              let pid = Object.values(a.mainLayer.controls).find(v => v.config && v.config.type === 'picDisplay' && v.currentIndex >= 0 && v.config.config.picGroup[v.currentIndex] === `$${message.value[0].id}`)
              if (pid) {
                if (message.value[2] === 'ycyPicWH') {
                  if (posX) { pid.setPositionX(posX) }
                  if (posY) { pid.setPositionY(posY) }
                  if (scaX) { pid.setScaleX(scaX) }
                  if (scaY) { pid.setScaleY(scaY) }
                  let urlP = `$${message.value[0].id}`
                  if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
                  if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
                  if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
                  if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
                  if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
                  if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
                  if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
                }
                if (w || h || message.value[2] !== 'ycyPicWH') {
                  delete cc.textureCache._textures[message.value[0].url]
                  cc.textureCache.addImage(message.value[0].url)
                  pid.node._children[0].innerSp.setTexture(cc.textureCache._textures[message.value[0].url])
                }
              }
              let dia = a.mainLayer.dialogLayer._children.find(v => { let bn = v.getChildByName("avatar"); return bn && bn.info && bn.info.id && bn.info.id === `$${message.value[0].id}` })
              if (dia) {
                let ava = dia.getChildByName("avatar")
                if (ava) {
                  if (message.value[2] === 'ycyPicWH') {
                    if (w) { ava._setWidth(w) }
                    if (h) { ava._setHeight(h) }
                    if (posX) { ava.setPositionX(posX) }
                    if (posY) { ava.setPositionY(posY) }
                    if (scaX) { ava.setScaleX(scaX) }
                    if (scaY) { ava.setScaleY(scaY) }
                    if (w || h) { dia.configAvatar() }
                    let urlP = `$${message.value[0].id}ava`
                    if (!window.picInfo[urlP]) { window.picInfo[urlP] = {} }
                    if (message.value[1].w) { window.picInfo[urlP].width = parseFloat(message.value[1].w) }
                    if (message.value[1].h) { window.picInfo[urlP].height = parseFloat(message.value[1].h) }
                    if (message.value[1].posX) { window.picInfo[urlP].posX = parseFloat(message.value[1].posX) }
                    if (message.value[1].posY) { window.picInfo[urlP].posY = parseFloat(message.value[1].posY) }
                    if (message.value[1].scaX) { window.picInfo[urlP].scaleX = parseFloat(message.value[1].scaX) }
                    if (message.value[1].scaY) { window.picInfo[urlP].scaleY = parseFloat(message.value[1].scaY) }
                  } else {
                    delete cc.textureCache._textures[message.value[0].url]
                    cc.textureCache.addImage(message.value[0].url)
                    ava.innerSp.setTexture(cc.textureCache._textures[message.value[0].url])
                    //ava.innerSp.setTexture(cc.textureCache.addImage(message.value[2] === 'ycy' ? message.value[1] + '?fop=imageView/0/w/99999/f/webp' : message.value[1]))
                  }
                }
              }
            }
          }
        }
        if (message.value[2] === 'other') {
          try {
            const response = await fetch(message.value[1]); // 等待 fetch 完成
            const blob = await response.blob(); // 等待 blob() 完成
            message.value[1] = URL.createObjectURL(blob); // 更新为 Blob URL
          } catch (error) {
            console.error('Error converting Data URL to Blob:', error);
          }
        }
        let c = cc.loader.cache[message.value[0].url] || cc.loader.cache[message.value[0].url + '?fop=imageView/0/w/99999/f/webp']
        if (c) {
          if (message.value[2] === 'ycyPicWH') {
            const w = message.value[1].w ? parseFloat(message.value[1].w) : 0
            const h = message.value[1].h ? parseFloat(message.value[1].h) : 0
            const posX = message.value[1].posX ? parseFloat(message.value[1].posX) : 0
            const posY = message.value[1].posY ? parseFloat(message.value[1].posY) : 0
            const scaX = message.value[1].scaX ? parseFloat(message.value[1].scaX) : 0
            const scaY = message.value[1].scaY ? parseFloat(message.value[1].scaY) : 0
            if (!window.picInfo) {
              window.picInfo = {}
              let nmv = cc.Layer.prototype.addChild
              let dia = cc.Node.prototype.addChild
              if (window.typeGame === '2') {
                cc.Node.prototype.addChild = function () {
                  if (arguments[2] === 'avatar') {
                    let v = this, m = arguments[0]
                    if (v.avatarConfig && v.avatarConfig.show && window.picInfo[v.avatarConfig.resId + 'ava']) {
                      let bn = window.picInfo[v.avatarConfig.resId + 'ava']
                      if (bn.width) { m._contentSize.width = bn.width }
                      if (bn.height) { m._contentSize.height = bn.height }
                      if (bn.posX !== undefined) { m._position.x = bn.posX }
                      if (bn.posY !== undefined) { m._position.y = bn.posY }
                      if (bn.scaleX) { m._scaleX = bn.scaleX }
                      if (bn.scaleY) { m._scaleY = bn.scaleY }
                    }
                  } else {
                    let v = arguments[0]
                    if (v.config) {
                      if (v.config.resId && window.picInfo[v.config.resId]) {
                        let bn = window.picInfo[v.config.resId]
                        if (bn.width) { v._contentSize.width = bn.width }
                        if (bn.height) { v._contentSize.height = bn.height }
                        if (bn.posX !== undefined) { v._position.x = bn.posX }
                        if (bn.posY !== undefined) { v._position.y = bn.posY }
                        if (bn.scaleX) { v._scaleX = bn.scaleX }
                        if (bn.scaleY) { v._scaleY = bn.scaleY }
                      } else if (v.config.picGroup) {
                        let idn = v.bindList.findIndex(item => item.condition())
                        if (idn > -1 && v.config.picGroup[idn] && v.config.picGroup[idn].resId && window.picInfo[v.config.picGroup[idn].resId]) {
                          let bn = window.picInfo[v.config.picGroup[idn].resId]
                          if (bn.width) { v._contentSize.width = bn.width }
                          if (bn.height) { v._contentSize.height = bn.height }
                          if (bn.posX !== undefined) { v._position.x = bn.posX }
                          if (bn.posY !== undefined) { v._position.y = bn.posY }
                          if (bn.scaleX) { v._scaleX = bn.scaleX }
                          if (bn.scaleY) { v._scaleY = bn.scaleY }
                        }
                      }
                    }
                  }
                  dia.apply(this, arguments)
                }
              } else {
                cc.Node.prototype.addChild = function () {
                  if (arguments[2] === 'avatar') {
                    let m = arguments[0]
                    if (m.info && window.picInfo['$' + m.info.id + 'ava']) {
                      let bn = window.picInfo['$' + m.info.id + 'ava']
                      if (bn.width) { m._contentSize.width = bn.width }
                      if (bn.height) { m._contentSize.height = bn.height }
                      if (bn.posX !== undefined) { m._position.x = bn.posX }
                      if (bn.posY !== undefined) { m._position.y = bn.posY }
                      if (bn.scaleX) { m._scaleX = bn.scaleX }
                      if (bn.scaleY) { m._scaleY = bn.scaleY }
                    }
                  } else {
                    let v = arguments[0]
                    if (v.config) {
                      if (v.config.type === 'image' && v.imageConfig && v.imageConfig.src && window.picInfo[v.imageConfig.src]) {
                        let bn = window.picInfo[v.imageConfig.src]
                        if (bn.width) { v._contentSize.width = bn.width }
                        if (bn.height) { v._contentSize.height = bn.height }
                        if (bn.posX !== undefined) { v._position.x = bn.posX }
                        if (bn.posY !== undefined) { v._position.y = bn.posY }
                        if (bn.scaleX) { v._scaleX = bn.scaleX }
                        if (bn.scaleY) { v._scaleY = bn.scaleY }
                      } else if (v.config.type === 'picDisplay' && v.currentIndex > -1 && v.config.config.picGroup[v.currentIndex] && window.picInfo[v.config.config.picGroup[v.currentIndex]]) {
                        let bn = window.picInfo[v.config.config.picGroup[v.currentIndex]]
                        if (bn.width) { v._contentSize.width = bn.width }
                        if (bn.height) { v._contentSize.height = bn.height }
                        if (bn.posX !== undefined) { v._position.x = bn.posX }
                        if (bn.posY !== undefined) { v._position.y = bn.posY }
                        if (bn.scaleX) { v._scaleX = bn.scaleX }
                        if (bn.scaleY) { v._scaleY = bn.scaleY }
                      }
                    }
                  }
                  dia.apply(this, arguments)
                }
              }
            }
            if (w) {
              cc.loader.cache[message.value[0].url].width =
                (cc.loader.cache[message.value[0].url + '?fop=imageView/0/w/99999/f/webp'] = cc.loader.cache[message.value[0].url]).width = w
            }
            if (h) {
              cc.loader.cache[message.value[0].url].height =
                (cc.loader.cache[message.value[0].url + '?fop=imageView/0/w/99999/f/webp'] = cc.loader.cache[message.value[0].url]).height = h
            }
            replacePi(w, h, posX, posY, scaX, scaY)
          } else {
            URL.revokeObjectURL(c.src)
            c.onload = function () {
              replacePi()
              c.onload = null
              cc.loader.cache[message.value[0].url] = cc.loader.cache[message.value[0].url + '?fop=imageView/0/w/99999/f/webp'] = c
            }
            c.src = message.value[2] === 'ycy' ? message.value[1] + '?fop=imageView/0/w/99999/f/webp' : message.value[1]
          }
        } else {
          let a = document.createElement('img');
          a.crossOrigin = 'anonymous';
          a.onload = function () {
            replacePi()
            a.onload = null
            cc.loader.cache[message.value[0].url] = cc.loader.cache[message.value[0].url + '?fop=imageView/0/w/99999/f/webp'] = a
          }
          a.src = message.value[2] === 'ycy' ? message.value[1] + '?fop=imageView/0/w/99999/f/webp' : message.value[1]
        }
      }
    }
  })
  let bhgjf = false
  window.addEventListener('message', async (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'removeBU' && window.typeGame) {
        switch (message.value[0]) {
          case 0:
            URL.revokeObjectURL(message.value[1]);
            break
          case 1:
          case 4:
          case 2:
            let playingAudio = [];
            Object.values(cc.audioEngine._audioPool).forEach(v => { v.forEach(v1 => { if (v1._element.isUsing) { if (v1.getPlaying()) { playingAudio.push(v1) } } }) });
            if (playingAudio.length > 0) {
              if (message.value[0] === 1) {
                let name = '音频', i1, i2
                i1 = bgpicS.bg.find(ad => ad.url === playingAudio[0].src)
                if (!i1) {
                  i2 = Object.values(window.bgpicSA.bg).find(ad => ad.url === playingAudio[0].src)
                  if (i2) {
                    name = i2.newName
                  }
                } else {
                  name = i1.newName
                }
                const blob = URL.createObjectURL(playingAudio[0].urlBuffer)
                const link = document.createElement('a');
                link.href = blob;
                let hz = i1 ? i1.fileType : i2 ? i2.fileType : 'mp3'
                link.download = `${name}《${playingAudio[0].src.match(/\/file\/([^\/]+)$/)[1]}》.${hz}`;
                link.click();
              } else if (message.value[0] === 2) {
                let am = playingAudio[0]._element.querySelector('source')
                if (am) {
                  if (message.value[2] === 'ycy') { message.value[1] = "https://a13.fp.ps.netease.com/file/" + message.value[1] }
                  let blob
                  try {
                    const response = await fetch(message.value[1]); // 等待 fetch 完成
                    blob = await response.blob(); // 等待 blob() 完成
                    message.value[1] = URL.createObjectURL(blob); // 更新为 Blob URL
                  } catch (error) {
                    console.error('Error converting Data URL to Blob:', error);
                    alert('发生错误，请重新上传替换')
                    return
                  }
                  const cacheSrc = cc.loader.cache[playingAudio[0].src]
                  if (cacheSrc) {
                    cacheSrc.urlBuffer = blob
                  } else {
                    cc.loader.cache[am.src] = new cc.Audio(playingAudio[0].src)
                    cacheSrc.urlBuffer = blob
                  }
                  URL.revokeObjectURL(am.src)
                  am.src = message.value[1]
                  playingAudio[0]._element.load()
                  playingAudio[0].play(0, true)
                } else {
                  alert('查询不到当前播放的音频')
                }
              } else if (message.value[0] === 4) {
                if (message.value[1] === 'info') {
                  let v = message.value[2].v, p = message.value[2].p
                  if (v) { playingAudio[0].setVolume(parseFloat(v)) }
                  if (p) { playingAudio[0]._element.playbackRate = parseFloat(p) }
                } else if (message.value[1] === 'forward') {
                  let a = playingAudio[0]._element.currentTime
                  a += 10
                  if (a > playingAudio[0]._element.duration) { playingAudio[0]._element.currentTime = playingAudio[0]._element.duration } else { playingAudio[0]._element.currentTime = a }
                } else if (message.value[1] === 'back') {
                  let a = playingAudio[0]._element.currentTime
                  a -= 10
                  if (a < 0) { playingAudio[0]._element.currentTime = 0 } else { playingAudio[0]._element.currentTime = a }
                }
              }
            } else {
              alert('查询不到当前的播放音频')
            }
            break
          case 3:
            if (message.value[3] === 'ycy') { message.value[2] = "https://a13.fp.ps.netease.com/file/" + message.value[2] }
            let blob
            try {
              const response = await fetch(message.value[2]); // 等待 fetch 完成
              blob = await response.blob(); // 等待 blob() 完成
              message.value[2] = URL.createObjectURL(blob); // 更新为 Blob URL
            } catch (error) {
              console.error('Error converting Data URL to Blob:', error);
              alert('发生错误，请重新上传替换')
              return
            }
            const cacheSrc = cc.loader.cache[message.value[1].url]
            if (cacheSrc) {
              cacheSrc.urlBuffer = blob
            } else {
              cc.loader.cache[message.value[1].url] = new cc.Audio(message.value[1].url)
              cacheSrc.urlBuffer = blob
            }
            let playingAudio1 = [];
            Object.values(cc.audioEngine._audioPool).forEach(v => { v.forEach(v1 => { if (v1._element.isUsing) { if (v1.getPlaying()) { playingAudio1.push(v1) } } }) });
            if (playingAudio1.length > 0 && playingAudio1[0].src === message.value[1].url) {
              let am = playingAudio1[0]._element.querySelector('source')
              if (am) {
                am.src = message.value[2]
                playingAudio1[0]._element.load()
                playingAudio1[0].play(0, true)
              }
            }
            break
        }
      } else if (message.type === 'ycyTxt' && window.typeGame) {
        if (window.typeGame === '2') {
          if (message.value[0] === 1) {
            let a, a1 = '', isU = false
            if (cc.director._runningScene.uiLayerStack.length === 0) {
              a = cc.director._runningScene.gameLayer
              let pt = window.scenesById[a.config.id]//window.scenesSend.find(v => v.id === a.config.id)
              if (pt) {
                a1 = pt.nameNew
              } else {
                a1 = a.config.name
              }
              isU = false
            } else {
              a = cc.director._runningScene.uiLayerStack[cc.director._runningScene.uiLayerStack.length - 1]
              a1 = `UI-${a.config.id}`
              isU = true
            }
            if (a.config.uis) {
              window.ycyUIS = { ...window.ycyUIS, ...a.config.uis }
            }
            if (a.config.macros) {
              Object.values(a.config.macros).forEach(macro => {
                let v = macro.cmdLines.match(/var ([\w\u4e00-\u9fa5]+)=/)
                if (v) {
                  ycyMacros1[v[1]] = macro
                } else {
                  ycyMacros1[macro.name] = macro
                }
              })
            }
            const customEvent1 = new CustomEvent("ycyTYPE2Txt", {
              detail: { value: ['current', a.config, ycyUIS, ycyMacros1, window.products, window.scenesById, bgpicSA, a1, isU] }
            });
            window.dispatchEvent(customEvent1);
          } else if (message.value[0] === 2) {
            let a1 = ''
            let xhr = new XMLHttpRequest();
            xhr.open("GET", `https://avg.163.com/avg-portal-api/game/${window.gameId}/config/scene/${message.value[1]}?em=${window.typeGame}`, true);
            xhr.onreadystatechange = function () {
              if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                  let cha = JSON.parse(JSON.parse(xhr.response).data.data)
                  let pt = window.scenesById[message.value[1]]//window.scenesSend.find(v => v.id === message.value[1])
                  if (pt) {
                    a1 = pt.nameNew
                  } else {
                    a1 = cha.name
                  }
                  if (cha.uis) {
                    window.ycyUIS = { ...window.ycyUIS, ...cha.uis }
                  }
                  if (cha.macros) {
                    window.ycyMacros1 = { ...window.ycyMacros1, ...cha.macros }
                  }
                  const customEvent1 = new CustomEvent("ycyTYPE2Txt", {
                    detail: { value: ['selectPlot', cha, ycyUIS, ycyMacros1, window.products, window.scenesById, bgpicSA, a1, false] }
                  });
                  window.dispatchEvent(customEvent1);
                }
              }
            };
            xhr.send()
          } else if (message.value[0] === 3) {
            let aa = window.chaptersCommands || []
            async function fetchScenes() {
              if (window.chaptersCommands) {
                return Promise.resolve();
              }
              const totalRequests = window.scenesSend.length;
              const tasks = [];
              // 创建请求任务
              for (let i = 0; i < totalRequests; i++) {
                const v = window.scenesSend[i];
                const task = async () => {
                  return new Promise((resolve, reject) => {
                    const xhr = new XMLHttpRequest();
                    xhr.open("GET", `https://avg.163.com/avg-portal-api/game/${window.gameId}/config/scene/${v.id}?em=${window.typeGame}`, true);
                    xhr.onreadystatechange = function () {
                      if (xhr.readyState === 4) {
                        if (xhr.status === 200) {
                          const data = JSON.parse(JSON.parse(xhr.response).data.data);
                          let a1 = '';
                          let pt = window.scenesById[data.id];
                          if (pt) {
                            a1 = pt.nameNew;
                          } else {
                            a1 = data.name;
                          }
                          aa.push({ name: a1, config: data });
                          resolve();  // 请求成功，解决 Promise
                        } else {
                          reject(`Error: ${xhr.status}`);  // 请求失败，拒绝 Promise
                        }
                      }
                    };
                    xhr.send();
                  });
                };
                tasks.push(task);
              }
              const limit = 5;        // 最大并发数
              const chunkSize = 300;  // 每处理 300 个请求暂停
              const delayMs = 1000;   // 暂停时间 2 秒
              await limitConcurrency(tasks, limit, chunkSize, delayMs);
            }
            fetchScenes().then(() => {
              window.chaptersCommands = aa
              let currentIndex = 0;
              let receivedData = [];
              function sendNextElement(tt) {
                if (tt !== 1) {
                  const customEvent2 = new CustomEvent("ycyTYPE2Txt", {
                    detail: { value: ['allPlot', aa[currentIndex], ycyUIS, ycyMacros1, window.products, window.scenesById, bgpicSA] }
                  });
                  window.dispatchEvent(customEvent2);
                } else {
                  const customEvent2 = new CustomEvent("ycyTYPE2Txt", {
                    detail: { value: ['allPlot', aa[currentIndex], currentIndex === (aa.length - 1) ? 1 : 0] }
                  });
                  window.dispatchEvent(customEvent2);
                }
              }
              if (!bhgjf) {
                bhgjf = true
                function aaa(event) {
                  if (typeof event.data == 'string' && isJSON(event.data)) {
                    const message = JSON.parse(event.data);
                    if (message.type === 'ycyTxtC' && window.typeGame) {
                      receivedData.push(...message.value);
                      currentIndex++;
                      if (currentIndex < aa.length) {
                        sendNextElement(1);
                      } else {
                        function downloadZip(txtArray) {
                          const jszipUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
                          const fileSaverUrl = 'https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js';
                          let loadScript = function (src) {
                            return new Promise((resolve, reject) => {
                              const script = document.createElement('script');
                              script.src = src;
                              script.onload = resolve;
                              script.onerror = reject;
                              document.head.appendChild(script);
                            });
                          }
                          let importLibraries = async function () {
                            if (typeof JSZip === 'undefined') {
                              await loadScript(jszipUrl);
                            }
                            if (typeof saveAs === 'undefined') {
                              await loadScript(fileSaverUrl);
                            }
                          };
                          let downloadImagesAsZip = async function (imageUrls) {
                            const zip = new JSZip();
                            for (const url of imageUrls) {
                              let name = `${url.name}.txt`
                              let b = new Blob([url.comm.join('\n')], { type: 'text/plain' })
                              zip.file(name, b);
                            }
                            zip.generateAsync({ type: 'blob' })
                              .then(function (content) {
                                saveAs(content, `${window.gameName}(txt).zip`);
                              });
                          }
                          importLibraries().then(() => {
                            downloadImagesAsZip(txtArray);
                          }).catch(error => {
                            alert('下载出错，请重试:', error);
                          });
                        }
                        downloadZip(receivedData)
                        bhgjf = false
                        window.removeEventListener('message', aaa)
                      }
                    }
                  }
                }
                window.addEventListener('message', aaa)
              }
              sendNextElement(0)
            })
          } else if (message.value[0] === 4) {
            if (message.value[1] !== 3) {
              const blob = new Blob([message.value[2].join('\n')], { type: 'text/plain' });
              /*a标签模拟下载文件*/
              const link = document.createElement('a');
              link.href = URL.createObjectURL(blob);
              link.download = !message.value[4] ? `${window.gameName}(${message.value[3]}).txt` :
                `${window.gameName}(${message.value[3]}).txt`;
              link.click();
              URL.revokeObjectURL(link.href);
            }
          }
        } else if (window.typeGame === '1') {
          let c = '', c1 = {}, c2 = {}, c3 = {}, c4 = {}, c3TF = false, c3N = '', c5 = {}, c6 = {}, c5N = false
          let recursionStack = new Set();
          function getTxt(config, commands, pusha, isUI, isAl) {
            let b = [], c3E = {}
            if (isAl && (pusha || isUI)) {
              commands.forEach((v, k1) => {
                if (v.includes('[oper') || v.includes('[operserial')) {
                  let ct = AVGCmdConverter['convertCmdStrToJSON'](v)
                  c3N = ct.config.name
                  c3TF = true
                  if (c3[c3N]) { c3E[c3N] = true }
                  c3[c3N] = []
                  return
                } else if (v.includes('[endoper]') || v.includes('[endoperserial]')) {
                  c3TF = false
                  c3N = ''
                  return
                }
                if (c3TF) {
                  c3[c3N].push(v)
                }
              })
            }
            c3TF = false, c3N = ''
            commands.forEach((v, k1) => {
              if (isUI && !isAl) {
                if (!v.includes('callUI ') && !v.includes('replaceUI ')) {
                  return
                }
              }
              if (c3TF && isAl) {
                if (v.includes('[endoper]') || v.includes('[endoperserial]')) {
                  c3TF = false
                  c3N = ''
                  return
                } else {
                  if (!pusha && !isUI) {
                    c3[c3N].push(v)
                  }
                  return
                }
              }
              let ct = AVGCmdConverter['convertCmdStrToJSON'](v)
              switch (ct.type) {
                case 'sysDialogOn':
                  if (ct.config.roleName !== void 0) {
                    if (ct.config.roleName.trim() === '') {
                      c = ''
                      let p = [...recursionStack].pop()
                      if (p) c6[p] = { isDia: true, isK: false, name: '', defaultN: '' }
                    } else {
                      let vv = AVGTextParserUtils.replaceValues(ct.config.roleName.replace(/\\w{(\d+)}/g, '').replace(/<tag\s+style=([^ >]+)>|<\/tag>/g, '').
                        replace(/\u200B/g, '').replace(/<tag[^>]*>|<\/tag>/g, ''))
                      if (vv.includes('#')) {
                        let q = vv.replace('#', '')
                        let p = [...recursionStack].pop()
                        if (p && (c1[p] || c2[p])) {
                          c6[p] = { isDia: true, isK: true, name: q, defaultN: c2[p][q] || '' }
                          c1[p][q] ? vv = AVGTextParserUtils.replaceValues(c1[p][q]) : c2[p][q] ? vv = AVGTextParserUtils.replaceValues(c2[p][q]) : vv = ''
                        } else {
                          if (p) c6[p] = { isDia: true, isK: false, name: '', defaultN: '' }
                          vv = ''
                        }
                      } else {
                        let p = [...recursionStack].pop()
                        if (p) {
                          c6[p] = { isDia: true, isK: false, name: vv, defaultN: vv }
                        }
                      }
                      c = vv
                    }
                  } else {
                    let p = [...recursionStack].pop()
                    if (p) c6[p] = { isDia: true, isK: false, name: '', defaultN: '' }
                    c = ''
                  }
                  break
                case 'text':
                  if (ct.config.type && ct.config.type === 'rolename') {
                    if (ct.config.content.trim() === '') {
                      c = ''
                      let p = [...recursionStack].pop()
                      if (p) c6[p] = { isDia: true, isK: false, name: '', defaultN: '' }
                    } else {
                      let vv = AVGTextParserUtils.replaceValues(ct.config.content.replace(/\\w{(\d+)}/g, '').replace(/<tag\s+style=([^ >]+)>|<\/tag>/g, '').
                        replace(/\u200B/g, '').replace(/<tag[^>]*>|<\/tag>/g, ''))
                      if (vv.includes('#')) {
                        let q = vv.replace('#', '')
                        let p = [...recursionStack].pop()
                        if (p && (c1[p] || c2[p])) {
                          c6[p] = { isDia: true, isK: true, name: q, defaultN: c2[p][q] }
                          c1[p][q] ? vv = AVGTextParserUtils.replaceValues(c1[p][q]) : c2[p][q] ? vv = AVGTextParserUtils.replaceValues(c2[p][q]) : vv = ''
                        } else {
                          if (p) c6[p] = { isDia: true, isK: false, name: '', defaultN: '' }
                          vv = ''
                        }
                      } else {
                        let p = [...recursionStack].pop()
                        if (p) {
                          c6[p] = { isDia: true, isK: false, name: vv, defaultN: vv }
                        }
                      }
                      c = vv
                    }
                  } else if (isAl) {
                    let vv = ct.config.content.replace(/\\w{(\d+)}/g, '').replace(/<tag\s+style=([^ >]+)>|<\/tag>/g, '').
                      replace(/\u200B/g, '').replace(/<tag[^>]*>|<\/tag>/g, '')
                    b.push(`显示文本：${vv}`)
                  }
                  break
                case 'callMacro':
                  if (window.ycyMacros1[ct.config.name]) {
                    if (c6[ct.config.name] && c6[ct.config.name].isDia) {
                      let roleN = c6[ct.config.name]
                      if (roleN.isK) {
                        c = ct.config[roleN.name] !== void 0 ? AVGTextParserUtils.replaceValues(ct.config[roleN.name].replace(/\\w{(\d+)}/g, '').replace(/<tag\s+style=([^ >]+)>|<\/tag>/g, '').
                          replace(/\u200B/g, '').replace(/<tag[^>]*>|<\/tag>/g, '')) : roleN.defaultN
                        if (c.trim() === '' && ct.config[roleN.name]) {
                          c = ct.config[roleN.name].replace(/\\v{|}/g, '')
                        }
                      } else {
                        c = roleN.defaultN
                      }
                    } else if (c5N) {
                      b.push(`调用宏：${ct.config.name}`)
                    } else if (!c5[ct.config.name]) {
                      c1[ct.config.name] = ct.config
                      let aco = structuredClone(config)
                      aco.resource.image = { ...aco.resource.image, ...window.ycyMacros1[ct.config.name].resource.image }
                      if (!recursionStack.has(ct.config.name)) {
                        recursionStack.add(ct.config.name)
                        if (!c5N || isAl) getTxt(aco, window.ycyMacros1[ct.config.name].cmdLines, false, false, false)
                        c5[ct.config.name] = window.ycyMacros1[ct.config.name]
                        c5[ct.config.name].resource.image = aco.resource.image
                        b.push(`调用宏：${ct.config.name}`)
                        delete c1[ct.config.name]
                        delete c2[ct.config.name]
                        recursionStack.delete(ct.config.name)
                      } else {
                        c5[ct.config.name] = window.ycyMacros1[ct.config.name]
                        c5[ct.config.name].resource.image = aco.resource.image
                        b.push(`调用宏：${ct.config.name}`)
                      }
                    }
                  }
                  break
                case 'macro':
                  c2[ct.config.name] = ct.config.keyDefaultValues
                  break
                case 'callUI':
                  if (window.ycyUIS[ct.config.id]) {
                    if (recursionStack.has(ct.config.id) || ct.config.id === config.id) {
                      b.push(`插入UI：${ct.config.id}`)
                    } else {
                      let ccc = structuredClone(config)
                      ccc.resource.image = { ...ccc.resource.image, ...window.ycyUIS[ct.config.id].resource.image }
                      if (!recursionStack.has(ct.config.id)) {
                        recursionStack.add(ct.config.id)
                        if (!c4[ct.config.id]) getTxt(ccc, window.ycyUIS[ct.config.id].commands, false, true, false)
                        c4[ct.config.id] = window.ycyUIS[ct.config.id]
                        c4[ct.config.id].resource.image = ccc.resource.image
                        b.push(`插入UI：${ct.config.id}`)
                        recursionStack.delete(ct.config.id)
                      } else {
                        c4[ct.config.id] = window.ycyUIS[ct.config.id].commands
                        c4[ct.config.id].resource.image = ccc.resource.image
                        b.push(`插入UI：${ct.config.id}`)
                      }
                    }
                  } else {
                    switch (ct.config.id) {
                      case 'loadRecord':
                        b.push(`呼叫读档界面`)
                        break;
                      case 'saveRecord':
                        b.push(`呼叫存档界面`)
                        break;
                      case 'configuration':
                        b.push(`呼叫设置界面`)
                        break;
                      case 'playback':
                        b.push(`呼叫回放界面`)
                        break;
                      case 'cover':
                        b.push(`呼叫封面界面`)
                        break;
                      case 'menu':
                        b.push(`呼叫菜单界面`)
                        break;
                    }
                  }
                  break
                case 'replaceUI':
                  if (window.ycyUIS[ct.config.id]) {
                    if (recursionStack.has(ct.config.id) || ct.config.id === config.id) {
                      b.push(`替换当前UI：${ct.config.id}`)
                    } else {
                      let ccc = structuredClone(config)
                      ccc.resource.image = { ...ccc.resource.image, ...window.ycyUIS[ct.config.id].resource.image }
                      if (!recursionStack.has(ct.config.id)) {
                        recursionStack.add(ct.config.id)
                        if (!c4[ct.config.id]) getTxt(ccc, window.ycyUIS[ct.config.id].commands, false, true, false)
                        c4[ct.config.id] = window.ycyUIS[ct.config.id]
                        c4[ct.config.id].resource.image = ccc.resource.image
                        b.push(`替换当前UI：${ct.config.id}`)
                        recursionStack.delete(ct.config.id)
                      } else {
                        c4[ct.config.id] = window.ycyUIS[ct.config.id].commands
                        c4[ct.config.id].resource.image = ccc.resource.image
                        b.push(`替换当前UI：${ct.config.id}`)
                      }
                    }
                  } else {
                    switch (ct.config.id) {
                      case 'loadRecord':
                        b.push(`呼叫读档界面`)
                        break;
                      case 'saveRecord':
                        b.push(`呼叫存档界面`)
                        break;
                      case 'configuration':
                        b.push(`呼叫设置界面`)
                        break;
                      case 'playback':
                        b.push(`呼叫回放界面`)
                        break;
                      case 'cover':
                        b.push(`呼叫封面界面`)
                        break;
                      case 'menu':
                        b.push(`呼叫菜单界面`)
                        break;
                    }
                  }
                  break
                default:
                  if (isAl) {
                    switch (ct.type) {
                      case 'dialog':
                        let vv = AVGTextParserUtils.replaceValues(ct.config.content.replace(/\\w{(\d+)}/g, '').replace(/<tag\s+style=([^ >]+)>|<\/tag>/g, '').
                          replace(/\u200B/g, '').replace(/<tag[^>]*>|<\/tag>/g, ''))
                        b.push(c.trim() === '' || c === '角色名' ? `旁白：${vv}` : `【${c}】：${vv}`)
                        break
                      case 'message':
                        let vm = AVGTextParserUtils.replaceValues(ct.config.content.replace(/\\w{(\d+)}/g, '').replace(/<tag\s+style=([^ >]+)>|<\/tag>/g, '').
                          replace(/\u200B/g, '').replace(/<tag[^>]*>|<\/tag>/g, ''))
                        b.push(ct.config.roleName === void 0 || ct.config.roleName.trim() === '' ? `气泡消息：${vm}` : `【${ct.config.roleName}】(气泡)：${vm}`)
                        break
                      case 'jump':
                        if (ct.config.plot) {
                          b.push(`跳转剧情：${ct.config.plot}`)
                        }
                        if (ct.config.plotID) {
                          let pd = window.scenesById[ct.config.plotID]//window.scenesSend.find(v => v.id === ct.config.plotID)
                          if (pd) {
                            b.push(`跳转剧情：${pd.nameNew}`)
                          } else {
                            b.push(`跳转剧情：id为${ct.config.plotID}的剧情`)
                          }
                        }
                        break
                      case 'display':
                        if (ct.config.plot) {
                          b.push(`插播剧情：${ct.config.plot}`)
                        }
                        if (ct.config.plotID) {
                          let pd = window.scenesById[ct.config.plotID]//window.scenesSend.find(v => v.id === ct.config.plotID)
                          if (pd) {
                            b.push(`插播剧情：${pd.nameNew}`)
                          } else {
                            b.push(`插播剧情：id为${ct.config.plotID}的剧情`)
                          }
                        }
                        break
                      case 'textOptionGroup':
                        if (ct.config.optionNum) {
                          let b1 = [], b2 = ct.config.conditionGroup, b3 = ct.config.productIDGroup, b4 = []
                          for (let i = 0; i < ct.config.optionNum; i++) {
                            let st = []
                            if (b3 && b3.length !== 0 && b3[i]) {
                              st.push(`付费出现：${window.products[b3[i]].name}`)
                            }
                            if (b2 && b2.length !== 0 && b2[i]) {
                              st.push(`条件：${b2[i]}`)
                            }
                            b1.push(`${ct.config.textContent[i]}${st.length !== 0 ? `(${st.join('、')})` : ''}`)
                            if (ct.config.operGroup) {
                              let og = ct.config.operGroup[i]
                              if (og) {
                                if (c3[og]) {
                                  b4.push(`选项：【${ct.config.textContent[i]}】的选择事件`)
                                  if (!recursionStack.has(og) || c3E[og]) {
                                    recursionStack.add(og);
                                    b4 = b4.concat(getTxt(config, c3[og], false, false, true))
                                    if (!c3E[og]) recursionStack.delete(og);
                                  } else {
                                    b4.push(`跳过重复的 事件 调用：【${ct.config.textContent[i]}】`)
                                  }
                                }
                              }
                            }
                          }
                          if (ct.config.time !== void 0) {
                            if (c3[ct.config.timeOverOper]) {
                              b4.push(`【计时结束且没有点击任何选项时的事件】`)
                              if (!recursionStack.has(ct.config.timeOverOper) || c3E[ct.config.timeOverOper]) {
                                recursionStack.add(ct.config.timeOverOper);
                                b4 = b4.concat(getTxt(config, c3[ct.config.timeOverOper], false, false, true))
                                if (!c3E[ct.config.timeOverOper]) recursionStack.delete(ct.config.timeOverOper);
                              } else {
                                b4.push(`跳过重复的 事件 调用：【计时结束且没有点击任何选项时的事件】`)
                              }
                            }
                          }
                          ct.config.time !== void 0 ? b.push(`出现限时文字选项组(计时${ct.config.time}秒)————${b1.join('、')}`) :
                            b.push(`出现文字选项组————${b1.join('、')}`)
                          b = b.concat(b4)
                        }
                        break
                      case "inputBoxGroup":
                        if (ct.config.textNum) {
                          let b1 = [], b2 = ct.config.conditionGroup, b3 = ct.config.productIDGroup, b4 = [], b5 = ct.config.varGroup
                          for (let i = 0; i < ct.config.textNum; i++) {
                            let st = []
                            if (b3 && b3.length !== 0 && b3[i]) {
                              st.push(`付费出现：${window.products[b3[i]].name}`)
                            }
                            if (b2 && b2.length !== 0 && b2[i]) {
                              st.push(`条件：${b2[i]}`)
                            }
                            if (b5 && b5.length !== 0 && b5[i]) {
                              st.push(`绑定变量：${b5[i]}`)
                            }
                            b1.push(`${ct.config.placeHolderGroup[i]}${st.length !== 0 ? `(${st.join('、')})` : ''}`)
                          }
                          if (ct.config.onTouchBegan && c3[ct.config.onTouchBegan]) {
                            b4.push(`【输入框确定事件：${ct.config.onTouchBegan}】`)
                            if (!recursionStack.has(ct.config.onTouchBegan) || c3E[ct.config.onTouchBegan]) {
                              recursionStack.add(ct.config.onTouchBegan);
                              b4 = b4.concat(getTxt(config, c3[ct.config.onTouchBegan], false, false, true))
                              if (!c3E[ct.config.onTouchBegan]) recursionStack.delete(ct.config.onTouchBegan);
                            } else {
                              b4.push(`跳过重复的 事件 调用：【输入框确定事件：${ct.config.onTouchBegan}】`)
                            }
                          }
                          if (ct.config.onTouchEnded && c3[ct.config.onTouchEnded]) {
                            b4.push(`【输入框确定事件：${ct.config.onTouchEnded}】`)
                            if (!recursionStack.has(ct.config.onTouchEnded) || c3E[ct.config.onTouchEnded]) {
                              recursionStack.add(ct.config.onTouchEnded);
                              b4 = b4.concat(getTxt(config, c3[ct.config.onTouchEnded], false, false, true))
                              if (!c3E[ct.config.onTouchEnded]) recursionStack.delete(ct.config.onTouchEnded);
                            } else {
                              b4.push(`跳过重复的 事件 调用：【输入框确定事件：${ct.config.onTouchEnded}】`)
                            }
                          }
                          b.push(`输入框控件————${b1.join('、')}`)
                          b = b.concat(b4)
                        }
                        break
                      case "redeemBox":
                        if (ct.config.textNum) {
                          let b1 = [], b2 = ct.config.conditionGroup, b3 = ct.config.productIDGroup, b4 = [], b5 = ct.config.varGroup
                          for (let i = 0; i < ct.config.textNum; i++) {
                            let st = []
                            if (b3 && b3.length !== 0 && b3[i]) {
                              st.push(`付费出现：${window.products[b3[i]].name}`)
                            }
                            if (b2 && b2.length !== 0 && b2[i]) {
                              st.push(`条件：${b2[i]}`)
                            }
                            if (b5 && b5.length !== 0 && b5[i]) {
                              st.push(`绑定变量：${b5[i]}`)
                            }
                            b1.push(`${ct.config.placeHolderGroup[i]}${st.length !== 0 ? `(${st.join('、')})` : ''}`)
                          }
                          if (ct.config.redeemSuccessOper && c3[ct.config.redeemSuccessOper]) {
                            b4.push(`【兑换确定事件：${ct.config.redeemSuccessOper}】`)
                            if (!recursionStack.has(ct.config.redeemSuccessOper) || c3E[ct.config.redeemSuccessOper]) {
                              recursionStack.add(ct.config.redeemSuccessOper);
                              b4 = b4.concat(getTxt(config, c3[ct.config.redeemSuccessOper], false, false, true))
                              if (!c3E[ct.config.redeemSuccessOper]) recursionStack.delete(ct.config.redeemSuccessOper);
                            } else {
                              b4.push(`跳过重复的 事件 调用：【兑换确定事件：${ct.config.redeemSuccessOper}】`)
                            }
                          }
                          b.push(`官方兑换码控件————${b1.join('、')}`)
                          b = b.concat(b4)
                        }
                        break
                      case 'option':
                        let na = ''
                        if (ct.config.content) {
                          na = AVGTextParserUtils.replaceValues(ct.config.content.replace(/\\w{(\d+)}/g, '').replace(/<tag\s+style=([^ >]+)>|<\/tag>/g, '').
                            replace(/\u200B/g, '').replace(/<tag[^>]*>|<\/tag>/g, ''))
                        } else if (ct.config.nres) {
                          let rc = window.bgpicSA.pi[ct.config.nres] || config.resource.image[ct.config.nres.replace('$', '')]
                          if (rc) {
                            na = rc.name.includes('_') ? rc.name.slice(0, rc.name.lastIndexOf('_')) : rc.name
                          }
                        } else if (ct.config.sres) {
                          let rc = window.bgpicSA.pi[ct.config.sres] || config.resource.image[ct.config.sres.replace('$', '')]
                          if (rc) {
                            na = rc.name.includes('_') ? rc.name.slice(0, rc.name.lastIndexOf('_')) : rc.name
                          }
                        } else if (ct.config.name) {
                          na = ct.config.name
                        }
                        //b.push(`出现选项————${na}`)
                        if (ct.config.onTouchBegan && c3[ct.config.onTouchBegan]) {
                          b.push(`图片选项：【${na}】的点进事件`)
                          if (!recursionStack.has(ct.config.onTouchBegan) || c3E[ct.config.onTouchBegan]) {
                            recursionStack.add(ct.config.onTouchBegan);
                            b = b.concat(getTxt(config, c3[ct.config.onTouchBegan], false, false, true))
                            if (!c3E[ct.config.onTouchBegan]) recursionStack.delete(ct.config.onTouchBegan);
                          } else {
                            b.push(`跳过重复的 事件 调用：【${na}】`)
                          }
                        }
                        if (ct.config.onTouchEnded && c3[ct.config.onTouchEnded]) {
                          b.push(`图片选项：【${na}】的点出事件`)
                          if (!recursionStack.has(ct.config.onTouchEnded) || c3E[ct.config.onTouchEnded]) {
                            recursionStack.add(ct.config.onTouchEnded);
                            b = b.concat(getTxt(config, c3[ct.config.onTouchEnded], false, false, true))
                            if (!c3E[ct.config.onTouchEnded]) recursionStack.delete(ct.config.onTouchEnded);
                          } else {
                            b.push(`跳过重复的 事件 调用：【${na}】`)
                          }
                        }
                        break
                      case 'image':
                        let ia = ''
                        if (ct.config.onTouchBegan || ct.config.onTouchEnded) {
                          let rc = window.bgpicSA.pi[ct.config.res] || config.resource.image[ct.config.res.replace('$', '')]
                          if (rc) {
                            ia = rc.name.includes('_') ? rc.name.slice(0, rc.name.lastIndexOf('_')) : rc.name
                          } else if (ct.config.name) {
                            ia = ct.config.name
                          }
                          //b.push(`图片选项/按钮————${ia}`)
                          if (ct.config.onTouchBegan && c3[ct.config.onTouchBegan]) {
                            b.push(`图片选项/按钮：【${ia}】的点进事件`)
                            if (!recursionStack.has(ct.config.onTouchBegan) || c3E[ct.config.onTouchBegan]) {
                              recursionStack.add(ct.config.onTouchBegan);
                              b = b.concat(getTxt(config, c3[ct.config.onTouchBegan], false, false, true))
                              if (!c3E[ct.config.onTouchBegan]) recursionStack.delete(ct.config.onTouchBegan);
                            } else {
                              b.push(`跳过重复的 事件 调用：【${ia}】`)
                            }
                          }
                          if (ct.config.onTouchEnded && c3[ct.config.onTouchEnded]) {
                            b.push(`图片选项/按钮：【${ia}】的点出事件`)
                            if (!recursionStack.has(ct.config.onTouchEnded) || c3E[ct.config.onTouchEnded]) {
                              recursionStack.add(ct.config.onTouchEnded);
                              b = b.concat(getTxt(config, c3[ct.config.onTouchEnded], false, false, true))
                              if (!c3E[ct.config.onTouchEnded]) recursionStack.delete(ct.config.onTouchEnded);
                            } else {
                              b.push(`跳过重复的 事件 调用：【${ia}】`)
                            }
                          }
                        }
                        break
                      case 'picOptionGroup':
                        if (ct.config.optionNum) {
                          let b1 = [], b2 = ct.config.conditionGroup, b3 = ct.config.productIDGroup, b4 = []
                          for (let i = 0; i < ct.config.optionNum; i++) {
                            let ia = '', st = []
                            let ib = ct.config.nPicGroup[i] || ct.config.sPicGroup[i]
                            let rc = window.bgpicSA.pi[ib] || config.resource.image[ib.replace('$', '')]
                            if (rc) {
                              ia = rc.name.includes('_') ? rc.name.slice(0, rc.name.lastIndexOf('_')) : rc.name
                            } else {
                              ia = `选项${i + 1}`
                            }
                            if (b3 && b3.length !== 0 && b3[i]) {
                              st.push(`付费出现：${window.products[b3[i]].name}`)
                            }
                            if (b2 && b2.length !== 0 && b2[i]) {
                              st.push(`条件：${b2[i]}`)
                            }
                            b1.push(`${ia}${st.length !== 0 ? `(${st.join('、')})` : ''}`)
                            if (c3[ct.config.operGroup[i]]) {
                              b4.push(`选项：【${ia}】的选择事件`)
                              if (!recursionStack.has(ct.config.operGroup[i]) || c3E[ct.config.operGroup[i]]) {
                                recursionStack.add(ct.config.operGroup[i]);
                                b4 = b4.concat(getTxt(config, c3[ct.config.operGroup[i]], false, false, true))
                                if (!c3E[ct.config.operGroup[i]]) recursionStack.delete(ct.config.operGroup[i]);
                              } else {
                                b4.push(`跳过重复的 事件 调用：【${ia}】`);
                              }
                            }
                          }
                          if (ct.config.time !== void 0) {
                            b4.push(`【计时结束且没有点击任何选项时的事件】`)
                            if (c3[ct.config.timeOverOper]) {
                              if (!recursionStack.has(ct.config.timeOverOper) || c3E[ct.config.timeOverOper]) {
                                recursionStack.add(ct.config.timeOverOper);
                                b4 = b4.concat(getTxt(config, c3[ct.config.timeOverOper], false, false, true))
                                if (!c3E[ct.config.timeOverOper]) recursionStack.delete(ct.config.timeOverOper);
                              } else {
                                b4.push(`跳过重复的 事件 调用：【计时结束且没有点击任何选项时的事件】`);
                              }
                            }
                          }
                          b.push(ct.config.time === void 0 ? `出现图片选项组————${b1.join('、')}` :
                            `出现限时图片选项组(计时${ct.config.time}秒)————${b1.join('、')}`)
                          b = b.concat(b4)
                        }
                        break
                      case 'picDisplay':
                        let pc = ct.config.picGroup.map((i, ik) => {
                          if (i && i !== 'none') {
                            let rc = window.bgpicSA.pi[i] || config.resource.image[i.replace('$', '')]
                            let name = rc ? rc.name.includes('_') ? rc.name.slice(0, rc.name.lastIndexOf('_')) : rc.name : i
                            return ct.config.conditionGroup[ik] ? `${name}(条件：${ct.config.conditionGroup[ik]})` : name
                          }
                        })
                        if (pc && pc.every(cpp => cpp)) {
                          b.push(`图片显示控件————${pc.join('、')}`)
                          if (ct.config.operGroup && ct.config.operGroup.length !== 0) {
                            ct.config.operGroup.forEach((og, ok) => {
                              if (c3[og]) {
                                b.push(`【${pc[ok]}】的点击事件`)
                                if (!recursionStack.has(og) || c3E[og]) {
                                  recursionStack.add(og);
                                  b = b.concat(getTxt(config, c3[og], false, false, true))
                                  if (!c3E[og]) recursionStack.delete(og);
                                } else {
                                  b.push(`跳过重复的 事件 调用：【${pc[ok]}】的点击事件`);
                                }
                              }
                            })
                          }
                        }
                        break
                      case 'percentage':
                        b.push(`数值条控件————最大值：${ct.config.maxNum}、最小值：${ct.config.minNum}、当前值：${ct.config.num}`)
                        break
                      case 'if':
                        let ri = v
                        if (ct.config.condition.satisfy) {
                          if (ct.config.condition.satisfy === 'all') {
                            let m = v.match(/\[if AND\(([^)]+)\)\]/)
                            if (m && m[1]) {
                              ri = `${m[1]}均满足`
                            }
                          } else if (ct.config.condition.satisfy === 'one') {
                            let m = v.match(/\[if OR\(([^)]+)\)\]/)
                            if (m && m[1]) {
                              ri = `${m[1]}满足其一`
                            }
                          }
                        } else {
                          let m = v.match(/\[if ([^)]+)\]/)
                          if (m && m[1]) {
                            ri = m[1]
                          }
                        }
                        b.push(`—— 判断开始：${ri} ——`)
                        break
                      case 'elif':
                        let riel = v
                        if (ct.config.condition.satisfy) {
                          if (ct.config.condition.satisfy === 'all') {
                            let m = v.match(/\[elif AND\(([^)]+)\)\]/)
                            if (m && m[1]) {
                              riel = `${m[1]}均满足`
                            }
                          } else if (ct.config.condition.satisfy === 'one') {
                            let m = v.match(/\[elif OR\(([^)]+)\)\]/)
                            if (m && m[1]) {
                              riel = `${m[1]}满足其一`
                            }
                          }
                        } else {
                          let m = v.match(/\[elif ([^)]+)\]/)
                          if (m && m[1]) {
                            riel = m[1]
                          }
                        }
                        b.push(`—— 判断失败后，判断：${riel} ——`)
                        break
                      case 'else':
                        b.push(`—— 判断失败后 ——`)
                        break
                      case 'endif':
                        b.push('—— 判断结束 ——')
                        break
                      case 'while':
                        let riwh = v
                        if (ct.config.condition.satisfy) {
                          if (ct.config.condition.satisfy === 'all') {
                            let m = v.match(/\[while AND\(([^)]+)\)\]/)
                            if (m && m[1]) {
                              riwh = `${m[1]}均满足`
                            }
                          } else if (ct.config.condition.satisfy === 'one') {
                            let m = v.match(/\[while OR\(([^)]+)\)\]/)
                            if (m && m[1]) {
                              riwh = `${m[1]}满足其一`
                            }
                          }
                        } else {
                          let m = v.match(/\[while ([^)]+)\]/)
                          if (m && m[1]) {
                            riwh = m[1]
                          }
                        }
                        b.push(`—— 循环开始，结束条件：${riwh} ——`)
                        break
                      case 'endwhile':
                        b.push('—— 循环结束 ——')
                        break
                      case 'operserial':
                      case 'oper':
                        c3TF = true
                        if (!pusha && !isUI) {
                          c3N = ct.config.name
                          if (c3[c3N]) { c3E[c3N] = true }
                          c3[c3N] = []
                        }
                        break
                      case 'endoperserial':
                      case 'endoper':
                        c3TF = false
                        c3N = ''
                        break
                      case 'variable':
                        b.push(`赋值：${ct.config}`)
                        break
                      case 'varGroupDisplay':
                        let varc = [], varo = []
                        ct.config.varGroup.forEach((va, k) => {
                          if (va.trim() !== '') {
                            if (ct.config.conditionGroup[k]) {
                              varc.push(`${va}(显示条件：${ct.config.conditionGroup[k]})`)
                            } else {
                              varc.push(va)
                            }
                            if (ct.config.operGroup[k] && c3[ct.config.operGroup[k]]) {
                              varo.push(`【${va}】点击事件`)
                              if (!recursionStack.has(ct.config.operGroup[k]) || c3E[ct.config.operGroup[k]]) {
                                recursionStack.add(ct.config.operGroup[k])
                                varo = varo.concat(getTxt(config, c3[ct.config.operGroup[k]], false, false, true))
                                if (!c3E[ct.config.operGroup[k]]) recursionStack.delete(ct.config.operGroup[k])
                              } else {
                                varo.push(`跳过重复的 事件 调用：【${va}】`)
                              }
                            }
                          }
                        })
                        b.push(`条件变量显示：${varc.join('、')}`)
                        b = b.concat(varo)
                        break
                      case 'textDisplay':
                        let varct = [], varot = []
                        ct.config.textGroup.forEach((vt, k) => {
                          if (vt.trim() !== '') {
                            if (ct.config.conditionGroup[k]) {
                              varct.push(`${vt}(显示条件：${ct.config.conditionGroup[k]})`)
                            } else {
                              varct.push(vt)
                            }
                            if (ct.config.operGroup[k] && c3[ct.config.operGroup[k]]) {
                              varot.push(`【${vt}】点击事件`)
                              if (!recursionStack.has(ct.config.operGroup[k]) || c3E[ct.config.operGroup[k]]) {
                                recursionStack.add(ct.config.operGroup[k])
                                varot = varot.concat(getTxt(config, c3[ct.config.operGroup[k]], false, false, true))
                                if (!c3E[ct.config.operGroup[k]]) recursionStack.delete(ct.config.operGroup[k])
                              } else {
                                varot.push(`跳过重复的 事件 调用：【${vt}】`)
                              }
                            }
                          }
                        })
                        b.push(`条件文本显示：${varct.join('、')}`)
                        b = b.concat(varot)
                        break
                      case 'varDisplay':
                        if (ct.config.bindVar) {
                          if (ct.config.bindVar.includes('@')) {
                            b.push(`变量显示：${ct.config.bindVar}`)
                          } else {
                            b.push(`变量显示：@${ct.config.bindVar}`)
                          }
                        }
                        break
                      case 'removeCurrentUI':
                        b.push(`—— 关闭当前UI ——`)
                        break
                      case 'exit':
                        b.push(`—— 退出游戏 ——`)
                        break;
                      case 'createLock':
                        if (ct.config.productID && window.products[ct.config.productID]) {
                          b.push(`type1逻辑商品锁：${window.products[ct.config.productID].name}`)
                        }
                        break
                      case 'getTime':
                        let ty = ''
                        switch (ct.config.timeType) {
                          case "stamp":
                            ty = '当前时间戳'
                            break
                          case "week":
                            ty = '当前星期几'
                            break
                          case "year":
                            ty = '当前年'
                            break
                          case "month":
                            ty = '当前月'
                            break
                          case "day":
                            ty = '当前日'
                            break
                          case "hour":
                            ty = '当前时'
                            break
                          case "minute":
                            ty = '当前分'
                            break
                          case "second":
                            ty = '当前秒'
                            break
                        }
                        b.push(`获取${ty}，赋值给<@${ct.config.varName}>`)
                        break
                      case 'getBuyCount':
                        b.push(`获取商品<${window.products[ct.config.productID].name}>购买次数，赋值给<@${ct.config.varName}>`)
                        break
                      case 'getRoleLevel':
                        b.push(`获取表白卡<${ct.config.roleID}>等级，赋值给<@${ct.config.varName}>`)
                        break
                      case "getGuardNum":
                        b.push(`获取表白卡<${ct.config.roleID}>${ct.config.guardNumType === '1' ? '守护等级' : ct.config.guardNumType === '2' ? '连续守护天数' : '累计守护天数'}，赋值给<@${ct.config.varName}>`)
                        break
                      case 'getCardNum':
                        b.push(`获取贴纸<${ct.config.cardID}>已拥有数量，赋值给<@${ct.config.varName}>`)
                        break
                      case 'getBadgeNum':
                        b.push(`获取徽章<${ct.config.badgeID}>数量，赋值给<@${ct.config.varName}>`)
                        break
                      case 'createCheatDetect':
                        b.push(`防作弊检测：${ct.config.conditionId}`)
                        break
                    }
                  }
                  break
              }
            })
            return b
          }
          if (message.value[0] === 1) {
            let a, a1 = '', isU = false
            if (cc.director._runningScene.uiLayerStack.length === 0) {
              a = cc.director._runningScene.mainLayer
              let pt = window.scenesById[a.config.id]//window.scenesSend.find(v => v.id === a.config.id)
              if (pt) {
                a1 = pt.nameNew
              } else {
                a1 = a.config.name
              }
              isU = false
            } else {
              a = cc.director._runningScene.uiLayerStack[cc.director._runningScene.uiLayerStack.length - 1]
              a1 = `UI-${a.config.id}`
              isU = true
            }
            if (a.config.uis) {
              window.ycyUIS = { ...window.ycyUIS, ...a.config.uis }
            }
            if (a.config.macros) {
              window.ycyMacros1 = { ...window.ycyMacros1, ...a.config.macros }
            }
            let ycyTxt = getTxt(a.config, a.config.commands, true, isU, true)
            let ab = [], ac = [], ad = []
            c6 = {}
            if (Object.values(c5).length > 0) {
              isU ? ad.push('——————当前UI——————') : ad.push('——————剧情——————')
              ab.push('\n\n\n')
              c5N = true
              Object.keys(c5).forEach(cm => {
                let c5T = getTxt(c5[cm], c5[cm].cmdLines, true, false, true)
                if (c5T.length !== 0) {
                  ab.push(`\n——————宏：${cm}——————`)
                  ab.push(...c5T)
                }
              })
            }
            if (Object.values(c4).length > 0) {
              if (ad.length === 0) { isU ? ad.push('——————当前UI——————') : ad.push('——————剧情——————') }
              ac.push('\n\n\n')
              Object.keys(c4).forEach(cm => {
                let c5T = getTxt(c4[cm], c4[cm].commands, true, true, true)
                if (c5T.length !== 0) {
                  ac.push(`\n——————UI：${cm}——————`)
                  ac.push(...c5T)
                }
              })
            }
            ad.push(...ycyTxt, ...ab, ...ac)
            const blob = new Blob([ad.join('\n')], { type: 'text/plain' });
            /*a标签模拟下载文件*/
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `${window.gameName}(${a1}).txt`;
            link.click();
            URL.revokeObjectURL(link.href);
          } else if (message.value[0] === 2) {
            let a1 = ''
            let xhr = new XMLHttpRequest();
            xhr.open("GET", `https://avg.163.com/avg-portal-api/game/${window.gameId}/config/scene/${message.value[1]}?em=${window.typeGame}`, true);
            xhr.onreadystatechange = function () {
              if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                  let cha = JSON.parse(JSON.parse(xhr.response).data.data)
                  let pt = window.scenesById[message.value[1]]//window.scenesSend.find(v => v.id === message.value[1])
                  if (pt) {
                    a1 = pt.nameNew
                  } else {
                    a1 = cha.name
                  }
                  if (cha.uis) {
                    window.ycyUIS = { ...window.ycyUIS, ...cha.uis }
                  }
                  if (cha.macros) {
                    window.ycyMacros1 = { ...window.ycyMacros1, ...cha.macros }
                  }
                  let ycyTxt = getTxt(cha, cha.commands, true, false, true)
                  let ab = [], ac = [], ad = []
                  c6 = {}
                  if (Object.values(c5).length > 0) {
                    ad.push('——————剧情——————')
                    ab.push('\n\n\n')
                    c5N = true
                    Object.keys(c5).forEach(cm => {
                      let c5T = getTxt(c5[cm], c5[cm].cmdLines, true, false, true)
                      if (c5T.length !== 0) {
                        ab.push(`\n——————宏：${cm}——————`)
                        ab.push(...c5T)
                      }
                    })
                  }
                  if (Object.values(c4).length > 0) {
                    if (ad.length === 0) { ad.push('——————剧情——————') }
                    ac.push('\n\n\n')
                    Object.keys(c4).forEach(cm => {
                      let c5T = getTxt(c4[cm], c4[cm].commands, true, true, true)
                      if (c5T.length !== 0) {
                        ac.push(`\n——————UI：${cm}——————`)
                        ac.push(...c5T)
                      }
                    })
                  }
                  ad.push(...ycyTxt, ...ab, ...ac)
                  const blob = new Blob([ad.join('\n')], { type: 'text/plain' });
                  /*a标签模拟下载文件*/
                  const link = document.createElement('a');
                  link.href = URL.createObjectURL(blob);
                  link.download = `${window.gameName}(${a1}).txt`;
                  link.click();
                  URL.revokeObjectURL(link.href);
                }
              }
            };
            xhr.send()
          } else if (message.value[0] === 3) {
            let aa = window.chaptersCommands || [], bb = []
            let dt = true
            async function fetchScenes() {
              if (window.chaptersCommands) {
                return Promise.resolve();
              }
              const totalRequests = window.scenesSend.length;
              const tasks = [];
              // 创建请求任务
              for (let i = 0; i < totalRequests; i++) {
                const v = window.scenesSend[i];
                const task = async () => {
                  return new Promise((resolve, reject) => {
                    const xhr = new XMLHttpRequest();
                    xhr.open("GET", `https://avg.163.com/avg-portal-api/game/${window.gameId}/config/scene/${v.id}?em=${window.typeGame}`, true);
                    xhr.onreadystatechange = function () {
                      if (xhr.readyState === 4) {
                        if (xhr.status === 200) {
                          const data = JSON.parse(JSON.parse(xhr.response).data.data);
                          aa.push({ name: v.name, config: data });
                          resolve();  // 请求成功，解决 Promise
                        } else {
                          reject(`Error: ${xhr.status}`);  // 请求失败，拒绝 Promise
                        }
                      }
                    };
                    xhr.send();
                  });
                };
                tasks.push(task);
              }
              const limit = 5;        // 最大并发数
              const chunkSize = 300;  // 每处理 300 个请求暂停
              const delayMs = 1000;   // 暂停时间 2 秒
              await limitConcurrency(tasks, limit, chunkSize, delayMs);
            }
            const downloadFile = (plotText, name) => {
              return new Promise((resolve) => {
                const blob = new Blob([plotText.join('\n')], { type: 'text/plain' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = name;
                link.click();
                requestAnimationFrame(() => {
                  URL.revokeObjectURL(link.href);
                  resolve();
                });
              });
            };
            async function processCommand() {
              for (const con of aa) {
                let a1 = ''
                let pt = window.scenesById[con.config.id]//window.scenesSend.find(v => v.id === con.config.id)
                if (pt) {
                  a1 = pt.nameNew
                } else {
                  a1 = con.config.name
                }
                if (con.config.uis) {
                  window.ycyUIS = { ...window.ycyUIS, ...con.config.uis }
                }
                if (con.config.macros) {
                  window.ycyMacros1 = { ...window.ycyMacros1, ...con.config.macros }
                }
                let ycyTxt = getTxt(con.config, con.config.commands, true, false, true)
                if (dt) {
                  bb.push({ name: `${a1}.txt`, b: new Blob([ycyTxt.join('\n')], { type: 'text/plain' }) })
                }
                else {
                  await downloadFile(ycyTxt, `${window.gameName}(${a1}).txt`)
                  await new Promise(resolve => setTimeout(resolve, 200));
                }
              }
            }
            function downloadZip(txtArray) {
              const jszipUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
              const fileSaverUrl = 'https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js';
              let loadScript = function (src) {
                return new Promise((resolve, reject) => {
                  const script = document.createElement('script');
                  script.src = src;
                  script.onload = resolve;
                  script.onerror = reject;
                  document.head.appendChild(script);
                });
              }
              let importLibraries = async function () {
                if (typeof JSZip === 'undefined') {
                  await loadScript(jszipUrl);
                }
                if (typeof saveAs === 'undefined') {
                  await loadScript(fileSaverUrl);
                }
              };
              let downloadImagesAsZip = async function (imageUrls) {
                const zip = new JSZip();
                for (const url of imageUrls) {
                  zip.file(url.name, url.b);
                }
                zip.generateAsync({ type: 'blob' })
                  .then(function (content) {
                    saveAs(content, `${window.gameName}(txt).zip`);
                  });
              }
              importLibraries().then(() => {
                downloadImagesAsZip(txtArray);
              }).catch(error => {
                alert('下载出错，请重试:', error);
              });
            }
            async function processC5(c4, dt) {
              if (Object.values(c5).length > 0) {
                for (const cm of Object.keys(c5)) {
                  let c5T = getTxt(c5[cm], c5[cm].cmdLines, true, false, true);
                  if (c5T.length !== 0) {
                    if (dt) {
                      bb.push({ name: `宏/${cm}.txt`, b: new Blob([c5T.join('\n')], { type: 'text/plain' }) });
                    } else {
                      await downloadFile(c5T, `${window.gameName}(宏-${cm}).txt`);
                      await new Promise(resolve => setTimeout(resolve, 200));
                    }
                  }
                }
              }
            }
            async function processC4(c4, dt) {
              if (Object.values(c4).length > 0) {
                for (const cm of Object.keys(c4)) {
                  let c5T = getTxt(c4[cm], c4[cm].commands, true, true, true);
                  if (c5T.length !== 0) {
                    if (dt) {
                      bb.push({ name: `UI/${cm}.txt`, b: new Blob([c5T.join('\n')], { type: 'text/plain' }) });
                    } else {
                      await downloadFile(c5T, `${window.gameName}(UI-${cm}).txt`);
                      await new Promise(resolve => setTimeout(resolve, 200));
                    }
                  }
                }
              }
            }
            fetchScenes().then(() => {
              window.chaptersCommands = aa
              processCommand()
              c6 = {}
              c5N = true
              processC5(c5, dt).then(() => {
                c = '', c1 = {}, c2 = {}, c3 = {}, c3TF = false, c3N = '', recursionStack = new Set()
                processC4(c4, dt).then(() => {
                  if (dt) { downloadZip(bb) }
                })
              })
            })
          }
        }
      }
    }
  })
}
if (/^https:\/\/www\.3000\.com\/work\/\d+\.html$/.test(location.href) || /^https:\/\/www\.3000\.com\/h5\/player\/index\.html/.test(location.href)) {
  const an = { 0: "贡献榜", 1: "粉丝榜", 2: "角色守护榜", 3: "购买数值", 4: "月票" }
  const an1 = { 0: "周榜", 1: "月榜", 2: "总榜" }
  const an2 = { "1": "第一名", "2": "第二名", "3": "第三名", "4": "第四名", "5": "第五名", "6": "第六名", "7": "第七名", "8": "第八名", "9": "第九名", "10": "第十名", "11": "第十一名", "12": "第十二名", "13": "第十三名", "14": "第十四名", "15": "第十五名", "16": "第十六名", "17": "第十七名", "18": "第十八名", "19": "第十九名", "20": "第二十名", "21": "第二十一名", "22": "第二十二名", "23": "第二十三名", "24": "第二十四名", "25": "第二十五名", "26": "第二十六名", "27": "第二十七名", "28": "第二十八名", "29": "第二十九名", "30": "第三十名" }
  const an3 = { "0": "粉丝名称", "1": "粉丝值", "2": "粉丝uid", "3": "粉丝头像", "4": "粉丝头衔", "5": "角色名", "6": "角色图片", "7": "月票数" }
  function getTextV(n) {
    const allV = window.getPCon()
    const regex = /&(s|v|sv|p|iv|x|lv)\[([^\]]+)\]/g;
    let o;
    while ((o = regex.exec(n)) !== null) {
      let s = -1;
      if (o) {
        let type = o[1], valIn = -1;
        if (/^\d+$/.test(o[2])) {
          valIn = parseInt(o[2]);
        }
        else if (/^(?!_)(?!.*?_$)((?:\d+_){3,4}\d+)+$/.test(o[2])) {
          valIn = o[2];
        }
        else if (/^(?!_)(?!.*?_$)((?:\d+_)\d+)+$/.test(o[2])) {
          let l = o[2]["split"]("_");
          s = l[1];
          valIn = parseInt(l[0])
        };
        if ("s" === type && allV[window.valueType.sa][valIn])
          window.uiShowV.savedValue.add(valIn)
        else if ("v" === type && allV[window.valueType.va][valIn])
          window.uiShowV.value.add(valIn)
        else if ("sv" === type && allV[window.valueType.st][valIn])
          window.uiShowV.stringValue.add(valIn)
        else if ("p" === type && allV[window.valueType.pv][valIn])
          window.uiShowV.payValue.add(valIn)
        else if ("x" === type && allV[window.valueType.sy][valIn])
          s === -1 && window.uiShowV.systemValue.add(valIn)
        else if ("lv" === type) {
          let mnn = valIn.split("_")
          if (mnn[0] === '3') {
            window.uiShowV.payValue.add(parseInt(mnn[2]))
          }
        }
        else if ("iv" === type && allV[window.valueType.iv][valIn]) {
          let v = allV[window.valueType.iv][valIn]
          let h = void 0 !== v.value ? deV(v).value - 1 : deV(v.init).value - 1
            , f = v.init.type
            , p = v.init.id || 0;
          switch (f) {
            case "value":
              if (p) { h = window.indexValuesMap[window.valueType.va][p][h] }
              window.uiShowV.value.add(h)
              break;
            case 'payValue':
              if (p) { h = window.indexValuesMap[window.valueType.pv][p][h] }
              window.uiShowV.payValue.add(h)
              break;
            case "stringValue":
              if (p) { h = window.indexValuesMap[window.valueType.st][p][h] }
              window.uiShowV.stringValue.add(h)
              break;
            case "savedValue":
              if (p) { h = window.indexValuesMap[window.valueType.sa][p][h] }
              window.uiShowV.savedValue.add(h)
              break;
            case "systemValue":
              if (p) { h = window.indexValuesMap[window.valueType.sy][p][h] }
              window.uiShowV.systemValue.add(h)
              break;
            default:
              break;
          }
        }
      }
    }
  }
  function get1array11V(event) {
    event.forEach(v1 => {
      if (typeof v1 !== 'object') {
        return
      }
      if (v1.type == 'all' || v1.type == 'any') {
        get1array11V(v1.args)
      } else {
        if (v1.arg1 && v1.arg1.type !== "literal") {
          let i = v1.arg1['arg1'] ? v1.arg1['arg1'] : 0
          switch (v1.arg1.type) {
            case 'value':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.va][v1.arg1['arg1']]
              window.uiCondV.value.add(i)
              break;
            case 'payValue':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.pv][v1.arg1['arg1']]
              window.uiCondV.payValue.add(i)
              break;
            case 'stringValue':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.st][v1.arg1['arg1']]
              window.uiCondV.stringValue.add(i)
              break;
            case 'savedValue':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sa][v1.arg1['arg1']]
              window.uiCondV.savedValue.add(i)
              break;
            case 'systemValue':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sy][v1.arg1['arg1']]
              window.uiCondV.systemValue.add(i)
              break;
            case 'reference':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.iv][v1.arg1['arg1']]
              let allV = window.getPCon()
              let v = allV[window.valueType.iv][i]
              let h = v.value !== undefined ? deV(v).value - 1 : deV(v.init).value - 1
                , f = v.init.type
                , p = v.init.id || 0;
              switch (f) {
                case "value":
                  if (p) { h = window.indexValuesMap[window.valueType.va][p][h] }
                  window.uiCondV.value.add(h)
                  break;
                case 'payValue':
                  if (p) { h = window.indexValuesMap[window.valueType.pv][p][h] }
                  window.uiCondV.payValue.add(h)
                  break;
                case "stringValue":
                  if (p) { h = window.indexValuesMap[window.valueType.st][p][h] }
                  window.uiCondV.stringValue.add(h)
                  break;
                case "savedValue":
                  if (p) { h = window.indexValuesMap[window.valueType.sa][p][h] }
                  window.uiCondV.savedValue.add(h)
                  break;
                case "systemValue":
                  if (p) { h = window.indexValuesMap[window.valueType.sy][p][h] }
                  window.uiCondV.systemValue.add(h)
                  break;
                default:
                  break;
              }
              break;
            case "stringLength":
              let svi = getVIdN(v1.arg1.arg1)
              if (svi.length !== 0) {
                if (window.uiCondV[svi[2]]) {
                  window.uiCondV[svi[2]].add(svi[1])
                }
              }
              break;
            case "int":
              let ivi = getVIdN(v1.arg1.arg1)
              if (ivi.length !== 0) {
                if (window.uiCondV[ivi[2]]) {
                  window.uiCondV[ivi[2]].add(ivi[1])
                }
              }
              break;
            case "random":
              if (v1.arg1.range) {
                v1.arg1.range.forEach(rr => {
                  if (rr.type !== 'literal') {
                    let ind = getVIdN(rr)
                    if (ind.length !== 0) {
                      if (window.uiCondV[ind[2]]) {
                        window.uiCondV[ind[2]].add(ind[1])
                      }
                    }
                  }
                })
              }
              break
            case 'max':
            case 'min':
              v1.arg1.args.forEach(va => {
                if (va.type !== 'literal') {
                  let ivi = getVIdN(va)
                  if (ivi.length !== 0) {
                    if (window.uiCondV[ivi[2]]) {
                      window.uiCondV[ivi[2]].add(ivi[1])
                    }
                  }
                }
              })
            default:
              let bnbc = Object.values(v1.arg1)
              get1array11V(bnbc)
              break;
          }
        }
        if (v1.arg2 && v1.arg2.type !== "literal") {
          let i = v1.arg2['arg1'] ? v1.arg2['arg1'] : 0
          switch (v1.arg2.type) {
            case 'value':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.va][v1.arg2['arg1']]
              window.uiCondV.value.add(i)
              break;
            case 'payValue':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.pv][v1.arg2['arg1']]
              window.uiCondV.payValue.add(i)
              break;
            case 'stringValue':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.st][v1.arg2['arg1']]
              window.uiCondV.stringValue.add(i)
              break;
            case 'savedValue':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sa][v1.arg2['arg1']]
              window.uiCondV.savedValue.add(i)
              break;
            case 'systemValue':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sy][v1.arg2['arg1']]
              window.uiCondV.systemValue.add(i)
              break;
            case 'reference':
              typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.iv][v1.arg2['arg1']]
              let allV = window.getPCon()
              let v = allV[window.valueType.iv][i]
              let h = v.value !== undefined ? deV(v).value - 1 : deV(v.init).value - 1
                , f = v.init.type
                , p = v.init.id || 0;
              switch (f) {
                case "value":
                  if (p) { h = window.indexValuesMap[window.valueType.va][p][h] }
                  window.uiCondV.value.add(h)
                  break;
                case 'payValue':
                  if (p) { h = window.indexValuesMap[window.valueType.pv][p][h] }
                  window.uiCondV.payValue.add(h)
                  break;
                case "stringValue":
                  if (p) { h = window.indexValuesMap[window.valueType.st][p][h] }
                  window.uiCondV.stringValue.add(h)
                  break;
                case "savedValue":
                  if (p) { h = window.indexValuesMap[window.valueType.sa][p][h] }
                  window.uiCondV.savedValue.add(h)
                  break;
                case "systemValue":
                  if (p) { h = window.indexValuesMap[window.valueType.sy][p][h] }
                  window.uiCondV.systemValue.add(h)
                  break;
                default:
                  break;
              }
              break;
            case "stringLength":
              let svi = getVIdN(v1.arg2.arg1)
              if (svi.length !== 0) {
                if (window.uiCondV[svi[2]]) {
                  window.uiCondV[svi[2]].add(svi[1])
                }
              }
              break;
            case "int":
              let ivi = getVIdN(v1.arg2.arg1)
              if (ivi.length !== 0) {
                if (window.uiCondV[ivi[2]]) {
                  window.uiCondV[ivi[2]].add(ivi[1])
                }
              }
              break;
            case "random":
              if (v1.arg2.range) {
                v1.arg2.range.forEach(rr => {
                  if (rr.type !== 'literal') {
                    let ind = getVIdN(rr)
                    if (ind.length !== 0) {
                      if (window.uiCondV[ind[2]]) {
                        window.uiCondV[ind[2]].add(ind[1])
                      }
                    }
                  }
                })
              }
              break
            case 'max':
            case 'min':
              v1.arg2.args.forEach(va => {
                if (va.type !== 'literal') {
                  let ivi = getVIdN(va)
                  if (ivi.length !== 0) {
                    if (window.uiCondV[ivi[2]]) {
                      window.uiCondV[ivi[2]].add(ivi[1])
                    }
                  }
                }
              })
            default:
              let bnbc = Object.values(v1.arg2)
              get1array11V(bnbc)
              break;
          }
        }
      }
    })
  }
  function getEventV(event) {
    event.forEach(v1 => {
      const ex = v1.expression
      const ev = v1.events
      if (ex && ex.type !== "literal" && ex.args && ex.args.length !== 0) {
        ex.args.forEach(v2 => {
          Object.keys(v2).forEach(v3 => {
            const arg = v2[v3]
            if (Array.isArray(arg)) {
              get1array11V(arg)
            } else if (typeof arg === 'object' && arg.type !== "literal") {
              let i = arg['arg1'] ? arg['arg1'] : 0
              switch (arg.type) {
                case 'value':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.va][arg['arg1']]
                  window.uiCondV.value.add(i)
                  break;
                case 'payValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.pv][arg['arg1']]
                  window.uiCondV.payValue.add(i)
                  break;
                case 'stringValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.st][arg['arg1']]
                  window.uiCondV.stringValue.add(i)
                  break;
                case 'savedValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sa][arg['arg1']]
                  window.uiCondV.savedValue.add(i)
                  break;
                case 'systemValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sy][arg['arg1']]
                  window.uiCondV.systemValue.add(i)
                  break;
                case 'reference':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.iv][arg['arg1']]
                  let allV = window.getPCon()
                  let v = allV[window.valueType.iv][i]
                  let h = v.value !== undefined ? deV(v).value - 1 : deV(v.init).value - 1
                    , f = v.init.type
                    , p = v.init.id || 0;
                  switch (f) {
                    case "value":
                      if (p) { h = window.indexValuesMap[window.valueType.va][p][h] }
                      window.uiCondV.value.add(h)
                      break;
                    case 'payValue':
                      if (p) { h = window.indexValuesMap[window.valueType.pv][p][h] }
                      window.uiCondV.payValue.add(h)
                      break;
                    case "stringValue":
                      if (p) { h = window.indexValuesMap[window.valueType.st][p][h] }
                      window.uiCondV.stringValue.add(h)
                      break;
                    case "savedValue":
                      if (p) { h = window.indexValuesMap[window.valueType.sa][p][h] }
                      window.uiCondV.savedValue.add(h)
                      break;
                    case "systemValue":
                      if (p) { h = window.indexValuesMap[window.valueType.sy][p][h] }
                      window.uiCondV.systemValue.add(h)
                      break;
                    default:
                      break;
                  }
                  break;
                case "any":
                  get1array11V(arg.args)
                  break;
                case "all":
                  get1array11V(arg.args)
                  break
                case "stringLength":
                  let svi = getVIdN(arg.arg1)
                  if (svi.length !== 0) {
                    if (window.uiCondV[svi[2]]) {
                      window.uiCondV[svi[2]].add(svi[1])
                    }
                  }
                  break;
                case "int":
                  let ivi = getVIdN(arg.arg1)
                  if (ivi.length !== 0) {
                    if (window.uiCondV[ivi[2]]) {
                      window.uiCondV[ivi[2]].add(ivi[1])
                    }
                  }
                  break;
                case "random":
                  if (arg.range) {
                    arg.range.forEach(rr => {
                      if (rr.type !== 'literal') {
                        let ind = getVIdN(rr)
                        if (ind.length !== 0) {
                          if (window.uiCondV[ind[2]]) {
                            window.uiCondV[ind[2]].add(ind[1])
                          }
                        }
                      }
                    })
                  }
                  break
                case 'max':
                case 'min':
                  arg.args.forEach(va => {
                    if (va.type !== 'literal') {
                      let ivi = getVIdN(va)
                      if (ivi.length !== 0) {
                        if (window.uiCondV[ivi[2]]) {
                          window.uiCondV[ivi[2]].add(ivi[1])
                        }
                      }
                    }
                  })
                default:
                  let bnbc = Object.values(arg)
                  get1array11V(bnbc)
                  break;
              }
            }
          })
        })
      }
      if (ev && ev.length !== 0) {
        ev.forEach(v2 => {
          if (v2.type === 'setValue') {
            if (v2.handle) {
              const en = v2.handle.values
              en.forEach(v3 => {
                const ex = v3.expression
                const val = window.getValueIndex(v3.uuid)
                const ty = val[0].slice(0, -1)
                if (window.uiCondV[ty]) {
                  window.uiCondV[ty].add(val[1])
                }
                if (ex.type === 'arg1') {
                  const xe = ex.arg1
                  if ((ty !== ex.type || val[1] !== xe.arg1 ? xe.arg1 : 0) && xe.type !== "literal") {
                    let i = xe['arg1'] ? xe['arg1'] : 0
                    switch (xe.type) {
                      case 'value':
                        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.va][xe['arg1']]
                        window.uiCondV.value.add(i)
                        break;
                      case 'payValue':
                        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.pv][xe['arg1']]
                        window.uiCondV.payValue.add(i)
                        break;
                      case 'stringValue':
                        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.st][xe['arg1']]
                        window.uiCondV.stringValue.add(i)
                        break;
                      case 'savedValue':
                        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sa][xe['arg1']]
                        window.uiCondV.savedValue.add(i)
                        break;
                      case 'systemValue':
                        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sy][xe['arg1']]
                        window.uiCondV.systemValue.add(i)
                        break;
                      case 'reference':
                        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.iv][xe['arg1']]
                        let allV = window.getPCon()
                        let v = allV[window.valueType.iv][i]
                        let h = v.value !== undefined ? deV(v).value - 1 : deV(v.init).value - 1
                          , f = v.init.type
                          , p = v.init.id || 0;
                        switch (f) {
                          case "value":
                            if (p) { h = window.indexValuesMap[window.valueType.va][p][h] }
                            window.uiCondV.value.add(h)
                            break;
                          case 'payValue':
                            if (p) { h = window.indexValuesMap[window.valueType.pv][p][h] }
                            window.uiCondV.payValue.add(h)
                            break;
                          case "stringValue":
                            if (p) { h = window.indexValuesMap[window.valueType.st][p][h] }
                            window.uiCondV.stringValue.add(h)
                            break;
                          case "savedValue":
                            if (p) { h = window.indexValuesMap[window.valueType.sa][p][h] }
                            window.uiCondV.savedValue.add(h)
                            break;
                          case "systemValue":
                            if (p) { h = window.indexValuesMap[window.valueType.sy][p][h] }
                            window.uiCondV.systemValue.add(h)
                            break;
                          default:
                            break;
                        }
                        break;
                      case "stringLength":
                        let svi = getVIdN(xe.arg1)
                        if (svi.length !== 0) {
                          if (window.uiCondV[svi[2]]) {
                            window.uiCondV[svi[2]].add(svi[1])
                          }
                        }
                        break;
                      case "int":
                        let ivi = getVIdN(xe.arg1)
                        if (ivi.length !== 0) {
                          if (window.uiCondV[ivi[2]]) {
                            window.uiCondV[ivi[2]].add(ivi[1])
                          }
                        }
                        break;
                      case "random":
                        if (xe.range) {
                          xe.range.forEach(rr => {
                            if (rr.type !== 'literal') {
                              let ind = getVIdN(rr)
                              if (ind.length !== 0) {
                                if (window.uiCondV[ind[2]]) {
                                  window.uiCondV[ind[2]].add(ind[1])
                                }
                              }
                            }
                          })
                        }
                        break
                      case 'max':
                      case 'min':
                        xe.args.forEach(va => {
                          if (va.type !== 'literal') {
                            let ivi = getVIdN(va)
                            if (ivi.length !== 0) {
                              if (window.uiCondV[ivi[2]]) {
                                window.uiCondV[ivi[2]].add(ivi[1])
                              }
                            }
                          }
                        })
                      default:
                        break;
                    }
                  }
                } else {
                  Object.keys(ex).forEach(v4 => {
                    const arg = ex[v4]
                    if (typeof arg === 'object' && arg.type !== "literal") {
                      let i = arg['arg1'] ? arg['arg1'] : 0
                      switch (arg.type) {
                        case 'value':
                          typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.va][arg['arg1']]
                          window.uiCondV.value.add(i)
                          break;
                        case 'payValue':
                          typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.pv][arg['arg1']]
                          window.uiCondV.payValue.add(i)
                          break;
                        case 'stringValue':
                          typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.st][arg['arg1']]
                          window.uiCondV.stringValue.add(i)
                          break;
                        case 'savedValue':
                          typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sa][arg['arg1']]
                          window.uiCondV.savedValue.add(i)
                          break;
                        case 'systemValue':
                          typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sy][arg['arg1']]
                          window.uiCondV.systemValue.add(i)
                          break;
                        case 'reference':
                          typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.iv][arg['arg1']]
                          let allV = window.getPCon()
                          let v = allV[window.valueType.iv][i]
                          let h = v.value !== undefined ? deV(v).value - 1 : deV(v.init).value - 1
                            , f = v.init.type
                            , p = v.init.id || 0;
                          switch (f) {
                            case "value":
                              if (p) { h = window.indexValuesMap[window.valueType.va][p][h] }
                              window.uiCondV.value.add(h)
                              break;
                            case 'payValue':
                              if (p) { h = window.indexValuesMap[window.valueType.pv][p][h] }
                              window.uiCondV.payValue.add(h)
                              break;
                            case "stringValue":
                              if (p) { h = window.indexValuesMap[window.valueType.st][p][h] }
                              window.uiCondV.stringValue.add(h)
                              break;
                            case "savedValue":
                              if (p) { h = window.indexValuesMap[window.valueType.sa][p][h] }
                              window.uiCondV.savedValue.add(h)
                              break;
                            case "systemValue":
                              if (p) { h = window.indexValuesMap[window.valueType.sy][p][h] }
                              window.uiCondV.systemValue.add(h)
                              break;
                            default:
                              break;
                          }
                          break;
                        case "stringLength":
                          let svi = getVIdN(arg.arg1)
                          if (svi.length !== 0) {
                            if (window.uiCondV[svi[2]]) {
                              window.uiCondV[svi[2]].add(svi[1])
                            }
                          }
                          break;
                        case "int":
                          let ivi = getVIdN(arg.arg1)
                          if (ivi.length !== 0) {
                            if (window.uiCondV[ivi[2]]) {
                              window.uiCondV[ivi[2]].add(ivi[1])
                            }
                          }
                          break;
                        case "random":
                          if (arg.range) {
                            arg.range.forEach(rr => {
                              if (rr.type !== 'literal') {
                                let ind = getVIdN(rr)
                                if (ind.length !== 0) {
                                  if (window.uiCondV[ind[2]]) {
                                    window.uiCondV[ind[2]].add(ind[1])
                                  }
                                }
                              }
                            })
                          }
                          break
                        case 'max':
                        case 'min':
                          arg.args.forEach(va => {
                            if (va.type !== 'literal') {
                              let ivi = getVIdN(va)
                              if (ivi.length !== 0) {
                                if (window.uiCondV[ivi[2]]) {
                                  window.uiCondV[ivi[2]].add(ivi[1])
                                }
                              }
                            }
                          })
                          break
                        default:
                          break;
                      }
                    }
                  })
                }
              })
            }
          } else if (v2.type === 'callUI' && window.getCallUIV) {
            if (!(v2.handle.type && v2.handle.type === 'system')) {
              const a = gameInfoSy.viewMap[v2.handle.uuid];
              if (a && !window.UIName.has(a.uuid)) {
                window.UIName.add(a.uuid)
                getStyleS(a)
              }
            }
          }
        })
      }
    })
  }
  function getStyleS(ui) {
    switch (ui.type) {
      case "container":
        if (ui.children && ui.children.length !== 0) {
          ui.children.forEach(v => {
            const a = gameInfoSy.viewMap[v.ref];
            if (a && !window.UIName.has(a.uuid)) {
              window.UIName.add(a.uuid)
              getStyleS(a)
              if (v.events && v.events.length !== 0) {
                getEventV(v.events)
              }
            }
          })
        }
        if (ui.events && ui.events.length !== 0) {
          getEventV(ui.events)
        }
        break;
      case 'text':
        if (ui.content && ui.content.value) {
          ui.content.value.forEach(v => {
            getTextV(v.data)
          })
        }
        if (ui.events) {
          getEventV(ui.events)
        }
        break;
      case "input":
        if (ui.content && ui.content.value) {
          window.uiShowV[ui.content.value.type] && window.uiShowV[ui.content.value.type].add(ui.content.value.arg1)
        }
        break;
      case 'bar':
        if (ui.content && ui.content.value) {
          ui.content.value.progress && Object.values(ui.content.value.progress).forEach(v => {
            if (v.type !== "literal") {
              let i = v['arg1'] ? v['arg1'] : 0
              switch (v.type) {
                case 'value':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.va][v['arg1']]
                  window.uiShowV.value.add(i)
                  break;
                case 'payValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.pv][v['arg1']]
                  window.uiShowV.payValue.add(i)
                  break;
                case 'stringValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.st][v['arg1']]
                  window.uiShowV.stringValue.add(i)
                  break;
                case 'savedValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sa][v['arg1']]
                  window.uiShowV.savedValue.add(i)
                  break;
                case 'systemValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sy][v['arg1']]
                  window.uiShowV.systemValue.add(i)
                  break;
                case 'reference':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.iv][v['arg1']]
                  let allV = window.getPCon()
                  let v = allV[window.valueType.iv][i]
                  let h = v.value !== undefined ? deV(v).value - 1 : deV(v.init).value - 1
                    , f = v.init.type
                    , p = v.init.id || 0;
                  switch (f) {
                    case "value":
                      if (p) { h = window.indexValuesMap[window.valueType.va][p][h] }
                      window.uiShowV.value.add(h)
                      break;
                    case 'payValue':
                      if (p) { h = window.indexValuesMap[window.valueType.pv][p][h] }
                      window.uiShowV.payValue.add(h)
                      break;
                    case "stringValue":
                      if (p) { h = window.indexValuesMap[window.valueType.st][p][h] }
                      window.uiShowV.stringValue.add(h)
                      break;
                    case "savedValue":
                      if (p) { h = window.indexValuesMap[window.valueType.sa][p][h] }
                      window.uiShowV.savedValue.add(h)
                      break;
                    case "systemValue":
                      if (p) { h = window.indexValuesMap[window.valueType.sy][p][h] }
                      window.uiShowV.systemValue.add(h)
                      break;
                    default:
                      break;
                  }
                  break;
                default:
                  break;
              }
            }
          })
          ui.content.value.normal && Object.values(ui.content.value.normal).forEach(v => {
            if (v.type !== "literal") {
              let i = v['arg1'] ? v['arg1'] : 0
              switch (v.type) {
                case 'value':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.va][v['arg1']]
                  window.uiShowV.value.add(i)
                  break;
                case 'payValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.pv][v['arg1']]
                  window.uiShowV.payValue.add(i)
                  break;
                case 'stringValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.st][v['arg1']]
                  window.uiShowV.stringValue.add(i)
                  break;
                case 'savedValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sa][v['arg1']]
                  window.uiShowV.savedValue.add(i)
                  break;
                case 'systemValue':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sy][v['arg1']]
                  window.uiShowV.systemValue.add(i)
                  break;
                case 'reference':
                  typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.iv][v['arg1']]
                  let allV = window.getPCon()
                  let v = allV[window.valueType.iv][i]
                  let h = v.value !== undefined ? deV(v).value - 1 : deV(v.init).value - 1
                    , f = v.init.type
                    , p = v.init.id || 0;
                  switch (f) {
                    case "value":
                      if (p) { h = window.indexValuesMap[window.valueType.va][p][h] }
                      window.uiShowV.value.add(h)
                      break;
                    case 'payValue':
                      if (p) { h = window.indexValuesMap[window.valueType.pv][p][h] }
                      window.uiShowV.payValue.add(h)
                      break;
                    case "stringValue":
                      if (p) { h = window.indexValuesMap[window.valueType.st][p][h] }
                      window.uiShowV.stringValue.add(h)
                      break;
                    case "savedValue":
                      if (p) { h = window.indexValuesMap[window.valueType.sa][p][h] }
                      window.uiShowV.savedValue.add(h)
                      break;
                    case "systemValue":
                      if (p) { h = window.indexValuesMap[window.valueType.sy][p][h] }
                      window.uiShowV.systemValue.add(h)
                      break;
                    default:
                      break;
                  }
                  break;
                default:
                  break;
              }
            }
          })
        }
        break;
      case "button":
        if (ui.events && ui.events.length !== 0) {
          getEventV(ui.events)
        }
        break;
      case "image":
        if (ui.events && ui.events.length !== 0) {
          getEventV(ui.events)
        }
        break;
      case "timer":
        if (ui.content && ui.content.step.type !== "literal") {
          let vin = getVIdN(n.content.step)
          if (vin.length > 0) {
            if (window.uiCondV[vin[2]]) {
              window.uiCondV[vin[2]].add(vin[1])
            }
          }
        }
        if (ui.events && ui.events.length !== 0) {
          getEventV(ui.events)
        }
        break
      default:
        break;
    }
  }
  function getVIdN(arg) {
    let i = arg['arg1'] ? arg['arg1'] : 0
    switch (arg.type) {
      case 'value':
        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.va][arg['arg1']]
        return [window.gameInfoSy.values[i].name, i, 'value']
      case 'payValue':
        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.pv][arg['arg1']]
        return [window.gameInfoSy.payValues[i].name, i, 'payValue']
      case 'stringValue':
        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.st][arg['arg1']]
        return [window.gameInfoSy.stringValues[i].name, i, 'stringValue']
      case 'savedValue':
        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sa][arg['arg1']]
        return [window.gameInfoSy.savedValues[i].name, i, 'savedValue']
      case 'systemValue':
        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.sy][arg['arg1']]
        return [window.gameInfoSy.systemValues[i].name, i, 'systemValue']
      case 'indexValue':
        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.iv][arg['arg1']]
        return [window.gameInfoSy.indexValues[i].name, i, 'indexValue']
      case 'reference':
        typeof i === 'number' ? '' : i = window.indexValuesMap[window.valueType.iv][arg['arg1']]
        let allV = window.getPCon()
        let v = allV[window.valueType.iv][i]
        let h = v.value !== undefined ? deV(v).value - 1 : deV(v.init).value - 1
          , f = v.init.type
          , p = v.init.id || 0;
        switch (f) {
          case "value":
            if (p) { h = window.indexValuesMap[window.valueType.va][p][h] }
            return [window.gameInfoSy.values[h].name, h, "value"]
          case 'payValue':
            if (p) { h = window.indexValuesMap[window.valueType.pv][p][h] }
            return [window.gameInfoSy.payValues[h].name, h, 'payValue']
          case "stringValue":
            if (p) { h = window.indexValuesMap[window.valueType.st][p][h] }
            return [window.gameInfoSy.stringValues[h].name, h, "stringValue"]
          case "savedValue":
            if (p) { h = window.indexValuesMap[window.valueType.sa][p][h] }
            return [window.gameInfoSy.savedValues[h].name, h, "savedValue"]
          case "systemValue":
            if (p) { h = window.indexValuesMap[window.valueType.sy][p][h] }
            return [window.gameInfoSy.systemValues[h].name, h, "systemValue"]
          case "indexValue":
            if (p) { h = window.indexValuesMap[window.valueType.iv][p][h] }
            return [window.gameInfoSy.indexValues[h].name, h, "indexValue"]
          default:
            return []
        }
      default:
        return []
    }
  }
  function timestampToDateTime(timestamp) {
    if (timestamp.toString().length === 10) {
      timestamp *= 1000;
    }
    const date = new Date(timestamp);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // 月份从0开始，所以加1
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }
  function getContainC(v) {
    let leftV = '', rightV = ''
    if (v.arg1) {
      switch (v.arg1.type) {
        case "string":
          const valueStr = v.arg1.value ? v.arg1.value : ''
          leftV = `${JSON.stringify(valueStr)}`
          break;
        case "literal":
          const value = v.arg1.value ? v.arg1.value : 0
          leftV = `${value}`
          break;
        default:
          let vi = getVIdN(v.arg1)
          if (vi.length !== 0) {
            leftV = `${vi[0]}(${v.arg1.type}[${vi[1]}])`
            if (window.uiCondV[vi[2]]) {
              window.uiCondV[vi[2]].add(vi[1])
            }
          }
          break;
      }
    }
    if (v.arg2) {
      switch (v.arg2.type) {
        case "string":
          const valueStr = v.arg2.value ? v.arg2.value : ''
          rightV = `${JSON.stringify(valueStr)}`
          break;
        case "literal":
          const value = v.arg2.value ? v.arg2.value : 0
          rightV = `${value}`
          break;
        default:
          let vi = getVIdN(v.arg2)
          if (vi.length !== 0) {
            rightV = `${vi[0]}(${v.arg2.type}[${vi[1]}])`
            if (window.uiCondV[vi[2]]) {
              window.uiCondV[vi[2]].add(vi[1])
            }
          }
          break;
      }
    }
    return v.type === 'contain' ? `${leftV} 包含 ${rightV}` : `${leftV} 不包含 ${rightV}`
  }
  function getCondTS(v) {
    let condition = [], mnkn = false
    if (v.type === 'all' || v.type === 'any') {
      if (v.args) {
        let a = getCondT(v)
        condition.push(`(${a})`)
      }
    } else if (v.type === 'contain' || v.type === 'nin') {
      let a = getContainC(v)
      condition.push(a)
    } else if (v.type === "literal") {
      condition.push(v.value ? `${v.value}` : '0')
    } else {
      let leftV = '', rightV = ''
      if (v.arg1) {
        if (v.arg1.type) {
          switch (v.arg1.type) {
            case "literal":
              const value = v.arg1.value ? v.arg1.value : 0
              leftV = `${value}`
              break;
            case "string":
              const valueStr = v.arg1.value ? v.arg1.value : ''
              leftV = `${JSON.stringify(valueStr)}`
              break;
            case "stringLength":
              let svi = getVIdN(v.arg1.arg1)
              if (svi.length !== 0) {
                leftV = `${svi[0]}(${v.arg1.arg1.type}[${svi[1]}])的长度`
                if (window.uiCondV[svi[2]]) {
                  window.uiCondV[svi[2]].add(svi[1])
                }
              }
              break;
            case "int":
              let ivi = getVIdN(v.arg1.arg1)
              if (ivi.length !== 0) {
                leftV = `${ivi[0]}(${v.arg1.arg1.type}[${ivi[1]}])取整`
                if (window.uiCondV[ivi[2]]) {
                  window.uiCondV[ivi[2]].add(ivi[1])
                }
              }
              break;
            case "random":
              if (v.arg1.range) {
                let rl = 0, rr = 0
                if (v.arg1.range[0].type === 'literal') {
                  rl = v.arg1.range[0].value || 0
                } else {
                  let ind = getVIdN(v.arg1.range[0])
                  let rn = ind[0] ? ind[0] : `uuid为${gameInfoSy[ind[2] + 's'][ind[1]].uuid}的数值`
                  rl = `${rn}(${ind[2] + 's'}[${ind[1]}])`
                  if (window.uiCondV[ind[2]]) {
                    window.uiCondV[ind[2]].add(ind[1])
                  }
                }
                if (v.arg1.range[1].type === 'literal') {
                  rr = v.arg1.range[1].value || 0
                } else {
                  let ind = getVIdN(v.arg1.range[1])
                  let rn = ind[0] ? ind[0] : `uuid为${gameInfoSy[ind[2] + 's'][ind[1]].uuid}的数值`
                  rr = `${rn}(${ind[2] + 's'}[${ind[1]}])`
                  if (window.uiCondV[ind[2]]) {
                    window.uiCondV[ind[2]].add(ind[1])
                  }
                }
                leftV = `${rl}-${rr}取随机数`
              }
              break
            case "listValue":
              if (/^(?!_)(?!.*?_$)((?:\d+_){3,4}\d+)+$/.test(v.arg1.arg1)) {
                let mnn = v.arg1.arg1.split("_")
                let roN = ''
                if (mnn[0] === '2') {
                  let rroN = parent.allRoles.find(v => v.id === mnn[2])
                  if (rroN) { roN = `(${rroN.name})` }
                } else if (mnn[0] === '3') {
                  let rroN = window.gameInfoSy.payValues[mnn[2]]
                  if (rroN) { roN = `(${rroN.name || `payValues[${mnn[2]}]`})` }
                }
                leftV = `${an[mnn[0]] ? an[mnn[0]] : ''}${roN}${an1[mnn[1]] ? an1[mnn[1]] : ''}${an2[mnn[mnn.length - 2]] ? an2[mnn[mnn.length - 2]] : ''}${an3[mnn[mnn.length - 1]] ? '的' + an3[mnn[mnn.length - 1]] : ''}`
              }
              break;
            case 'max':
            case 'min':
              let mami = []
              v.arg1.args.forEach(va => {
                if (va.type === 'literal') {
                  mami.push(va.value || 0)
                } else {
                  let ivi = getVIdN(va)
                  if (ivi.length !== 0) {
                    mami.push(`${ivi[0]}(${ivi[2]}[${ivi[1]}])`)
                    if (window.uiCondV[ivi[2]]) {
                      window.uiCondV[ivi[2]].add(ivi[1])
                    }
                  }
                }
              })
              if (mami.length !== 0) {
                rightV = `(${mami.join('、')})中的${v.arg1.type === 'max' ? '最大值' : '最小值'}`
              }
              break
            case "getDight":
              let vi = getVIdN(v.arg1.arg1)
              if (vi.length !== 0) {
                leftV = `${vi[0]}(${vi[2]}[${vi[1]}])的数值数字反转(例:12反转后为21)之后的${v.arg1.arg2}位(不存在就是0)`
                if (window.uiCondV[vi[2]]) {
                  window.uiCondV[vi[2]].add(vi[1])
                }
              }
              break
            // case "average":
            //   break
            default:
              if (v.arg1.arg2) {
                let arr = `${getCondTS(v.arg1.arg1).join('')}`
                let brr = `${getCondTS(v.arg1.arg2).join('')}`
                leftV = `(${arr} ${v.arg1.type} ${brr})`
              } else {
                let teshu = new Set([20, 21, 22, 23])
                let vi = getVIdN(v.arg1)
                if (vi.length !== 0) {
                  if (v.arg1.type === "systemValue" && teshu.has(vi[1])) {
                    if (vi[1] === 20) {
                      let roleCName = parent.allRoles.find(mm => mm.id === v.arg1.args[0]).name
                      leftV = `角色《${roleCName}》(${timestampToDateTime(v.arg1.args[1])}到${timestampToDateTime(v.arg1.args[2])})的${vi[0]}`
                    } else {
                      leftV = `(${timestampToDateTime(v.arg1.args[0])}到${timestampToDateTime(v.arg1.args[1])})的${vi[0]}`
                    }
                  } else {
                    leftV = `${vi[0]}(${v.arg1.type}[${vi[1]}])`
                  }
                  if (window.uiCondV[vi[2]]) {
                    window.uiCondV[vi[2]].add(vi[1])
                  }
                }
              }
              break;
          }
        } else {
          mnkn = true
          let vi = getVIdN(v)
          if (vi.length !== 0) {
            condition.push(`${vi[0]}(${v.type}[${vi[1]}])`)
            if (window.uiCondV[vi[2]]) {
              window.uiCondV[vi[2]].add(vi[1])
            }
          }
        }
      }
      if (v.arg2) {
        if (v.arg2.type) {
          switch (v.arg2.type) {
            case "literal":
              const value = v.arg2.value ? v.arg2.value : 0
              rightV = `${value}`
              break;
            case "string":
              const valueStr = v.arg2.value ? v.arg2.value : ''
              rightV = `${JSON.stringify(valueStr)}`
              break;
            case "stringLength":
              let svi = getVIdN(v.arg2.arg1)
              if (svi.length !== 0) {
                rightV = `${svi[0]}(${v.arg2.arg1.type}[${svi[1]}])的长度`
                if (window.uiCondV[svi[2]]) {
                  window.uiCondV[svi[2]].add(svi[1])
                }
              }
              break;
            case "int":
              let ivi = getVIdN(v.arg2.arg1)
              if (ivi.length !== 0) {
                rightV = `${ivi[0]}(${v.arg2.arg1.type}[${ivi[1]}])取整`
                if (window.uiCondV[ivi[2]]) {
                  window.uiCondV[ivi[2]].add(ivi[1])
                }
              }
              break;
            case "random":
              if (v.arg2.range) {
                let rl = 0, rr = 0
                if (v.arg2.range[0].type === 'literal') {
                  rl = v.arg2.range[0].value || 0
                } else {
                  let ind = getVIdN(v.arg2.range[0])
                  let rn = ind[0] ? ind[0] : `uuid为${gameInfoSy[ind[2] + 's'][ind[1]].uuid}的数值`
                  rl = `${rn}(${ind[2] + 's'}[${ind[1]}])`
                  if (window.uiCondV[ind[2]]) {
                    window.uiCondV[ind[2]].add(ind[1])
                  }
                }
                if (v.arg2.range[1].type === 'literal') {
                  rr = v.arg2.range[1].value || 0
                } else {
                  let ind = getVIdN(v.arg2.range[1])
                  let rn = ind[0] ? ind[0] : `uuid为${gameInfoSy[ind[2] + 's'][ind[1]].uuid}的数值`
                  rr = `${rn}(${ind[2] + 's'}[${ind[1]}])`
                  if (window.uiCondV[ind[2]]) {
                    window.uiCondV[ind[2]].add(ind[1])
                  }
                }
                rightV = `${rl}-${rr}取随机数`
              }
              break
            case "listValue":
              if (/^(?!_)(?!.*?_$)((?:\d+_){3,4}\d+)+$/.test(v.arg2.arg1)) {
                let mnn = v.arg2.arg1.split("_")
                let roN = ''
                if (mnn[0] === '2') {
                  let rroN = parent.allRoles.find(v => v.id === mnn[2])
                  if (rroN) { roN = `(${rroN.name})` }
                } else if (mnn[0] === '3') {
                  let rroN = window.gameInfoSy.payValues[mnn[2]]
                  if (rroN) { roN = `(${rroN.name || `payValues[${mnn[2]}]`})` }
                }
                rightV = `${an[mnn[0]] ? an[mnn[0]] : ''}${roN}${an1[mnn[1]] ? an1[mnn[1]] : ''}${an2[mnn[mnn.length - 2]] ? an2[mnn[mnn.length - 2]] : ''}${an3[mnn[mnn.length - 1]] ? '的' + an3[mnn[mnn.length - 1]] : ''}`
              }
              break;
            case 'max':
            case 'min':
              let mami = []
              v.arg2.args.forEach(va => {
                if (va.type === 'literal') {
                  mami.push(va.value || 0)
                } else {
                  let ivi = getVIdN(va)
                  if (ivi.length !== 0) {
                    mami.push(`${ivi[0]}(${ivi[2]}[${ivi[1]}])`)
                    if (window.uiCondV[ivi[2]]) {
                      window.uiCondV[ivi[2]].add(ivi[1])
                    }
                  }
                }
              })
              if (mami.length !== 0) {
                rightV = `(${mami.join('、')})中的${v.arg2.type === 'max' ? '最大值' : '最小值'}`
              }
              break
            case "getDight":
              let vi = getVIdN(v.arg2.arg1)
              if (vi.length !== 0) {
                rightV = `${vi[0]}(${vi[2]}[${vi[1]}])的数值数字反转(例:12反转后为21)之后的${v.arg2.arg2}位(不存在就是0)`
                if (window.uiCondV[vi[2]]) {
                  window.uiCondV[vi[2]].add(vi[1])
                }
              }
              break
            // case "average":
            //   break
            default:
              if (v.arg2.arg2) {
                let arr = `${getCondTS(v.arg2.arg1).join('')}`
                let brr = `${getCondTS(v.arg2.arg2).join('')}`
                rightV = `(${arr} ${v.arg2.type} ${brr})`
              } else {
                let teshu = new Set([20, 21, 22, 23])
                let vi = getVIdN(v.arg2)
                if (vi.length !== 0) {
                  if (v.arg2.type === "systemValue" && teshu.has(vi[1])) {
                    if (vi[1] === 20) {
                      let roleCName = parent.allRoles.find(mm => mm.id === v.arg1.args[0]).name
                      rightV = `角色《${roleCName}》(${timestampToDateTime(v.arg1.args[1])}到${timestampToDateTime(v.arg1.args[2])})的${vi[0]}`
                    } else {
                      rightV = `(${timestampToDateTime(v.arg2.args[0])}到${timestampToDateTime(v.arg2.args[1])})的${vi[0]}`
                    }
                  } else {
                    rightV = `${vi[0]}(${v.arg2.type}[${vi[1]}])`
                  }
                  if (window.uiCondV[vi[2]]) {
                    window.uiCondV[vi[2]].add(vi[1])
                  }
                }
              }
              break;
          }
        } else {
          mnkn = true
          let vi = getVIdN(v)
          if (vi.length !== 0) {
            condition.push(`${vi[0]}(${v.type}[${vi[1]}])`)
            if (window.uiCondV[vi[2]]) {
              window.uiCondV[vi[2]].add(vi[1])
            }
          }
        }
      }
      mnkn ? condition.push(`${leftV}${rightV}`) : condition.push(`${leftV} ${v.type} ${rightV}`)
    }
    return condition
  }
  function getCondT(cond) {
    if (cond.args && cond.args.length !== 0) {
      let conditions = []
      cond.args.forEach(v => {
        conditions.push([...getCondTS(v)])
      })
      return cond.type === 'all' ? conditions.join(' 并且 ') : cond.type === 'any' ? conditions.join(' 或者 ') : conditions.join('')
    } else {
      return ''
    }
  }
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'modifySyValue' && window.isSy) {
        if (window.getPCon) {
          const syNeedModifyV = message.value;
          window.ismodifyV = true;
          window.nowV = [];
          const syV = getPCon();
          let sysV = syV[window.valueType.sy];
          syNeedModifyV.forEach(v => {
            if (v.type === 'system') {
              const index = sysV.findIndex(item => item.uuid === v.content[1]);
              if (index > -1) {
                const oldValue = window.deV(sysV[index]);
                oldValue.value = parseInt(v.value, 10);
                sysV[index] = window.enV(oldValue);
              }
            } else {
              const newValue = v.type === 'string'
                ? { uuid: v.content[1], expression: { type: "arg1", arg1: { type: "string", value: v.value } } }
                : { uuid: v.content[1], expression: { type: "arg1", arg1: { type: "literal", value: parseInt(v.value, 10) } } };
              window.nowV.push(newValue);
            }
          });
          syV[window.valueType.sy] = sysV;
          gameF.updatePlayContext(syV);
          if (window.gameF && typeof gameF.updatePlayContext === 'function') {
            window.ismodifyV = false;
            window.modifyValue(getPCon(), window.nowV).then(result => {
              gameF.updatePlayContext(result);
            }).catch(error => {
              console.error('Failed to modify values:', error);
              window.ismodifyV = true;
            });
          } else {
            window.ismodifyV = true;
          }
        } else {
          alert('快去填写开局输入的代码！！！如果已经输入，请走一点剧情！！')
        }
      } else if (message.type === 'syCodeModify' && window.isSy) {
        if (window.gameF && window.modifyValue && window.getPCon) {
          const syCode = message.value
          let nowV = []
          if (!window.beforeFFV) {
            window.beforeFFV = window.gameInfoSy.payValues.map(v => { return { uuid: v.uuid, value: v.init.value || 0 } })
          }
          function pv(index, value) {
            const findV = window.gameInfoSy.payValues[index]
            nowV.push({ "uuid": findV.uuid, "expression": { "type": "arg1", "arg1": { "type": "literal", "value": value } } })
          }
          function va(index, value) {
            const findV = window.gameInfoSy.values[index]
            nowV.push({ "uuid": findV.uuid, "expression": { "type": "arg1", "arg1": { "type": "literal", "value": value } } })
          }
          function sa(index, value) {
            const findV = window.gameInfoSy.savedValues[index]
            nowV.push({ "uuid": findV.uuid, "expression": { "type": "arg1", "arg1": { "type": "literal", "value": value } } })
          }
          function st(index, value) {
            const findV = window.gameInfoSy.stringValues[index]
            nowV.push({ "uuid": findV.uuid, "expression": { "type": "arg1", "arg1": { "type": "string", "value": value } } })
          }
          if (syCode[1] === 2) {
            pv = function (index, value) {
              window.beforeFFV[index].value = value
              const findV = window.gameInfoSy.payValues[index]
              nowV.push({ "uuid": findV.uuid, "expression": { "type": "arg1", "arg1": { "type": "literal", "value": value } } })
            }
          }
          try {
            const executeCommands = new Function('pv', 'va', 'sa', 'st', syCode[0]);
            executeCommands(pv, va, sa, st);
          } catch (e) {
            alert(`代码有错误哦！快检查！具体错误${e}`)
          }
          window.modifyValue(window.getPCon(), nowV).then(result => { gameF.updatePlayContext(result) })
          if (syCode[1] === 2) {
            parent.syUP = true
            window.upSavePV(window.beforeFFV, false).then(result => {
              parent.syUP = false
            })
          }
        } else {
          alert('快去填写开局输入的代码！！！如果已经输入，请走一点剧情！！')
        }
      } else if (message.type === 'syResetV' && window.isSy) {
        if (window.gameF && window.modifyValue && window.getPCon) {
          let nowV = []
          window.gameInfoSy.payValues.forEach(v => {
            const syV = { "uuid": v.uuid, "expression": { "type": "arg1", "arg1": { "type": "literal", "value": v.init.value } } }
            nowV.push(syV)
          })
          window.gameInfoSy.savedValues.forEach(v => {
            const syV = { "uuid": v.uuid, "expression": { "type": "arg1", "arg1": { "type": "literal", "value": v.init.value } } }
            nowV.push(syV)
          })
          if (window.confirm('要重置单档数值(values)吗？')) {
            window.gameInfoSy.values.forEach(v => {
              const syV = { "uuid": v.uuid, "expression": { "type": "arg1", "arg1": { "type": "literal", "value": v.init.value } } }
              nowV.push(syV)
            })
          }
          window.modifyValue(window.getPCon(), nowV).then(result => { gameF.updatePlayContext(result) })
        } else {
          alert('快去填写开局输入的代码！！！如果已经输入，请走一点剧情！！')
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'downloadSyValue' && window.isSy) {
        if (message.value === 3) {
          let downString = []
          window.gameInfoSy.payValues.forEach((v, k) => {
            if (k === 0) {
              downString.push('/***** payValues(购买(全档)数值) *****/')
            }
            const valueN = v.value ? v.value : 0;
            downString.push(`pv(${k},${valueN})          /*${v.name}*/`)
          })
          window.gameInfoSy.values.forEach((v, k) => {
            if (k === 0) {
              downString.push('\n\n/***** values(单档数值) *****/')
            }
            const valueN = v.value ? v.value : 0;
            downString.push(`va(${k},${valueN})          /*${v.name}*/`)
          })
          window.gameInfoSy.savedValues.forEach((v, k) => {
            if (k === 0) {
              downString.push('\n\n/***** savedValues(永久数值) *****/')
            }
            const valueN = v.value ? v.value : 0;
            downString.push(`sa(${k},${valueN})          /*${v.name}*/`)
          })
          window.gameInfoSy.stringValues.forEach((v, k) => {
            if (k === 0) {
              downString.push('\n\n/***** stringValues(字符数值) *****/')
            }
            const valueN = v.value ? v.value : v.init.value;
            downString.push(`st(${k},${JSON.stringify(valueN)})          /*${v.name}*/`)
          })
          const blob = new Blob([downString.join('\n')], { type: 'text/plain' });
          /*a标签模拟下载文件*/
          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          link.download = window.gameInfoSy.name + '(插件使用)' + '.txt';
          link.click();
          URL.revokeObjectURL(link.href);
        } else {
          let downString = ['const valueArray = [']
          window.gameInfoSy.payValues.forEach((v, k) => {
            if (k === 0) {
              downString.push('/***** payValues(全档(购买)数值) *****/')
            }
            const valueN = v.value ? v.value : 0;
            downString.push(`{ "uuid": '${v.uuid}', "valueName": '${v.name}', "expression": { "type": "arg1", "arg1": { "type": "literal", "value": ${valueN} } } },`)
          })
          window.gameInfoSy.values.forEach((v, k) => {
            if (k === 0) {
              downString.push('\n\n/***** values(单档数值) *****/')
            }
            const valueN = v.value ? v.value : 0;
            downString.push(`{ "uuid": '${v.uuid}', "valueName": '${v.name}', "expression": { "type": "arg1", "arg1": { "type": "literal", "value": ${valueN} } } },`)
          })
          window.gameInfoSy.savedValues.forEach((v, k) => {
            if (k === 0) {
              downString.push('\n\n/***** savedValues(永久数值) *****/')
            }
            const valueN = v.value ? v.value : 0;
            downString.push(`{ "uuid": '${v.uuid}', "valueName": '${v.name}', "expression": { "type": "arg1", "arg1": { "type": "literal", "value": ${valueN} } } },`)
          })
          window.gameInfoSy.stringValues.forEach((v, k) => {
            if (k === 0) {
              downString.push('\n\n/***** stringValues(字符串数值) *****/')
            }
            const valueN = v.value ? v.value : v.init.value;
            downString.push(`{ "uuid": '${v.uuid}', "valueName": '${v.name}', "expression": { "type": "arg1", "arg1": { "type": "string", "value": ${JSON.stringify(valueN)} } } },`)
          })
          if (message.value === 1) {
            window.gameInfoSy.indexValues.forEach((v, k) => {
              if (k === 0) {
                downString.push('\n\n/***** indexValues(索引数值，只读数值) *****/')
              }
              const valueN = v.value ? v.value : 0;
              downString.push(`{ "uuid": '${v.uuid}', "valueName": '${v.name}', "expression": { "type": "arg1", "arg1": { "type": "literal", "value": ${valueN} } } },`)
            })
            window.gameInfoSy.systemValues.forEach((v, k) => {
              if (k === 0) {
                downString.push('\n\n/***** systemValues(系统数值) *****/')
              }
              const valueN = v.value ? v.value : 0;
              downString.push(`{ "uuid": '${v.uuid}', "valueName": '${v.name}', "expression": { "type": "arg1", "arg1": { "type": "literal", "value": ${valueN} } } },`)
            })
          }
          downString.push(']\nvalueArray.forEach(v => { t.push(v) });')
          //downString = downString.replace(`{ "uuid": 'Ajax插件的提示', "valueName": '${window.gameInfoSy.name}的单档数值', "expression": { "type": "arg1", "arg1": { "type": "literal", "value": 0 } } },\n`, '').replace(`{ "uuid": 'Ajax插件的提示', "valueName": '${window.gameInfoSy.name}的全档数值', "expression": { "type": "arg1", "arg1": { "type": "literal", "value": 0 } } },\n`, '')
          const blob = new Blob([downString.join('\n')], { type: 'text/plain' });
          /*a标签模拟下载文件*/
          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          link.download = window.gameInfoSy.name + '.txt';
          link.click();
          URL.revokeObjectURL(link.href);
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'syNotLogin' && window.isSy) {
        const syNotLogin = message.value
        if (syNotLogin) {
          if (ajax_interceptor_qoweifjqon.settings.ajaxInterceptor_syT === 0 || (Date.now() - ajax_interceptor_qoweifjqon.settings.ajaxInterceptor_syT) > 24 * 60 * 60 * 1000) {
            const nowTime = Date.now()
            ajax_interceptor_qoweifjqon.settings.ajaxInterceptor_syT = nowTime
            const customEvent3 = new CustomEvent("syNotLoginTime", {
              detail: { value: nowTime }
            });
            window.dispatchEvent(customEvent3);
          }
        }
      } else if (message.type === 'syFF' && window.isSy) {
        const syFF = message.value
        if (syFF) {
          window.syFFeng = true
          window.skipU = false;
          if (window.getPCon && !window.isSaveFFValues) {
            if (window.confirm('把全档给清零了哦(上传就是0，免得用这种方式，数值不对就给号封了)')) {
              window.gameInfoSy.payValues.forEach((v, k) => {
                window.gameInfoSy.payValues[k].value = v.init.value
              })
            }
            window.beforeFFV = window.gameInfoSy.payValues
            window.isSaveFFValues = !window.isSaveFFValues
          } else if (!window.getPCon) {
            alert('快去填写开局输入的代码！！！如果已经输入，请走一点剧情！！')
          }
        } else {
          window.syFFeng = false
          window.skipU = true;
          window.isSaveFFValues = !window.isSaveFFValues
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'sySavedCvModify' && window.isSy) {
        if (window.gameF && window.modifyValue && window.getPCon) {
          const syCode = message.value
          let nowV = []
          function pv(index, value) {
            const findV = window.gameInfoSy.payValues[index]
            nowV.push({ "uuid": findV.uuid, "expression": { "type": "arg1", "arg1": { "type": "literal", "value": value } } })
          }
          const executeCommands = new Function('pv', syCode);
          executeCommands(pv);
          window.modifyValue(window.getPCon(), nowV).then(result => { gameF.updatePlayContext(result) }).then(() => {
            alert('修改记录成功')
          })
        } else {
          alert('快去填写开局输入的代码！！！如果已经输入，请走一点剧情！！')
        }
      } else if (message.type === 'sySaveLoCV' && window.isSy) {
        upDateInD({ key: 'sySL', value: JSON.stringify(message.value) })
        alert('当前记录的全档数值以及修改代码均已保存！\n请尽快更换插件，让数据自动保存在新插件之中')
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'sySavedRplL' && window.isSy) {
        if (window.gameF && window.modifyValue && window.getPCon && window.enConV1) {
          replaceV()
          const needR = localStorage.getItem(encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}${parent.__cnuser.uid}`, 1)))
          const needA = localStorage.getItem(encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}readrecord${parent.__cnuser.uid}`, 1)))
          if (needR || needA) {
            if (needR) {
              let newS = JSON.parse(needR)
              newS.forEach(v => {
                if (v) {
                  v.key = btoa(parent.ueGame.gameUuid)
                }
              })
              const key = encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}`, 1))
              localStorage.setItem(key, JSON.stringify(newS))
            }
            if (needA) {
              const key = encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}readrecord`, 1))
              localStorage.setItem(key, needA)
            }
            alert('迁移成功！')
          } else {
            alert('该账号没有本地存档，快去本地存档吧！')
          }
        } else {
          alert('快去填写开局输入的代码！！！如果已经输入，请走一点剧情！！')
        }
      } else if (message.type === 'sySavedRplNL' && window.isSy) {
        if (window.gameF && window.modifyValue && window.getPCon && window.enConV1) {
          const newId = message.value
          const needR = localStorage.getItem(encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}`, 1)))
          const needA = localStorage.getItem(encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}readrecord`, 1)))
          if (needR || needA) {
            if (needR) {
              let newS = JSON.parse(needR)
              newS.forEach(v => {
                if (v) {
                  v.key = btoa(`${newId}${parent.ueGame.gameUuid}`)
                }
              })
              const key = encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}${newId}`, 1))
              parent.localStorage.setItem(key, JSON.stringify(newS))
            }
            if (needA) {
              const key = encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}readrecord${newId}`, 1))
              parent.localStorage.setItem(key, needA)
            }
            alert('迁移成功！')
          } else {
            alert('当前无登录下还没有本地存档，快去本地存档吧！')
          }
        } else {
          alert('快去填写开局输入的代码！！！如果已经输入，请走一点剧情！！')
        }
      } else if (message.type === 'sySavedRplLtoL' && window.isSy) {
        if (window.gameF && window.modifyValue && window.getPCon && window.enConV1) {
          const oleId = message.value[0]
          const newId = message.value[1]
          const acx = parseInt(oleId) === parent.__cnuser.uid
          const newL = acx ? localStorage : parent.localStorage
          const needR = window.localSaveObjext[encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}${oleId}`, 1))] ||
            parent.localStorage.getItem(encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}${oleId}`, 1)))
          const needA = window.localSaveObjext[encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}readrecord${oleId}`, 1))] ||
            parent.localStorage.getItem(encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}readrecord${oleId}`, 1)))
          if (needR || needA) {
            if (needR) {
              let newS = JSON.parse(needR)
              newS.forEach(v => {
                if (v) {
                  v.key = btoa(`${newId}${parent.ueGame.gameUuid}`)
                }
              })
              const key = encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}${newId}`, 1))
              parent.localStorage.setItem(key, JSON.stringify(newS))
            }
            if (needA) {
              const key = encodeURIComponent(Object(window.enConV1.b)(`${parent.ueGame.gameUuid}readrecord${newId}`, 1))
              parent.localStorage.setItem(key, needA)
            }
            alert('迁移成功！')
          } else {
            alert(`账号id为${oleId}还没有本地存档，快去本地存档吧！`)
          }
        } else {
          alert('快去填写开局输入的代码！！！如果已经输入，请走一点剧情！！')
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'syPlotJump' && window.isSy) {
        if (window.getDisPlayImage) {
          let fixContext = function (t) {
            let e = t.commands
              , n = t.plots
              , r = t.plotIndex;
            if (!e && n[r] && n[r].commands) {
              let a = structuredClone(t)
              a.commands = n[r].commands
              a.cmdIndex = 0
              return a
            } else {
              return t
            }
          }
          let isSafe = function (t) {
            let e = t || {}
              , n = e.chapter
              , r = e.plots
              , i = e.plotIndex;
            return !(!n || !n.md5 || n.plots !== r || 0 !== i) || t && r && r[i]
          }
          let n = fixContext(window.gameF.d)
          let ju = rFun(82).e
          let t = { type: 'jump', [ju]: { uuid: message.value } }
          window.getDisPlayImage(n, t.type, t[ju], n.plots, isSafe, n.chapter, n.plotIndex, fixContext, !!n.commands)
        } else {
          const cha = window.parent.syChapter.find(v => v.uuid === message.value)
          window.getChapterCommand(cha.downloadUuid, cha.md5).then(v => {
            let a = { plotIndex: 0, chapter: cha, plots: v }
            a.chapter.plots = v
            if (v[0] && v[0].commands) {
              a.commands = v[0].commands
              a.cmdIndex = 0
            }
            rFun(166).i(a)
          })
        }
      } else if (message.type === 'syPlotDisplay' && window.isSy) {
        if (window.getDisPlayImage) {
          let fixContext = function (t) {
            let e = t.commands
              , n = t.plots
              , r = t.plotIndex;
            if (!e && n[r] && n[r].commands) {
              let a = structuredClone(t)
              a.commands = n[r].commands
              a.cmdIndex = 0
              return a
            } else {
              return t
            }
          }
          let isSafe = function (t) {
            let e = t || {}
              , n = e.chapter
              , r = e.plots
              , i = e.plotIndex;
            return !(!n || !n.md5 || n.plots !== r || 0 !== i) || t && r && r[i]
          }
          let n = fixContext(window.gameF.d)
          let ju = rFun(82).e
          let t = { type: 'insertPlot', [ju]: { uuid: message.value } }
          window.getDisPlayImage(n, t.type, t[ju], n.plots, isSafe, n.chapter, n.plotIndex, fixContext, !!n.commands)
        } else {
          const cha = window.parent.syChapter.find(v => v.uuid === message.value)
          window.getChapterCommand(cha.downloadUuid, cha.md5).then(v => {
            let a = { plotIndex: 0, chapter: cha, plots: v }
            a.chapter.plots = v
            if (v[0] && v[0].commands) {
              a.commands = v[0].commands
              a.cmdIndex = 0
            }
            rFun(166).i(a)
          })
        }
      }
    }
  })
  window.addEventListener('message', (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'syGetUIA' && window.isSy) {
        window.syGetUIV = true
        window.freeReedm = false
        window.getSelfT = false
        window.UIName = new Set()
        window.uiShowV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
        window.uiCondV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
      } else if (message.type === 'syFreeR' && window.isSy) {
        window.freeReedm = true
        window.syGetUIV = false
        window.getSelfT = false
      } else if (message.type === 'syNSelfT' && window.isSy) {
        window.getSelfT = true
        window.syGetUIV = false
        window.freeReedm = false
        if (message.value === 2) {
          window.getSelfTM = false
        } else {
          window.getSelfTM = true
        }
        window.condArray = new Set()
        window.uiCondV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
      }
    }
  })
  let bmkklh = false, gjkdjf = false
  window.addEventListener('message', async (event) => {
    if (typeof event.data == 'string' && isJSON(event.data)) {
      const message = JSON.parse(event.data);
      if (message.type === 'syGetUIValue' && window.isSy) {
        if (!window.syGetUIV) {
          if (message.value === 1) {
            window.getCallUIV = false
          } else {
            window.getCallUIV = true
          }
          let calledViews = rFun(92).a
          function getViewV(v) {
            v.forEach(ui => {
              const b = gameInfoSy.viewMap[ui.ref];
              if (b && !window.UIName.has(b.uuid)) {
                window.UIName.add(b.uuid)
                getStyleS(b)
              }
              if (ui[calledViews] && ui[calledViews].length !== 0) {
                getViewV(ui[calledViews])
              }
            })
          }
          Object.values(window.gameF.w/*viewContext*/).forEach(v => {
            if (v.length !== 0) {
              getViewV(v)
            }
          })
        }
        window.syGetUIV = false
        let showV = [], condV = [];
        let allV = window.getPCon()
        Object.keys(window.uiShowV).forEach(v => {
          let nowV = []
          if (v === 'value') {
            nowV = allV[window.valueType.va]
          } else if (v === 'payValue') {
            nowV = allV[window.valueType.pv]
          } else if (v === 'savedValue') {
            nowV = allV[window.valueType.sa]
          } else if (v === 'stringValue') {
            nowV = allV[window.valueType.st]
          } else if (v === 'systemValue') {
            nowV = allV[window.valueType.sy]
          }
          const sv = [...window.uiShowV[v]].sort((a, b) => a - b)
          const cv = [...window.uiCondV[v]].sort((a, b) => a - b)
          sv.forEach(id => {
            const newV = window.deV(nowV[id])
            newV.valueT = v
            newV.valueIndex = id
            newV.name = window.gameInfoSy[v + "s"][id].name
            if (!newV.name) { newV.name = newV.uuid }
            if (newV.value === undefined) { newV.value = window.gameInfoSy[v + "s"][id].init.value }
            showV.push(newV)
          })
          cv.forEach(id => {
            const newV = window.deV(nowV[id])
            newV.valueT = v
            newV.valueIndex = id
            newV.name = window.gameInfoSy[v + "s"][id].name
            if (!newV.name) { newV.name = newV.uuid }
            if (newV.value === undefined) { newV.value = window.gameInfoSy[v + "s"][id].init.value }
            condV.push(newV)
          })
        })
        const customEvent1 = new CustomEvent("syUIA", {
          detail: { value: { showValue: showV, allValue: condV } }
        });
        window.dispatchEvent(customEvent1);
        window.UIName = new Set()
        window.uiShowV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
        window.uiCondV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
      } else if (message.type === 'syGetFreeRCond' && window.isSy) {
        window.freeReedm = false
        let condV = [];
        let allV = window.getPCon()
        Object.keys(window.uiCondV).forEach(v => {
          let nowV = []
          if (v === 'value') {
            nowV = allV[window.valueType.va]
          } else if (v === 'payValue') {
            nowV = allV[window.valueType.pv]
          } else if (v === 'savedValue') {
            nowV = allV[window.valueType.sa]
          } else if (v === 'stringValue') {
            nowV = allV[window.valueType.st]
          } else if (v === 'systemValue') {
            nowV = allV[window.valueType.sy]
          } else if (v === 'indexValue') {
            nowV = allV[window.valueType.iv]
          }
          const cv = [...window.uiCondV[v]].sort((a, b) => a - b)
          cv.forEach(id => {
            const newV = window.deV(nowV[id])
            newV.valueT = v
            newV.valueIndex = id
            newV.name = window.gameInfoSy[v + "s"][id].name
            if (!newV.name) { newV.name = newV.uuid }
            if (newV.value === undefined) { newV.value = window.gameInfoSy[v + "s"][id].init.value }
            condV.push(newV)
          })
        })
        const customEvent1 = new CustomEvent("syFreeRCond", {
          detail: { value: { value: condV, condition: [...window.condArray] } }
        });
        window.dispatchEvent(customEvent1);
        window.condArray = new Set()
        window.uiCondV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
      } else if (message.type === 'syGetSelfT' && window.isSy) {
        window.getSelfT = false
        let condV = [];
        let allV = window.getPCon()
        Object.keys(window.uiCondV).forEach(v => {
          let nowV = []
          if (v === 'value') {
            nowV = allV[window.valueType.va]
          } else if (v === 'payValue') {
            nowV = allV[window.valueType.pv]
          } else if (v === 'savedValue') {
            nowV = allV[window.valueType.sa]
          } else if (v === 'stringValue') {
            nowV = allV[window.valueType.st]
          } else if (v === 'systemValue') {
            nowV = allV[window.valueType.sy]
          } else if (v === 'indexValue') {
            nowV = allV[window.valueType.iv]
          }
          const cv = [...window.uiCondV[v]].sort((a, b) => a - b)
          cv.forEach(id => {
            const newV = window.deV(nowV[id])
            newV.valueT = v
            newV.valueIndex = id
            newV.name = window.gameInfoSy[v + "s"][id].name
            if (!newV.name) { newV.name = newV.uuid }
            if (newV.value === undefined) { newV.value = window.gameInfoSy[v + "s"][id].init.value }
            condV.push(newV)
          })
        })
        const customEvent1 = new CustomEvent("sySelfTInfo", {
          detail: { value: { value: condV, condition: [...window.condArray] } }
        });
        window.dispatchEvent(customEvent1);
        window.condArray = new Set()
        window.uiCondV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
      } else if (message.type === 'syPic' && window.isSy) {
        if (!window.Phaser.GAMES) {
          window.Phaser.GAMES = []
          window.Phaser.GAMES[0] = window.PIXI.game = window.gamePCont.h[0].game
        }
        if (message.value[0] === 1) {
          window.nowSpri = {};
          function isGroup(n) {
            n.children.forEach(v => {
              if (v instanceof Phaser.Image) {
                if (v.key && v.visible) { window.nowSpri[v.key] = v }
              } else if (v instanceof Phaser.Group) {
                isGroup(v)
              }
            })
          }
          window.Phaser.GAMES[0].stage.children[0].children.forEach(isGroup)
          if (!window.allSpri) {
            window.allSpri = {}
            window.allMusic = {}
            gameInfoSy.viewMap && Object.values(gameInfoSy.viewMap).forEach(v => {
              if (v.type === 'image' && v.content && v.content.background && typeof v.content.background.url === 'string') {
                window.allSpri[v.content.background.url] = v
              }
            })
            gameInfoSy.valueImgs && Object.values(gameInfoSy.valueImgs).forEach(v => {
              if (v.url && typeof v.url === 'string') {
                window.allSpri[v.url] = v
              }
            })
          }
          if (!window.hasGetP) { window.hasGetP = {} }
          if (!window.hasGetP[window.gameF.d.chapter.uuid]) {
            window.hasGetP[window.gameF.d.chapter.uuid] = true
            function getImageM(v) {
              if (v.commands) {
                v.commands.forEach(com => {
                  switch (com.type) {
                    case "addImage":
                      com.args.forEach(arg => {
                        if (typeof arg.url === 'string') {
                          window.allSpri[arg.url] = arg
                        }
                      })
                      break
                    case "playMusic":
                      com.args.forEach(arg => {
                        if (typeof arg.url === 'string') {
                          window.allMusic[arg.url] = arg
                        }
                      })
                    case "macro":
                      com.args.forEach(getImageM)
                      break
                    case "conditionOptions":
                      com.args.forEach(getImageM)
                      break
                    case "options":
                      com.args.forEach(getImageM)
                      break
                  }
                })
              } else {
                if (v.background && typeof v.background.url === 'string') {
                  window.allSpri[v.background.url] = v.background
                }
                if (v.characters) {
                  v.characters.forEach(cha => {
                    if (typeof cha.url === 'string') {
                      window.allSpri[cha.url] = cha
                    }
                  })
                }
                if (v.music && typeof v.music.url === 'string') {
                  window.allMusic[v.music.url] = v.music
                }
              }
            }
            window.gameF.d.plots.forEach(getImageM)
            window.gameF.e.forEach(getImageM)
          }
          let pic = [], music = []
          Object.values(window.nowSpri).forEach(v => {
            if (window.allSpri[v.key]) {
              let v1 = window.allSpri[v.key]
              pic.push({
                picName: v1.name,
                url: v.key.includes('http') ? v.key : v.key.startsWith("/") ? `https://apppic.3000test.com${v.key}` : `https://apppic.3000test.com/${v.key}~webp`,
                urlName: v.key
              })
            }
          })
          window.Phaser.GAMES[0].sound._sounds.forEach(v => {
            if (window.allMusic[v.key]) {
              music.push({
                musicName: window.allMusic[v.key].name.includes('.mp3') ? window.allMusic[v.key].name : `${window.allMusic[v.key].name}.mp3`,
                url: v.key.includes('http') ? v.key : v.key.startsWith("/") ? `https://apppic.3000test.com${v.key}` : `https://apppic.3000test.com/${v.key}`,
                urlName: v.key
              })
            } else {
              music.push({
                musicName: '无名.mp3',
                url: v.key.includes('http') ? v.key : v.key.startsWith("/") ? `https://apppic.3000test.com${v.key}` : `https://apppic.3000test.com/${v.key}`,
                urlName: v.key
              })
            }
          })
          const customEvent1 = new CustomEvent("syPicN", {
            detail: { value: [pic, music] }
          });
          window.dispatchEvent(customEvent1);
        } else if (message.value[0] === 2) {
          const response = await fetch(message.value[2]); // 等待 fetch 完成
          const blob = await response.blob(); // 等待 blob() 完成
          message.value[2] = URL.createObjectURL(blob); // 更新为 Blob URL
          let nowP = window.PIXI.game.cache._cacheMap[2][message.value[1].urlName]
          if (nowP) {
            if (nowP.data.src.startsWith('blob:')) {
              URL.revokeObjectURL(nowP.data.src);
            }
            nowP.data.src = message.value[2]
            nowP.base.source.src = message.value[2]
          } else {
            let ima = document.createElement('img')
            ima.name = message.value[1].urlName
            ima.crossOrigin = 'anonymous'
            ima.src = message.value[2]
            ima.onload = () => {
              window.Phaser.GAMES[0].cache.addImage(message.value[1].urlName, message.value[1].url, ima)
            }
          }
          if (window.nowSpri[message.value[1].urlName]) {
            let nImage = window.nowSpri[message.value[1].urlName]
            nImage.loadTexture(message.value[1].urlName)
          }
        } else if (message.value[0] === 3) {
          if (window.nowSpri[message.value[1].urlName]) {
            let nImage = window.nowSpri[message.value[1].urlName]
            if (message.value[2].px) { nImage.position.x = parseFloat(message.value[2].px) }
            if (message.value[2].py) { nImage.position.y = parseFloat(message.value[2].py) }
            if (message.value[2].sx) { nImage.scale.x = parseFloat(message.value[2].sx) }
            if (message.value[2].sy) { nImage.scale.y = parseFloat(message.value[2].sy) }
          }
          if (!window.picInfo) {
            window.picInfo = {}
            let an = Phaser.Group.prototype.add
            Phaser.Group.prototype.add = function () {
              let vm = arguments[0]
              if (vm instanceof window.Phaser.Image) {
                if (window.picInfo[vm.key]) {
                  let inf = window.picInfo[vm.key]
                  if (inf.px !== undefined) { vm.position.x = inf.px }
                  if (inf.py !== undefined) { vm.position.y = inf.py }
                  if (inf.sx !== undefined) { vm.scale.x = inf.sx }
                  if (inf.sy !== undefined) { vm.scale.y = inf.sy }
                }
              }
              return an.apply(this, arguments)
            }
          }
          if (!window.picInfo[message.value[1].urlName]) { window.picInfo[message.value[1].urlName] = {} }
          if (message.value[2].px) { window.picInfo[message.value[1].urlName].px = parseFloat(message.value[2].px) }
          if (message.value[2].py) { window.picInfo[message.value[1].urlName].py = parseFloat(message.value[2].py) }
          if (message.value[2].sx) { window.picInfo[message.value[1].urlName].sx = parseFloat(message.value[2].sx) }
          if (message.value[2].sy) { window.picInfo[message.value[1].urlName].sy = parseFloat(message.value[2].sy) }
        } else if (message.value[0] === 4) {
          if (!bmkklh) {
            bmkklh = true
            let tex = window.Phaser.Text.prototype.setText
            window.Phaser.Text.prototype.setText = function () {
              if (gjkdjf) {
                let txt = arguments[0]
                if (typeof txt === 'object') {
                  if (txt.toString) { txt = txt.toString() }
                }
                if (typeof txt === 'string' && txt.trim() !== '') {
                  if (window.roleNameS.test(txt)) {
                    arguments[0] = txt.replace(window.roleNameS, match => window.roleNameR[match])
                  }
                }
              }
              return tex.apply(this, arguments)
            }
          }
          window.roleNameR = message.value[1]
          if (Object.values(window.roleNameR).length === 0) {
            gjkdjf = false
          } else {
            gjkdjf = true
          }
          window.roleNameS = new RegExp(Object.keys(window.roleNameR).join('|'), 'g')
        } else if (message.value[0] === 5) {
          const now = window.Phaser.GAMES[0].sound._sounds.find(v => v.isPlaying)
          switch (message.value[1]) {
            case 1:
              if (now) {
                let name = '音频'
                if (window.allMusic && window.allMusic[now.key]) {
                  name = window.allMusic[now.key].name
                }
                let url = now.key.includes('http') ? now.key : now.key.startsWith("/") ? `https://apppic.3000test.com${now.key}` : `https://apppic.3000test.com/${now.key}`
                fetch(url)
                  .then(response => response.blob())
                  .then(blob => {
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = name
                    link.click();
                    URL.revokeObjectURL(url);
                  })
                  .catch(error => console.error('Error downloading the file:', error));
              } else {
                alert('查询不到正在播放的音频')
              }
              break
            case 2:
              if (now) {
                if (message.value[2] === 'info') {
                  let v = message.value[3].v, p = message.value[3].p
                  if (v) { now._sound.volume = now._volume = now._tempVolume = parseFloat(v) }
                  if (p) { now._sound.playbackRate = parseFloat(p) }
                } else if (message.value[2] === 'forward') {
                  let a = now._sound.currentTime
                  a += 10
                  if (a > now._sound.duration) { now._sound.currentTime = now._sound.duration } else { now._sound.currentTime = a }
                } else if (message.value[2] === 'back') {
                  let a = now._sound.currentTime
                  a -= 10
                  if (a < 0) { now._sound.currentTime = 0 } else { now._sound.currentTime = a }
                }
              } else {
                alert('查询不到正在播放的音频')
              }
              break
            case 3:
              if (now) {
                try {
                  const response = await fetch(message.value[2]); // 等待 fetch 完成
                  const blob = await response.blob(); // 等待 blob() 完成
                  message.value[2] = URL.createObjectURL(blob); // 更新为 Blob URL
                } catch (error) {
                  console.error('Error converting Data URL to Blob:', error);
                  alert('发生错误，请重新上传替换')
                  return
                }
                if (now._sound.src.startsWith('blob:')) {
                  URL.revokeObjectURL(now._sound.src);
                }
                now._sound.src = message.value[2]
                now._sound.load()
                now._sound.play()
                let nowP = window.PIXI.game.cache._cacheMap[4][now.key]
                if (nowP) {
                  if (nowP.data.src.startsWith('blob:')) {
                    URL.revokeObjectURL(nowP.data.src);
                  }
                  nowP.data.src = message.value[2]
                } else {
                  let ima = document.createElement('audio')
                  ima.name = now.name
                  ima.src = message.value[2]
                  ima.onload = () => {
                    window.Phaser.GAMES[0].cache.addSound(now.key, now.name, ima, false, true)
                  }
                }
              } else {
                alert('查询不到正在播放的音频')
              }
              break
            case 4:
              try {
                const response = await fetch(message.value[3]); // 等待 fetch 完成
                const blob = await response.blob(); // 等待 blob() 完成
                message.value[3] = URL.createObjectURL(blob); // 更新为 Blob URL
              } catch (error) {
                console.error('Error converting Data URL to Blob:', error);
                alert('发生错误，请重新上传替换')
                return
              }
              let nowP = window.PIXI.game.cache._cacheMap[4][message.value[2].urlName]
              if (nowP) {
                if (nowP.data.src.startsWith('blob:')) {
                  URL.revokeObjectURL(nowP.data.src);
                }
                nowP.data.src = message.value[3]
              } else {
                let ima = document.createElement('audio')
                ima.name = message.value[2].urlName
                ima.src = message.value[3]
                ima.onload = () => {
                  window.Phaser.GAMES[0].cache.addSound(message.value[1].urlName, message.value[1].url, ima, false, true)
                }
              }
              if (now) {
                if (now._sound.src.startsWith('blob:')) {
                  URL.revokeObjectURL(now._sound.src);
                }
                now._sound.src = message.value[3]
                now._sound.load()
                now._sound.play()
              }
              break
          }
        }
      } else if (message.type === 'syTT' && window.isSy) {
        function getTextStr(n, t) {
          let str = n, inR = /\\(\d+)-?/g
          const allV = window.getPCon();
          const regex = /&(s|v|sv|p|iv|x|lv)\[([^\]]+)\]/g;  // 使用全局匹配标志
          let match;
          while ((match = regex.exec(n)) !== null) {
            let type = match[1], valIn = -1;
            let s = -1;
            if (/^\d+$/.test(match[2])) {
              valIn = parseInt(match[2]);
            } else if (/^(?!_)(?!.*?_$)((?:\d+_){3,4}\d+)+$/.test(match[2])) {
              valIn = match[2];
            } else if (/^(?!_)(?!.*?_$)((?:\d+_)\d+)+$/.test(match[2])) {
              let l = match[2].split("_");
              s = l[1];
              valIn = parseInt(l[0]);
            }
            if ("s" === type && allV[window.valueType.sa][valIn]) {
              t === 1 ? str = str.replace(match[0], deV(allV[window.valueType.sa][valIn]).value) :
                str = str.replace(match[0], `${gameInfoSy.savedValues[valIn].name || gameInfoSy.savedValues[valIn].uuid}(savedValues[${valIn}])`);
            } else if ("v" === type && allV[window.valueType.va][valIn]) {
              t === 1 ? str = str.replace(match[0], deV(allV[window.valueType.va][valIn]).value) :
                str = str.replace(match[0], `${gameInfoSy.values[valIn].name || gameInfoSy.values[valIn].uuid}(values[${valIn}])`);
            } else if ("sv" === type && allV[window.valueType.st][valIn]) {
              t === 1 ? str = str.replace(match[0], deV(allV[window.valueType.st][valIn]).value) :
                str = str.replace(match[0], `${gameInfoSy.stringValues[valIn].name || gameInfoSy.stringValues[valIn].uuid}(stringValues[${valIn}])`);
            } else if ("p" === type && allV[window.valueType.pv][valIn]) {
              t === 1 ? str = str.replace(match[0], deV(allV[window.valueType.pv][valIn]).value) :
                str = str.replace(match[0], `${gameInfoSy.payValues[valIn].name || gameInfoSy.payValues[valIn].uuid}(payValues[${valIn}])`);
            } else if ("x" === type && allV[window.valueType.sy][valIn]) {
              if (s === -1) {
                t === 1 ? str = str.replace(match[0], deV(allV[window.valueType.sy][valIn]).value) :
                  str = str.replace(match[0], `${gameInfoSy.systemValues[valIn].name || gameInfoSy.systemValues[valIn].uuid}(systemValues[${valIn}])`);
              } else {
                if (valIn === 18) {
                  let roleCName = parent.allRoles.find(v => v.id === s).name
                  str = str.replace(match[0], `角色id为${roleCName || '无名'}的角色守护值`);
                }
              }
            } else if ("iv" === type && allV[window.valueType.iv][valIn]) {
              let v = allV[window.valueType.iv][valIn];
              let h = (v.value !== undefined ? deV(v).value - 1 : deV(v.init).value - 1);
              let f = v.init.type;
              let p = v.init.id || 0;
              switch (f) {
                case "value":
                  if (p) { h = window.indexValuesMap[window.valueType.va][p][h]; }
                  t === 1 ? str = str.replace(match[0], deV(allV[window.valueType.va][h]).value) :
                    str = str.replace(match[0], `${gameInfoSy.values[h].name || gameInfoSy.values[h].uuid}(values[${h}])`);
                  break;
                case 'payValue':
                  if (p) { h = window.indexValuesMap[window.valueType.pv][p][h]; }
                  t === 1 ? str = str.replace(match[0], deV(allV[window.valueType.pv][h]).value) :
                    str = str.replace(match[0], `${gameInfoSy.payValues[h].name || gameInfoSy.payValues[h].uuid}(payValues[${h}])`);
                  break;
                case "stringValue":
                  if (p) { h = window.indexValuesMap[window.valueType.st][p][h]; }
                  t === 1 ? str = str.replace(match[0], deV(allV[window.valueType.st][h]).value) :
                    str = str.replace(match[0], `${gameInfoSy.stringValues[h].name || gameInfoSy.stringValues[h].uuid}(stringValues[${h}])`);
                  break;
                case "savedValue":
                  if (p) { h = window.indexValuesMap[window.valueType.sa][p][h]; }
                  t === 1 ? str = str.replace(match[0], deV(allV[window.valueType.sa][h]).value) :
                    str = str.replace(match[0], `${gameInfoSy.savedValues[h].name || gameInfoSy.savedValues[h].uuid}(savedValues[${h}])`);
                  break;
                case "systemValue":
                  if (p) { h = window.indexValuesMap[window.valueType.sy][p][h]; }
                  t === 1 ? str = str.replace(match[0], deV(allV[window.valueType.sy][h]).value) :
                    str = str.replace(match[0], `${gameInfoSy.systemValues[h].name || gameInfoSy.systemValues[h].uuid}(systemValues[${h}])`);
                  break;
                default:
                  break;
              }
            } else if ("lv" === type) {
              let mnn = valIn.split("_")
              let roN = ''
              if (mnn[0] === '2') {
                let rroN = parent.allRoles.find(v => v.id === mnn[2])
                if (rroN) { roN = `(${rroN.name})` }
              } else if (mnn[0] === '3') {
                let rroN = window.gameInfoSy.payValues[mnn[2]]
                if (rroN) { roN = `(${rroN.name || `payValues[${mnn[2]}]`})` }
              }
              let anb = `${an[mnn[0]] ? an[mnn[0]] : ''}${roN}${an1[mnn[1]] ? an1[mnn[1]] : ''}${an2[mnn[mnn.length - 2]] ? an2[mnn[mnn.length - 2]] : ''}${an3[mnn[mnn.length - 1]] ? '的' + an3[mnn[mnn.length - 1]] : ''}`
              str = str.replace(match[0], anb)
            }
          }
          if (inR.test(str)) { str = str.replace(inR, '') }
          return str
        }

        function getSetVStr(comm) {
          let str = []
          comm.forEach(v3 => {
            const ex = v3.expression
            const val = window.getValueIndex(v3.uuid)
            const ty = window.gameInfoSy[val[0]][val[1]].name ? window.gameInfoSy[val[0]][val[1]].name : `uuid为${v3.uuid}的数值`
            let left = `${ty}(${val[0]}[${val[1]}])`, right = ''
            if (ex.type === 'arg1' || ex.type === 'int' || ex.type === 'stringLength') {
              const xe = ex.arg1
              if (xe.type === "literal") {
                right = `${xe.value ? xe.value : 0}`
              } else if (xe.type === "random") {
                let rl = 0, rr = 0
                if (xe.range[0].type === 'literal') {
                  rl = xe.range[0].value || 0
                } else {
                  let ind = getVIdN(xe.range[0])
                  let rn = ind[0] ? ind[0] : `uuid为${gameInfoSy[ind[2] + 's'][ind[1]].uuid}的数值`
                  rl = `${rn}(${ind[2] + 's'}[${ind[1]}])`
                }
                if (xe.range[1].type === 'literal') {
                  rr = xe.range[1].value || 0
                } else {
                  let ind = getVIdN(xe.range[1])
                  let rn = ind[0] ? ind[0] : `uuid为${gameInfoSy[ind[2] + 's'][ind[1]].uuid}的数值`
                  rr = `${rn}(${ind[2] + 's'}[${ind[1]}])`
                }
                right = `${rl}-${rr}取随机数`
              } else if (xe.type === "string") {
                right = xe.value || ''
              } else {
                let ind = getVIdN(xe)
                let rn = ind[0] ? ind[0] : `uuid为${gameInfoSy[ind[2] + 's'][ind[1]].uuid}的数值`
                right = `${rn}(${ind[2] + 's'}[${ind[1]}])`
              }
              str.push(`${left} = ${right}${ex.type === 'arg1' ? '' : ex.type === 'int' ? ' 取整数' : ' 的长度'}`)
            } else {
              right = getCondTS(ex)
              str.push(`${left} = ${right}`)
            }
          })
          return str.join('\n')
        }
        function getUIEventT(n) {
          let str = []
          if (n) {
            n.forEach((enev, k) => {
              let evn = '', cond = '', comm = []
              if (enev.type === "onClick") {
                evn = enev.name ? `点击事件:${enev.name}` : '点击事件'
              } else if (enev.type === "onLoad") {
                evn = enev.name ? `加载事件:${enev.name}` : '加载事件'
              } else if (enev.type === "onStep") {
                evn = enev.name ? `定时事件:${enev.name}` : '定时事件'
              } else {
                evn = enev.name ? `其他事件:${enev.name}` : '其他事件'
              }
              if (enev.expression) {
                cond = getCondT(enev.expression)
              }
              if (enev.events && enev.events.length > 0) {
                enev.events.forEach(ev => {
                  switch (ev.type) {
                    case "setValues":
                      if (ev.handle) {
                        let sev = `—赋值—\n`, setvar = getSetVStr(ev.handle.values)
                        if (setvar) { comm.push(sev + setvar) }
                      }
                      break
                    case "closeUI":
                      if (ev.handle && ev.handle.uuid) {
                        let uiN = gameInfoSy.viewMap[ev.handle.uuid]
                        comm.push(`关闭UI：${uiN.name || uiN.uuid}`)
                      } else {
                        comm.push(`关闭UI`)
                      }
                      break
                    case "callUI":
                      if (ev.handle && ev.handle.uuid) {
                        let uiN = gameInfoSy.viewMap[ev.handle.uuid]
                        comm.push(`呼叫UI：${uiN.name || uiN.uuid}`)
                      }
                      break
                    case "refreshUI":
                      if (ev.handle && ev.handle.uuid) {
                        let uiN = gameInfoSy.viewMap[ev.handle.uuid]
                        comm.push(`刷新UI：${uiN.name || uiN.uuid}`)
                      }
                      break
                    case "reload":
                      if (ev.handle && ev.handle.uuid) {
                        let uiN = gameInfoSy.viewMap[ev.handle.uuid]
                        comm.push(`重新加载UI：${uiN.name || uiN.uuid}`)
                      }
                      break
                    case "insert":
                    case "insertPlot":
                      if (ev.handle.uuid) {
                        let uiN = parent.syChapterById[ev.handle.uuid]
                        comm.push(`插播剧情：${uiN.name || uiN.uuid}`)
                      }
                      break
                    case "jump":
                      if (ev.handle.uuid) {
                        let uiN = parent.syChapterById[ev.handle.uuid]
                        comm.push(`跳转剧情：${uiN.name || uiN.uuid}`)
                      }
                      break
                    case "nextPlot":
                      comm.push(`跳转下一条剧情`)
                      break
                    case "pay":
                      comm.push(`购买商品：${ev.handle.name}(价格：${ev.handle.valuePrice})`)
                      let setV = getSetVStr(ev.handle.values)
                      if (setV) { comm.push(`—购买成功后赋值—\n${setV}`) }
                      break
                    case "share":
                      comm.push(`分享：${ev.handle.name || ''}`)
                      if (ev.handle.expression) {
                        let conS = getCondT(ev.handle.expression)
                        if (conS) { comm.push(`—分享成功奖励领取条件—\n${conS}`) }
                      }
                      if (ev.handle.values && ev.handle.values.length > 0) {
                        let setV1 = getSetVStr(ev.handle.values)
                        if (setV1) { comm.push(`—分享成功后赋值—\n${setV1}`) }
                      }
                      break
                    case "invite":
                      comm.push('查看邀请码以及邀请人数')
                      break
                    case "inviteCode":
                      comm.push('验证输入的邀请码')
                      break
                  }
                })
              }
              str.push(`——${evn}——`)
              if (cond) {
                str.push(`(1)判断条件：\n${cond}`)
              }
              if (comm.length > 0) {
                cond ? str.push(`(2)执行事件：\n${comm.join('\n')}`) : str.push(`(1)执行事件：\n${comm.join('\n')}`)
              }
              if (k !== n.length - 1) {
                str.push('——END——')
              }
            })
          }
          return str
        }
        function getUIT(n) {
          let str = []
          switch (n.type) {
            case "container":
              let cch = [], cone = []
              str.push(`————界面: ${n.name || n.uuid}————`)
              if (n.children) {
                n.children.forEach(ui => {
                  let nu = gameInfoSy.viewMap[ui.ref]
                  if (nu) {
                    let nue
                    if (ui.events && ui.events.length > 0) { nue = getUIEventT(ui.events) }
                    let nus = getUIT(nu)
                    if (cch.length !== 0) { cch.push(' ') }
                    cch.push(nus.join('\n'))
                    if (nue) { cch.push(nue.join('\n')) }
                  }
                })
              }
              if (n.events) {
                cone = getUIEventT(n.events)
              }
              if (cone.length > 0) { str.push(`(1)自动加载事件\n${cone.join('\n')}`) }
              if (cch.length > 0) {
                str.push(`${cone.length > 0 ? '(2)' : '(1)'}子界面\n${cch.join('\n')}`)
              }
              break
            case "button":
              let btn = n.name || n.uuid
              str.push(`****按钮：${btn}****`)
              if (n.events && n.events.length > 0) {
                let bte = getUIEventT(n.events)
                if (bte.length > 0) {
                  str.push(`(1)按钮事件\n${bte.join('\n')}`)
                }
              }
              break
            case "text":
              str.push('****显示文本****')
              if (n.content && n.content.value) {
                let sData = ''
                n.content.value.forEach(sd => {
                  if (sd.lineBreak !== 1 || sd.data.trim() !== '') {
                    if (sd.placeholder === 1) {
                      sData += getTextStr(sd.data, 2)
                    } else {
                      sData += sd.data
                    }
                  }
                })
                if (sData) {
                  str.push(`${sData}`)
                }
              }
              if (n.events) {
                let ten = getUIEventT(n.events)
                if (ten.length > 0) {
                  str.push(`(1)点击事件\n${ten.join('\n')}`)
                }
              }
              break
            case "image":
              let imn = n.name ? `:${n.name}` : ''
              str.push(`****显示图片(${imn})****`)
              if (n.events) {
                let ten = getUIEventT(n.events)
                if (ten.length > 0) {
                  str.push(`(1)点击事件\n${ten.join('\n')}`)
                }
              }
              break
            case "input":
              let inp = n.name ? `:${n.name}` : ''
              str.push(`****输入框(${inp})****`)
              if (n.content && n.content.value) {
                let vin = getVIdN(n.content.value)
                if (vin.length > 0) {
                  str.push(`绑定值：${vin[0]}(${vin[2]}[${vin[1]}])`)
                }
              }
              break
            case "bar":
              let bar = n.name ? `:${n.name}` : ''
              str.push(`****数值条(${bar})****`)
              if (n.content && n.content.value) {
                let nh, nw, ph, pw, nor = n.content.value.normal, pro = n.content.value.progress
                if (nor.height) {
                  if (nor.height.type === "literal") {
                    nh = nor.height.value || 0
                  } else {
                    let vin = getVIdN(nor.height)
                    if (vin.length > 0) {
                      nh = `${vin[0]}(${vin[2]}[${vin[1]}])`
                    }
                  }
                }
                if (nor.width) {
                  if (nor.width.type === "literal") {
                    nw = nor.width.value || 0
                  } else {
                    let vin = getVIdN(nor.width)
                    if (vin.length > 0) {
                      nw = `${vin[0]}(${vin[2]}[${vin[1]}])`
                    }
                  }
                }
                if (pro.height) {
                  if (pro.height.type === "literal") {
                    ph = pro.height.value || 0
                  } else {
                    let vin = getVIdN(pro.height)
                    if (vin.length > 0) {
                      ph = `${vin[0]}(${vin[2]}[${vin[1]}])`
                    }
                  }
                }
                if (pro.width) {
                  if (pro.width.type === "literal") {
                    pw = pro.width.value || 0
                  } else {
                    let vin = getVIdN(pro.width)
                    if (vin.length > 0) {
                      pw = `${vin[0]}(${vin[2]}[${vin[1]}])`
                    }
                  }
                }
                if (nh !== ph) {
                  str.push(`最大值为: ${nh},当前为:${ph}`)
                }
                if (pw !== pw) {
                  str.push(`最大值为: ${nw},当前为:${pw}`)
                }
              }
              break
            case "timer":
              let tim = n.name ? `:${n.name}` : ''
              let intV = 0
              if (n.content.step.type === "literal") {
                intV = n.content.step.value || 0
              } else {
                let vin = getVIdN(n.content.step)
                if (vin.length > 0) {
                  intV = vin[1]
                }
              }
              str.push(`****定时器${tim},间隔${intV}执行一次****`)
              if (n.events && n.events.length > 0) {
                let tico = getUIEventT(n.events)
                if (tico.length > 0) {
                  str.push(`定时事件：\n${tico.join('\n')}`)
                }
              }
              break
          }
          return str
        }
        if (!window.macroN) { window.macroN = {}, window.uiN = {} }
        let bcc = {}, acc = {}, ccc = {}
        function getCommond(n, m) {
          let plot = []
          if (n.commands) {
            n.commands.forEach(com => {
              switch (com.type) {
                case "showDialog":
                  com.args.forEach(v => {
                    let roleName = ''
                    if (v.dialogtitle && v.dialogtitle.hidden !== 1) {
                      roleName = v.dialogtitle.placeholder === 1 ? getTextStr(v.dialogtitle.data, 1) : v.dialogtitle.data
                    }
                    if (v.speaking) {
                      let sData = ''
                      v.speaking.data.forEach(sd => {
                        if (sd.lineBreak !== 1 || sd.data.trim() !== '') {
                          if (sd.placeholder === 1) {
                            sData += getTextStr(sd.data, 1)
                          } else {
                            sData += sd.data
                          }
                        }
                      })
                      if (sData) {
                        plot.push(roleName ? `【${roleName}】：${sData}` : `旁白：${sData}`)
                      }
                    }
                  })
                  break
                case "options":
                  let ops = [], opt = []
                  com.args.forEach((v, k) => {
                    let on = '', opc = []
                    if (v.name) {
                      on = v.name
                    } else if (v.background && v.background.normal && v.background.normal.name) {
                      on = v.background.normal.name.replace(/.(png|jpg)/, '')
                    } else {
                      on = `选项${k + 1}`
                    }
                    ops.push(on)
                    if (v.commands && v.commands.length > 0) { opc = getCommond(v) }
                    if (v.plots && v.plots.length > 0) {
                      opc.push(...getCommond(v.plots))
                    }
                    if (opc.length > 0) {
                      opt.push(`【选项：${on}】\n${opc.join('\n')}`)
                    }
                  })
                  plot.push(`出现选项——${ops.join('、')}`)
                  if (opt.length > 0) { plot.push(opt.join('\n')) }
                  break
                case "setValues":
                  let sev = `****赋值****\n`, setvar = getSetVStr(com.args)
                  if (setvar) { plot.push(sev + setvar) }
                  break
                case "conditionOptions":
                  let cond = '****判断分支****\n', condC = []
                  com.args.forEach((v, k) => {
                    let condB = ``, condk = []
                    if (v.commands && v.commands.length > 0) {
                      condk = getCommond(v)
                    }
                    if (v.plots && v.plots.length > 0) {
                      condk.push(...getCommond(v.plots))
                    }
                    let cond = getCondT(v.expression)
                    let brn = v.name ? `(${v.name})` : ''
                    let brm = cond ? `进入条件：${cond}${condk.length > 0 ? '\n' : ''}` : ''
                    condB = `——分支${k + 1}${brn}——\n${brm}${condk.length > 0 ? condk.join('\n') : ''}`
                    condC.push(condB)
                  })
                  if (condC.length > 0) {
                    plot.push(cond + condC.join('\n') + '\n****判断分支END****')
                  }
                  break
                case "insert":
                case "insertPlot":
                  if (parent.syChapterById[com.args[0]]) {
                    plot.push(`插入章节：${parent.syChapterById[com.args[0]].name}`)
                  }
                  break
                case "jump":
                  if (parent.syChapterById[com.args[0]]) {
                    plot.push(`跳转章节：${parent.syChapterById[com.args[0]].name}`)
                  }
                  break
                case "macro":
                  let mas = `宏：${com.name || ''}`, mac = []
                  if (!macroN[com.args[0].uuid]) {
                    if (!ccc[com.args[0].uuid]) {
                      if (com.args[0].commands) {
                        mac = getCommond(com.args[0])
                        ccc[com.args[0].uuid] = true
                        if (mac.length > 0) {
                          // macros.push(`\n\n——${mas}——`)
                          // macros.push(mac.join('\n'))
                          plot.push(`调用${mas}`)
                          bcc[mas] = mac
                          macroN[com.args[0].uuid] = { name: mas, comm: mac }
                        }
                      }
                    }
                  } else {
                    bcc[mas] = macroN[com.args[0].uuid].comm
                    plot.push(`调用${mas}`)
                  }
                  break
                case "note":
                  plot.push(`//${com.args[0]}`)
                  break
                case "addView":
                  let addE = com.args[0], uiNow = gameInfoSy.viewMap[com.args[0].ref]
                  if (uiNow) {
                    let uiName = addE.ref
                    if (uiNow.name) {
                      uiName = uiNow.name
                    }
                    let avs = `UI：${uiName}`, avc = []
                    if (!uiN[addE.ref]) {
                      plot.push(`调用${avs}`)
                      avc = getUIT(uiNow)
                      if (avc.length > 0) {
                        // uis.push(`\n\n——${avs}——`)
                        // uis.push(avc.join('\n'))
                        acc[avs] = avc
                        uiN[addE.ref] = { name: uiName, comm: avc }
                      }
                    } else {
                      acc[avs] = uiN[addE.ref].comm
                      plot.push(`调用${avs}`)
                    }
                  }
                  break
              }
            })
          } else {
            let nmnnn = Array.isArray(n) ? n : [n]
            nmnnn.forEach(com => {
              let roleName = ''
              if (com.dialogtitle) {
                if (com.dialogtitle.hidden !== 1) {
                  roleName = com.dialogtitle.placeholder === 1 ? getTextStr(com.dialogtitle.data, 1) : com.dialogtitle.data
                }
              }
              if (com.speaking) {
                let sData = ''
                com.speaking.data.forEach(sd => {
                  if (sd.lineBreak !== 1 || sd.data.trim() !== '') {
                    if (sd.placeholder === 1) {
                      sData += getTextStr(sd.data, 1)
                    } else {
                      sData += sd.data
                    }
                  }
                })
                if (sData) {
                  plot.push(roleName ? `【${roleName}】：${sData}` : `旁白：${sData}`)
                }
              }
              if (com.values && com.values.length > 0) {
                let sev = `****赋值****\n`, setvar = getSetVStr(com.values)
                if (setvar) { plot.push(sev + setvar) }
              }
              if (com.views && com.views.length > 0) {
                let addE = com.views[0], uiNow = gameInfoSy.viewMap[com.views[0].ref]
                if (uiNow) {
                  let uiName = addE.ref
                  if (uiNow.name) {
                    uiName = uiNow.name
                  }
                  let avs = `UI：${uiName}`, avc = []
                  if (!uiN[addE.ref]) {
                    plot.push(`调用${avs}`)
                    avc = getUIT(uiNow)
                    if (avc.length > 0) {
                      // uis.push(`——${avs}——`)
                      // uis.push(avc.join('\n'))
                      acc[avs] = avc
                      uiN[addE.ref] = { name: uiName, comm: avc }
                    }
                  } else {
                    acc[avs] = uiN[addE.ref].comm
                    plot.push(`调用${avs}`)
                  }
                }
              }
              if (com.condition_options && com.condition_options.length > 0) {
                let cond = '****判断分支****\n', condC = []
                com.condition_options.forEach((v, k) => {
                  let condB = ``, condk = []
                  if (v.plots) {
                    condk = getCommond(v.plots)
                  }
                  let cond = getCondT(v.expression)
                  let brn = v.name ? `(${v.name})` : ''
                  let brm = cond ? `进入条件：${cond}${condk.length > 0 ? '\n' : ''}` : ''
                  condB = `——分支${k + 1}${brn}——\n${brm}${condk.length > 0 ? condk.join('\n') : ''}`
                  condC.push(condB)
                })
                if (condC.length > 0) {
                  plot.push(cond + condC.join('\n') + '\n****判断分支END****')
                }
              }
              if (com.options && com.options.length > 0) {
                let ops = [], opt = []
                com.options.forEach((v, k) => {
                  let on = '', opc = []
                  if (v.name) {
                    on = v.name
                  } else {
                    on = `选项${k + 1}`
                  }
                  ops.push(on)
                  if (v.plots && v.plots.length > 0) { opc = getCommond(v.plots) }
                  if (opc.length > 0) {
                    opt.push(`【选项：${on}】\n${opc.join('\n')}`)
                  }
                })
                plot.push(`出现选项——${ops.join('、')}`)
                if (opt.length > 0) { plot.push(opt.join('\n')) }
              }
              if (com.insert) {
                if (parent.syChapterById[com.insert]) {
                  plot.push(`插入章节：${parent.syChapterById[com.insert].name}`)
                }
              }
              if (com.jump) {
                if (parent.syChapterById[com.jump]) {
                  plot.push(`跳转章节：${parent.syChapterById[com.jump].name}`)
                }
              }
            })
          }
          return plot
        }
        if (message.value[0] === 1) {
          let chapter = parent.syChapterById[message.value[1]]
          window.getChapterCommand(chapter.downloadUuid, chapter.md5).then(v => {
            let plotN = []
            v.forEach(pl => {
              plotN.push(...getCommond(pl))
            })
            if (Object.keys(bcc).length > 0) {
              Object.keys(bcc).forEach(ma => {
                plotN.push(`\n\n————${ma}————`)
                plotN.push(...bcc[ma])
              })
            }
            if (Object.keys(acc).length > 0) {
              Object.keys(acc).forEach(ma => {
                //plotN.push(`\n\n————${ma}————`)
                plotN.push('\n')
                plotN.push(...acc[ma])
              })
            }
            const blob = new Blob([plotN.join('\n')], { type: 'text/plain' });
            /*a标签模拟下载文件*/
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = chapter.name + '.txt';
            link.click();
            URL.revokeObjectURL(link.href);
          })
        } else if (message.value[0] === 2) {
          let chapter = window.gameInfoSy.viewMap[message.value[1]]
          let plotN = []
          if (window.uiN[chapter.uuid]) {
            plotN = window.uiN[chapter.uuid].comm
          } else {
            plotN = getUIT(chapter)
          }
          const blob = new Blob([plotN.join('\n')], { type: 'text/plain' });
          /*a标签模拟下载文件*/
          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          link.download = 'UI-' + (chapter.name || chapter.uuid) + '.txt';
          link.click();
          URL.revokeObjectURL(link.href);
        } else if (message.value[0] === 4) {
          let chapter = window.gameF.d
          let plotN = []
          chapter.plots.forEach(pl => {
            plotN.push(...getCommond(pl))
          })
          if (Object.keys(bcc).length > 0) {
            Object.keys(bcc).forEach(ma => {
              plotN.push(`\n\n————${ma}————`)
              plotN.push(...bcc[ma])
            })
          }
          if (Object.keys(acc).length > 0) {
            Object.keys(acc).forEach(ma => {
              //plotN.push(`\n\n————${ma}————`)
              plotN.push('\n')
              plotN.push(...acc[ma])
            })
          }
          const blob = new Blob([plotN.join('\n')], { type: 'text/plain' });
          /*a标签模拟下载文件*/
          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          link.download = (chapter.chapter.name || chapter.chapter.uuid) + '.txt';
          link.click();
          URL.revokeObjectURL(link.href);
        } else if (message.value[0] === 3) {
          let plotAll = []
          for (let i = 0; i < window.parent.syChapter.length; i++) {
            let chapter = window.parent.syChapter[i]
            let plotN = []
            let cp = await window.getChapterCommand(chapter.downloadUuid, chapter.md5)
            if (cp.length > 0) {
              cp.forEach(pl => {
                plotN.push(...getCommond(pl))
              })
              if (plotN.length > 0) {
                plotAll.push({ name: chapter.name || `剧情${chapter.uuid}`, blob: new Blob([plotN.join('\n')], { type: 'text/plain' }) })
              }
            }
          }
          window.parent.syUIName.forEach(v => {
            let chapter = window.gameInfoSy.viewMap[v.uuid]
            let plotN = []
            if (window.uiN[chapter.uuid]) {
              plotN = window.uiN[chapter.uuid].comm
            } else {
              plotN = getUIT(chapter)
            }
            if (plotN.length > 0) {
              plotAll.push({ name: 'UI/' + (chapter.name || `${chapter.uuid}`), blob: new Blob([plotN.join('\n')], { type: 'text/plain' }) })
            }
          })
          Object.values(window.macroN).forEach(v => {
            plotAll.push({ name: '宏/' + v.name, blob: new Blob([v.comm.join('\n')], { type: 'text/plain' }) })
          })
          const jszipUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
          const fileSaverUrl = 'https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js';
          let loadScript = function (src) {
            return new Promise((resolve, reject) => {
              const script = document.createElement('script');
              script.src = src;
              script.onload = resolve;
              script.onerror = reject;
              document.head.appendChild(script);
            });
          }
          let importLibraries = async function () {
            if (typeof JSZip === 'undefined') {
              await loadScript(jszipUrl);
            }
            if (typeof saveAs === 'undefined') {
              await loadScript(fileSaverUrl);
            }
          };
          let downloadImagesAsZip = async function (imageUrls) {
            const zip = new JSZip();
            for (const url of imageUrls) {
              const filename = `${url.name}.txt`;
              zip.file(filename, url.blob);
            }
            zip.generateAsync({ type: 'blob' })
              .then(function (content) {
                saveAs(content, `${window.gameInfoSy.name}(txt).zip`);
              });
          }
          importLibraries().then(() => {
            downloadImagesAsZip(plotAll)
          })
        }
        window.UIName = new Set()
        window.uiShowV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
        window.uiCondV = { value: new Set(), payValue: new Set(), stringValue: new Set(), savedValue: new Set(), systemValue: new Set() }
      }
    }
  })
}